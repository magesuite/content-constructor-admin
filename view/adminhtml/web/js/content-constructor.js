!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("Vue"),require("VueResource"),require("loadingPopup"),require("mage/translate"),require("Magento_Ui/js/modal/modal"),require("Magento_Ui/js/modal/alert"),require("uiRegistry"),require("Magento_Ui/js/modal/confirm")):"function"==typeof define&&define.amd?define("contentConstructor",["jquery","Vue","VueResource","loadingPopup","mage/translate","Magento_Ui/js/modal/modal","Magento_Ui/js/modal/alert","uiRegistry","Magento_Ui/js/modal/confirm"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).contentConstructor=e(t.jquery,t.Vue,t.VueResource,null,t["mage/translate"],t["Magento_Ui/js/modal/modal"],t["Magento_Ui/js/modal/alert"],t.uiRegistry,t["Magento_Ui/js/modal/confirm"])}(this,(function(t,e,n,i,o,c,a,s,r){"use strict";function l(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var d=l(t),u=l(e),p=l(n),g=l(o),f=l(c),m=l(a),_=l(s),h=l(r),v=function(){return v=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},v.apply(this,arguments)},b={template:'<section class="cc-component-picker | {{ class }}">\n        <div class="cc-component-picker__search" :class="{ \'cc-component-picker__search--clearable\': search.length > 0 }">\n            <input\n                type="text"\n                class="cc-input__input cc-component-picker__search-input"\n                placeholder="{{ \'Search components...\' | translate }}"\n                v-model="search"\n                v-el:search-input\n            >\n            <a href="#" class="cc-component-picker__search-clear" @click="clearSearch">\n                <span class="visually-hidden">{{ Clear | translate }}</span>\n            </a>\n        </div>\n        <ul class="cc-component-picker__list" v-if="filteredComponents.length">\n            <li class="cc-component-picker__list-item cc-component-picker__list-item--{{component.type}}" v-for="component in filteredComponents">\n                <a class="cc-component-picker__component-link" href="#" @click.prevent="onPickComponent( component.type, component.name )">\n                    <span class="cc-component-picker__component-figure">\n                        <svg class="cc-component-picker__component-icon">\n                            <use v-bind="{ \'xlink:href\': \'#icon_component-\' + component.type }"></use>\n                        </svg>\n                    </span>\n                    <span class="cc-component-picker__component-name">{{ component.name }}</span>\n                    <span class="cc-component-picker__component-description">{{ component.description }}</span>\n                </a>\n            </li>\n        </ul>\n        <p class="cc-component-picker__no-components" v-if="!filteredComponents.length">\n            No components available.\n        </p>\n    </section>',props:{class:{type:String,default:"",coerce:function(t){return t.replace("cc-component-picker","")}},pickComponent:{type:Function},components:{type:String,default:""},componentsEndpoint:{type:String,default:""},assetsSrc:{type:String,default:""}},events:{"component-picker__opened":function(){this.focusSearch()}},data:function(){return{availableComponents:[],search:""}},ready:function(){this.components?this.availableComponents=JSON.parse(this.components):this.componentsEndpoint&&this.$http.get(this.componentsEndpoint).then((function(t){this.availableComponents=t.json()})),this.focusSearch()},computed:{filteredComponents:function(){var t=this;return this.availableComponents.filter((function(e){return String(e.name).toLowerCase().includes(t.search.toLowerCase())}))}},methods:{translate:function(t){return d.default.mage.__(t)},onPickComponent:function(t,e){this.$dispatch("component-picker__pick",t,e),"function"==typeof this.pickComponent&&this.pickComponent(t,e)},clearSearch:function(){this.search=""},focusSearch:function(){this.$els.searchInput.focus()}}},y={template:'<button class="cc-action-button {{ class }}" @click="_onClick">\n        <slot></slot>\n    </button>',props:{class:{type:[String,Object,Array],default:""}},methods:{_onClick:function(t){this.$dispatch("action-button__click",t)}}},w={template:'<aside class="cc-component-actions | {{ class }}">\n        <div class="cc-component-actions__buttons">\n            <slot name="cc-component-actions__buttons"></slot>\n        </div>\n    </aside>',props:{class:{type:String,default:"",coerce:function(t){return t.replace("cc-component-actions","")}}}},x={template:'<div class="cc-component-adder {{ class }}">\n        <div class="cc-component-adder__button-wrapper" @click="onCreateComponent">\n            <slot></slot>\n        </div>\n        <span class="cc-component-adder__dashline"></span>\n    </div>',props:{class:{type:String,default:"",coerce:function(t){return t.replace("cc-component-adder","")}},createComponent:{type:Function}},methods:{onCreateComponent:function(t){this.$dispatch("component-adder__create-component",t),"function"==typeof this.createComponent&&this.createComponent(t)}}},C={template:'<div class="cc-brand-carousel-preview">\n        <svg class="cc-brand-carousel-preview__arrow cc-brand-carousel-preview__arrow--left">\n            <use xlink:href="#icon_dashboard-arrow-left"></use>\n        </svg>\n\n        <ul class="cc-brand-carousel-preview__list">\n            <template v-for="item in 6">\n                <li class="cc-brand-carousel-preview__list-item">\n                    <div class="cc-brand-carousel-preview__brand-wrapper">\n                        <svg class="cc-brand-carousel-preview__brand">\n                            <use xlink:href="#icon_component-cc-brand-logo"></use>\n                        </svg>\n                    </div>\n                </li>\n            </template>\n        </ul>\n\n        <svg class="cc-brand-carousel-preview__arrow cc-brand-carousel-preview__arrow--right">\n            <use xlink:href="#icon_dashboard-arrow-right"></use>\n        </svg>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""},assetsSrc:{type:String,default:""}}},k={template:'<div class="cc-button-preview">\n        <button class="cc-button-preview__button" type="button">{{ configuration.label }}</button>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},I={template:'<div class="cc-category-links-preview">\n        <div class="cc-category-links-preview__wrapper">\n            <h1 class="cc-category-links-preview__headline">{{ configuration.main_category_labels[0] }}</h1>\n            <div class="cc-category-links-preview__content">\n                <ul class="cc-category-links-preview__subcats">\n                    <template v-for="(index, label) in configuration.sub_categories_labels">\n                        <li class="cc-category-links-preview__subcat" v-if="index < configuration.sub_categories_labels.length">\n                            <span class="cc-category-links-preview__subcat-label">{{ label }}</span>\n                        </li>\n                    </template>\n                </ul>\n\n                <div v-if="!configuration.hide_link_to_all_products" class="cc-category-links-preview__all-button">\n                    <span class="cc-category-links-preview__all-button-text">'.concat(g.default("All products"),"</span>\n                </div>\n            </div>\n        </div>\n    </div>"),props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},S={template:'<div class="cc-cms-pages-teaser-preview">\n        <div class="cc-cms-pages-teaser-preview__wrapper">\n            <ul class="cc-component-placeholder__pills">\n                <li class="cc-component-placeholder__pill cc-component-placeholder__pill--clean">\n                    <span class="cc-component-placeholder__pill-label"><strong>'.concat(g.default("Tags"),':</strong></span>\n                </li>\n                <li class="cc-component-placeholder__pill" v-for="tag in getTagsArray()">\n                    <span class="cc-component-placeholder__pill-label">{{ tag }}</span>\n                </li>\n            </ul>\n            <ul class="cc-cms-pages-teaser-preview__scene" v-el:scene>\n                <li class="cc-cms-pages-teaser-preview__item" v-for="(n, index) in 4">\n                    <div class="cc-cms-pages-teaser-preview__teaser-wrapper">\n                        <svg class="cc-cms-pages-teaser-preview__teaser">\n                            <use xlink:href="#icon_cms-teaser-placeholder"></use>\n                        </svg>\n                    </div>\n                </li>\n            </ul>\n            <ul class="cc-component-placeholder__pills cc-component-placeholder__pills--on-bottom">\n                <li class="cc-component-placeholder__pill">\n                    <span class="cc-component-placeholder__pill-label">').concat(g.default("Teasers limit"),': <strong>{{ configuration.limit }}</strong></span>\n                </li>\n                <li class="cc-component-placeholder__pill">\n                    <span class="cc-component-placeholder__pill-label">').concat(g.default("Desktop layout"),": <strong>{{ configuration.currentScenario.desktopLayout.id }} ").concat(g.default("teasers per row"),'</strong></span>\n                </li>\n                <li class="cc-component-placeholder__pill">\n                    <span class="cc-component-placeholder__pill-label">').concat(g.default("Mobile layout"),": <strong>{{ configuration.currentScenario.mobileLayout.id }}</strong></span>\n                </li>\n            </ul>\n        </div>\n    </div>"),props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}},methods:{getTagsArray:function(){return this.configuration.tags.split(",")}}},O={template:'<div class="cc-custom-html-preview">\n        <div class="cc-custom-html-preview__content">\n            <svg class="cc-custom-html-preview__bg">\n                <use xlink:href="#icon_component-custom-html-bg"></use>\n            </svg>\n            <h2 class="cc-custom-html-preview__title">{{ configuration.title }}</h2>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},T={template:'<div class="cc-daily-deal-teaser-preview">\n        <div class="cc-daily-deal-teaser-preview__container">\n            <div class="cc-daily-deal-teaser-preview__main">\n                <div class="cc-daily-deal-teaser-preview__photo-mockup">\n                    <svg class="cc-daily-deal-teaser-preview__cart-icon">\n                        <use xlink:href="#cart" href="#cart"/>\n                    </svg>\n                </div>\n                <div class="cc-daily-deal-teaser-preview__product-info">\n                    <div class="cc-daily-deal-teaser-preview__product-info-container">\n                        <p class="cc-daily-deal-teaser-preview__product-data" v-if="configuration.category_id">category ID: {{{ configuration.category_id }}}</p>\n                        <p class="cc-daily-deal-teaser-preview__product-data" v-if="configuration.skus">SKU: {{{ configuration.skus }}}</p>\n                    </div>\n                    <div class="cc-daily-deal-teaser-preview__product-info-container">\n                        <div class="cc-daily-deal-teaser-preview__countdown-mockup">\n                            <div class="cc-daily-deal-teaser-preview__clock">\n                                <svg class="cc-daily-deal-teaser-preview__clock-icon">\n                                    <use xlink:href="#clock" href="#clock"/>\n                                </svg>\n                            </div>\n                            <div>\n                                <span class="cc-daily-deal-teaser-preview__countdown-digits">12</span> :\n                                <span class="cc-daily-deal-teaser-preview__countdown-digits">34</span> :\n                                <span class="cc-daily-deal-teaser-preview__countdown-digits">56</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="cc-daily-deal-teaser-preview__buttons-mockup">\n                <div class="cc-daily-deal-teaser-preview__button-mockup-1st"></div>\n                <div class="cc-daily-deal-teaser-preview__button-mockup-2nd"></div>\n                <div class="cc-daily-deal-teaser-preview__button-mockup-3rd"></div>\n            </div>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},P={template:'<div class="cc-headline-preview">\n        <h1 class="cc-headline-preview__headline">{{ configuration.title }}</h1>\n        <h2 class="cc-headline-preview__subheadline">{{ configuration.subtitle }}</h2>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},$={template:'<div class="cc-teaser-preview cc-teaser-preview--content-{{ parentConfiguration.scenario.contentPlacement.id ? parentConfiguration.scenario.contentPlacement.id : \'over\' }}{{configuration.image.image || configuration.image.raw ? \'\' : \' cc-teaser-preview--no-image\'}}" :class="{\'cc-teaser-preview--breakpoint-images-support\': supportBreakpointDedicatedImages}">\n        <div class="cc-teaser-preview__slide cc-teaser-preview__slide--scheme-{{configuration.optimizers.color_scheme}}" v-el:scale-relation>\n            <div\n                class="cc-teaser-preview__aspect-ratio"\n                v-if="configuration.image.aspect_ratio && parentConfiguration.scenario.contentPlacement.id !== \'under\'"\n                :style="{paddingTop: aspectRatio}"\n                v-show="!supportBreakpointDedicatedImages || (supportBreakpointDedicatedImages && deviceType === \'desktop\')"></div>\n            <div\n                class="cc-teaser-preview__aspect-ratio"\n                v-if="configuration.image.mobile.aspect_ratio && parentConfiguration.scenario.contentPlacement.id !== \'under\'" && supportBreakpointDedicatedImages && aspectRatioMobile\n                :style="{paddingTop: aspectRatioMobile}"\n                v-show="deviceType === \'mobile\'"></div>\n            <div\n                class="cc-teaser-preview__aspect-ratio"\n                v-if="configuration.image.tablet.aspect_ratio && parentConfiguration.scenario.contentPlacement.id !== \'under\'" && supportBreakpointDedicatedImages && aspectRatioTablet\n                :style="{paddingTop: aspectRatioTablet}"\n                v-show="deviceType === \'tablet\'"></div>\n            <div class="cc-teaser-preview__slide-wrapper">\n                <div class="cc-teaser-preview__video-indicator" v-if="configuration.video && configuration.video.url">\n                    <svg class="cc-teaser-preview__video-icon">\n                        <use xlink:href="#icon_video"></use>\n                    </svg>\n                </div>\n                <div\n                    class="cc-teaser-preview__aspect-ratio"\n                    v-if="configuration.image.aspect_ratio && parentConfiguration.scenario.contentPlacement.id !== \'under\'"\n                    :style="{paddingTop: aspectRatio}"\n                    v-show="!supportBreakpointDedicatedImages || (supportBreakpointDedicatedImages && deviceType === \'desktop\')"></div>\n                <div\n                    class="cc-teaser-preview__aspect-ratio"\n                    v-if="configuration.image.mobile.aspect_ratio && parentConfiguration.scenario.contentPlacement.id !== \'under\'" && supportBreakpointDedicatedImages && aspectRatioMobile\n                    :style="{paddingTop: aspectRatioMobile}"\n                    v-show="deviceType === \'mobile\'"></div>\n                <div\n                    class="cc-teaser-preview__aspect-ratio"\n                    v-if="configuration.image.tablet.aspect_ratio && parentConfiguration.scenario.contentPlacement.id !== \'under\'" && supportBreakpointDedicatedImages && aspectRatioTablet\n                    :style="{paddingTop: aspectRatioTablet}"\n                    v-show="deviceType === \'tablet\'"></div>\n                <figure class="cc-teaser-preview__figure">\n                    <img\n                        :src="configuration.image.image || configuration.image.raw"\n                        class="cc-teaser-preview__image cc-teaser-preview__image--desktop"\n                        :class="{\'cc-teaser-preview__image--mirror\': configuration.optimizers.mirror_image}"\n                        v-if="configuration.image.image || configuration.image.raw"\n                        v-show="!supportBreakpointDedicatedImages || (supportBreakpointDedicatedImages && deviceType === \'desktop\')"\n                    >\n                    <img\n                        :src="configuration.image.mobile.image || configuration.image.mobile.raw"\n                        class="cc-teaser-preview__image cc-teaser-preview__image--mobile"\n                        :class="{\'cc-teaser-preview__image--mirror\': configuration.optimizers.mirror_image}"\n                        v-if="supportBreakpointDedicatedImages && (configuration.image.mobile.image || configuration.image.mobile.raw)"\n                        v-show="deviceType === \'mobile\'"\n                    >\n                    <img\n                        :src="configuration.image.tablet.image || configuration.image.tablet.raw"\n                        class="cc-teaser-preview__image cc-teaser-preview__image--tablet"\n                        :class="{\'cc-teaser-preview__image--mirror\': configuration.optimizers.mirror_image}"\n                        v-if="supportBreakpointDedicatedImages && (configuration.image.tablet.image || configuration.image.tablet.raw)"\n                        v-show="deviceType === \'tablet\'"\n                    >\n                    <svg class="cc-teaser-preview__image-placeholder" v-if="!configuration.image.image && !configuration.image.raw">\n                        <use xlink:href="#icon_image-placeholder"></use>\n                    </svg>\n                </figure>\n\n                <div class="cc-teaser-preview__overlay" v-if="configuration.optimizers.scenarios.overlay.enabled" :style="{opacity: configuration.optimizers.scenarios.overlay.intensity / 100}"></div>\n                <div\n                    v-if="configuration.optimizers.scenarios.gradient.enabled"\n                    class="cc-teaser-preview__gradient cc-teaser-preview__gradient--direction-x-{{configuration.optimizers.scenarios.gradient.direction.x}} cc-teaser-preview__gradient--direction-y-{{configuration.optimizers.scenarios.gradient.direction.y}}"\n                    :style="{opacity: configuration.optimizers.scenarios.gradient.intensity / 100}"\n                ></div>\n\n                <div\n                    class="cc-teaser-preview__content-wrapper cc-teaser-preview__content-wrapper--content-align-x-{{configuration.content_align.x}} cc-teaser-preview__content-wrapper--content-align-y-{{configuration.content_align.y}}"\n                    v-if="configuration.slogan || configuration.description || (configuration.cta.label && configuration.cta.href)"\n                >\n                    <div\n                        class="cc-teaser-preview__content"\n                        :class="{\'cc-teaser-preview__content--container\': configuration.optimizers.scenarios.container.enabled}"\n                    >\n                        <div\n                            v-if="configuration.optimizers.scenarios.container.enabled"\n                            class="cc-teaser-preview__optimizer-container"\n                            :style="{opacity: configuration.optimizers.scenarios.container.intensity / 100}"\n                        ></div>\n\n                        <div\n                            class="cc-teaser-preview__text-content cc-teaser-preview__text-content--text-shadow-{{ configuration.optimizers.scenarios.text_shadow.enabled ? configuration.optimizers.scenarios.text_shadow.intensity : \'\'}}"\n                            :class="{\'cc-teaser-preview__text-content--text-shadow\': configuration.optimizers.scenarios.text_shadow.enabled}"\n                            :style="{fontSize: fontSize + \'px\'}"\n                        >\n                            <h2 v-if="configuration.slogan" class="cc-teaser-preview__slogan" @change="recalculateFontSize()">{{{configuration.slogan}}}</h2>\n                            <p v-if="configuration.description" class="cc-teaser-preview__description" @change="recalculateFontSize()">{{{configuration.description}}}</p>\n                        </div>\n\n                        <div v-if="configuration.cta.label && configuration.cta.href" class="cc-teaser-preview__cta">\n                            <span role="button" class="cc-teaser-preview__cta-button" title="{{configuration.cta.href}}">\n                                <span class="cc-teaser-preview__cta-button-span">{{configuration.cta.label}}</span>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>',props:{parentConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object},imageEndpoint:{type:String,default:""},teaserType:{type:String,default:"full"},supportBreakpointDedicatedImages:{type:Boolean,default:!1},deviceType:{type:String,default:"desktop"}},computed:{aspectRatio:function(){return this.formatAspectRatio(this.configuration.image.aspect_ratio)},aspectRatioMobile:function(){return this.formatAspectRatio(this.configuration.image.mobile.aspect_ratio)},aspectRatioTablet:function(){return this.formatAspectRatio(this.configuration.image.tablet.aspect_ratio)}},data:function(){return{scaleRatio:.002,initialFontSize:14,isScaleScheduled:!1,fontSize:this.recalculateFontSize()}},methods:{recalculateFontSize:function(){try{return this.initialFontSize*this.$els.scaleRelation.offsetWidth*this.scaleRatio}catch(t){}},setEvents:function(){var t=this;window.addEventListener("resize",(function(){t.isScaleScheduled||(t.isScaleScheduled=!0,window.requestAnimationFrame((function(){t.isScaleScheduled=!1;var e=t.recalculateFontSize();e&&(t.fontSize=e)})))}))},formatAspectRatio:function(t){if(t.length){var e=t.split(":");return"".concat(e[1]/e[0]*100,"%")}return"0"}},ready:function(){this.setEvents()}},L={components:{"teaser-preview":$},template:'<div data-role="spinner" class="cc-component-placeholder__loading" v-show="isLoading">\n        <div class="spinner">\n            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>\n        </div>\n    </div>\n    <div v-if="configuration.items[0].headline" style="padding-bottom: 1rem">This component has been updated, please configure it.</div>\n    <div class="cc-hero-carousel-preview" v-show="!isLoading">\n        <div v-bind:class="sceneClass" v-el:scene>\n            <div class="cc-hero-carousel-preview__slide" v-if="configuration.items.length > 1">\n                <teaser-preview :configuration="configuration.items[configuration.items.length - 1]" :parent-configuration="configuration"></teaser-preview>\n            </div>\n\n            <template v-for="(index, item) in configuration.items">\n                <div class="cc-hero-carousel-preview__slide" v-if="index < 2">\n                    <teaser-preview :configuration="configuration.items[$index]" :parent-configuration="configuration"></teaser-preview>\n                </div>\n            </template>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""},isLoading:{type:Boolean,default:!0}},ready:function(){this.setImagesLoadListener(),this.hideEmptySlideContents()},computed:{sceneClass:function(){return this.configuration.items.length>1?"cc-hero-carousel-preview__scene":"cc-hero-carousel-preview__scene cc-hero-carousel-preview__scene--single"}},methods:{setImagesLoadListener:function(){var t=this,e=d.default(this.$els.scene).find("img"),n=e.length;n?e.load((function(){--n||(t.isLoading=!1,e.each((function(){d.default(this).addClass("cc-hero-carousel-preview__item-image--border")})))})).filter((function(){return this.complete})).load():t.isLoading=!1},hideEmptySlideContents:function(){d.default(this.$els.scene).find(".cc-hero-carousel-preview__slide-content-info").each((function(){d.default(this).children().length||d.default(this).hide()}))}}},E={components:{"teaser-preview":$},template:'<div data-role="spinner" class="cc-component-placeholder__loading" v-show="isLoading">\n        <div class="spinner">\n            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>\n        </div>\n    </div>\n    <div class="cc-image-teaser-preview" v-show="!isLoading">\n        <div class="cc-image-teaser-preview__wrapper">\n            <ul class="cc-image-teaser-preview__scene cc-image-teaser-preview__scene--{{ configuration.scenario.desktopLayout.id }}-in-row" v-el:scene>\n                <template v-for="item in configuration.items">\n                    <li class="cc-image-teaser-preview__item">\n                        <teaser-preview :configuration="configuration.items[$index]" :parent-configuration="configuration"></teaser-preview>\n                    </li>\n                </template>\n            </ul>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""},isLoading:{type:Boolean,default:!0}},ready:function(){this.setImagesLoadListener(),this.hideEmptySlideContents()},methods:{setImagesLoadListener:function(){var t=this,e=d.default(this.$els.scene).find("img"),n=e.length;n?e.load((function(){--n||(t.isLoading=!1,e.each((function(){d.default(this).addClass("cc-image-teaser-preview__item-image--border")})))})).filter((function(){return this.complete})).load():t.isLoading=!1},hideEmptySlideContents:function(){d.default(this.$els.scene).find(".cc-image-teaser-preview__item-content").each((function(){d.default(this).children().length||d.default(this).hide()}))}}},N={mixins:[E]},D={template:'<div data-role="spinner" class="cc-component-placeholder__loading" v-show="isLoading">\n        <div class="spinner">\n            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>\n        </div>\n    </div>\n    <div class="cc-image-teaser-legacy-preview" v-show="!isLoading">\n        <div class="cc-image-teaser-legacy-preview__wrapper">\n            <ul class="cc-image-teaser-legacy-preview__scene cc-image-teaser-legacy-preview__scene--{{ configuration.currentScenario.desktopLayout.id }}-in-row" v-el:scene>\n                <template v-for="item in configuration.items">\n                    <li class="cc-image-teaser-legacy-preview__item">\n                        <img v-if="configuration.items[$index].image" :src="configuration.items[$index].image" class="cc-image-teaser-legacy-preview__item-image">\n                        <div class="cc-image-teaser-legacy-preview__image-placeholder-wrapper" v-show="!configuration.items[$index].image">\n                            <svg class="cc-image-teaser-legacy-preview__image-placeholder">\n                                <use xlink:href="#icon_image-placeholder"></use>\n                            </svg>\n                        </div>\n                        <div class="cc-image-teaser-legacy-preview__item-content">\n                            <h2 class="cc-image-teaser-legacy-preview__headline" v-if="configuration.items[$index].headline">{{ configuration.items[$index].headline }}</h2>\n                            <h3 class="cc-image-teaser-legacy-preview__subheadline" v-if="configuration.items[$index].subheadline">{{ configuration.items[$index].subheadline }}</h3>\n                            <p class="cc-image-teaser-legacy-preview__paragraph" v-if="configuration.items[$index].paragraph">{{ configuration.items[$index].paragraph }}</p>\n                            <template v-if="configuration.items[$index].href">\n                                <button type="button" class="cc-image-teaser-legacy-preview__button" v-if="configuration.items[$index].ctaLabel">{{ configuration.items[$index].ctaLabel }}</button>\n                            </template>\n                        </div>\n                    </li>\n                </template>\n            </ul>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""},isLoading:{type:Boolean,default:!0}},ready:function(){this.setImagesLoadListener(),this.hideEmptySlideContents()},methods:{setImagesLoadListener:function(){var t=this,e=d.default(this.$els.scene).find("img"),n=e.length;n?e.load((function(){--n||(t.isLoading=!1,e.each((function(){d.default(this).addClass("cc-image-teaser-legacy-preview__item-image--border")})))})).filter((function(){return this.complete})).load():t.isLoading=!1},hideEmptySlideContents:function(){d.default(this.$els.scene).find(".cc-image-teaser-legacy-preview__item-content").each((function(){d.default(this).children().length||d.default(this).hide()}))}}},z={template:'<div class="cc-magento-product-grid-teasers-preview">\n        <ul class="cc-magento-product-grid-teasers-preview__list">\n            <li class="cc-magento-product-grid-teasers-preview__list-item cc-magento-product-grid-teasers-preview__list-item--teaser">\n                <svg class="cc-magento-product-grid-teasers-preview__image-placeholder">\n                    <use xlink:href="#icon_image-placeholder"></use>\n                </svg>\n            </li>\n\n            <template v-for="i in 7">\n                <li class="cc-magento-product-grid-teasers-preview__list-item">\n                    <div class="cc-magento-product-grid-teasers-preview__product-wrapper">\n                        <svg class="cc-magento-product-grid-teasers-preview__product">\n                            <use xlink:href="#icon_component-cc-product-teaser-item"></use>\n                        </svg>\n                    </div>\n                </li>\n            </template>\n\n            <li class="cc-magento-product-grid-teasers-preview__list-item cc-magento-product-grid-teasers-preview__list-item--text">\n                <div>\n                    <div class="cc-magento-product-grid-teasers-preview__teasers-count">\n                        {{ teasersLength }}\n                    </div>\n                    <template v-if="teasersLength === 1">\n                        '.concat(g.default("teaser"),"\n                    </template>\n                    <template v-else>\n                        ").concat(g.default("teasers"),"\n                    </template>\n                </div>\n            </li>\n        </ul>\n    </div>"),props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}},computed:{teasersLength:function(){return this.configuration&&this.configuration.teasers?this.configuration.teasers.length:0}}},j={template:'<div class="cc-paragraph-preview">\n        <div class="cc-paragraph-preview__content">\n            <svg class="cc-paragraph-preview__bg">\n                <use xlink:href="#icon_component-paragraph-preview"></use>\n            </svg>\n            <h2 class="cc-paragraph-preview__title">{{ configuration.title }}</h2>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},M={template:'<div class="cc-product-carousel-preview">\n        <svg class="cc-product-carousel-preview__arrow cc-product-carousel-preview__arrow--left">\n            <use xlink:href="#icon_dashboard-arrow-left"></use>\n        </svg>\n\n        <ul class="cc-product-carousel-preview__list">\n            <template v-for="item in 4">\n                <li class="cc-product-carousel-preview__list-item">\n                    <div class="cc-product-carousel-preview__product-wrapper">\n                        <svg class="cc-product-carousel-preview__product">\n                            <use xlink:href="#icon_component-cc-product-teaser-item"></use>\n                        </svg>\n                    </div>\n                </li>\n            </template>\n        </ul>\n\n        <svg class="cc-product-carousel-preview__arrow cc-product-carousel-preview__arrow--right">\n            <use xlink:href="#icon_dashboard-arrow-right"></use>\n        </svg>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""},assetsSrc:{type:String,default:""}}},U={template:'<div class="cc-product-finder-preview">\n        <div class="cc-product-finder-preview__scene" :class="[ isConfiguratorPreview ? \'cc-product-finder-preview__scene--configurator\' : \'\' ]" v-if="configuration.steps.length">\n            <h2 class="cc-product-finder-preview__scene-title" :data-placeholder="\'No title\' | translate">{{{ configuration.steps[stepIndex].title }}}</h2>\n\n            <div class="cc-product-finder-preview__scene-description" :data-placeholder="\'No description\' | translate">{{{ configuration.steps[stepIndex].description }}}</div>\n\n            <ul class="cc-product-finder-preview__scene-options">\n                <template v-for="option in configuration.steps[stepIndex].options">\n                    <li class="cc-product-finder-preview__scene-option">\n                        <figure class="cc-product-finder-preview__scene-option-figure">\n                            <svg class="cc-product-finder-preview__scene-option-placeholder" v-show="!option.image">\n                                <use xlink:href="#icon_image-placeholder"></use>\n                            </svg>\n                            <img class="cc-product-finder-preview__scene-option-image" src="{{ option.image | decode }}" alt="" v-show="option.image" />\n                        </figure>\n                        <span class="cc-product-finder-preview__scene-option-label" :data-placeholder="\'No label\' | translate">{{{ option.label }}}</span>\n                    </li>\n                </template>\n            </ul>\n        </div>\n\n        <div class="cc-product-finder-preview__scene cc-product-finder-preview__scene--faded" v-if="configuration.steps.length > 1 && !isConfiguratorPreview"></div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""},imageEndpoint:{type:String,default:""},stepIndex:{type:Number,default:0},isConfiguratorPreview:{type:Boolean,default:!1}},filters:{decode:function(t){var e=window.btoa(t.replace(/\\\//g,"/"));return e&&e.length&&this.imageEndpoint.length?this.imageEndpoint.replace("{/encoded_image}",e):""},translate:function(t){return d.default.mage.__(t)}}},V={components:{"teaser-preview":$},template:'<div data-role="spinner" class="cc-component-placeholder__loading" v-show="isLoading">\n        <div class="spinner">\n            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>\n        </div>\n    </div>\n    <div class="cc-products-grid-preview" v-show="!isLoading" v-el:scene>\n        <template v-if="heroExists && !teaserExists">\n            <div class="cc-products-grid-preview__hero" v-if="configuration.hero.position == \'left\'">\n                <img v-if="configuration.hero.image" :src="configuration.hero.image" class="cc-products-grid-preview__hero-image">\n                <div class="cc-products-grid-preview__hero-placeholder-wrapper" v-show="!configuration.hero.image">\n                    <svg class="cc-products-grid-preview__hero-placeholder">\n                        <use xlink:href="#icon_image-placeholder"></use>\n                    </svg>\n                </div>\n                <div class="cc-products-grid-preview__hero-content">\n                    <h2 class="cc-products-grid-preview__headline" v-if="configuration.hero.headline">{{ configuration.hero.headline }}</h2>\n                    <h3 class="cc-products-grid-preview__subheadline" v-if="configuration.hero.subheadline">{{ configuration.hero.subheadline }}</h3>\n                    <p class="cc-products-grid-preview__paragraph" v-if="configuration.hero.paragraph">{{ configuration.hero.paragraph }}</p>\n                    <template v-if="configuration.hero.href">\n                        <button type="button" class="cc-products-grid-preview__button" v-if="configuration.hero.button.label">{{ configuration.hero.button.label }}</button>\n                    </template>\n                </div>\n            </div>\n\n            <ul v-bind:class="itemsGridClass">\n                <template v-for="item in getItemsCount()">\n                    <li class="cc-products-grid-preview__list-item">\n                        <div class="cc-products-grid-preview__product-wrapper">\n                            <svg class="cc-products-grid-preview__product">\n                                <use xlink:href="#icon_component-cc-product-teaser-item"></use>\n                            </svg>\n                        </div>\n                    </li>\n                </template>\n            </ul>\n\n            <div class="cc-products-grid-preview__hero" v-if="configuration.hero.position == \'right\'">\n                <img v-if="configuration.hero.image" :src="configuration.hero.image" class="cc-products-grid-preview__hero-image">\n                <div class="cc-products-grid-preview__hero-placeholder-wrapper" v-show="!configuration.hero.image">\n                    <svg class="cc-products-grid-preview__hero-placeholder">\n                        <use xlink:href="#icon_image-placeholder"></use>\n                    </svg>\n                </div>\n                <div class="cc-products-grid-preview__hero-content">\n                    <h2 class="cc-products-grid-preview__headline" v-if="configuration.hero.headline">{{ configuration.hero.headline }}</h2>\n                    <h3 class="cc-products-grid-preview__subheadline" v-if="configuration.hero.subheadline">{{ configuration.hero.subheadline }}</h3>\n                    <p class="cc-products-grid-preview__paragraph" v-if="configuration.hero.paragraph">{{ configuration.hero.paragraph }}</p>\n                    <template v-if="configuration.hero.href">\n                        <button type="button" class="cc-products-grid-preview__button" v-if="configuration.hero.button.label">{{ configuration.hero.button.label }}</button>\n                    </template>\n                </div>\n            </div>\n        </template>\n\n\n        <template v-if="teaserExists && !heroExists">\n            <teaser-preview :configuration="configuration.items[0]" :parent-configuration="configuration" v-if="configuration.items[0].position == \'left\'"></teaser-preview>\n\n            <ul v-bind:class="itemsGridClass">\n                <template v-for="item in getItemsCount()">\n                    <li class="cc-products-grid-preview__list-item">\n                        <div class="cc-products-grid-preview__product-wrapper">\n                            <svg class="cc-products-grid-preview__product">\n                                <use xlink:href="#icon_component-cc-product-teaser-item"></use>\n                            </svg>\n                        </div>\n                    </li>\n                </template>\n            </ul>\n\n            <teaser-preview :configuration="configuration.items[0]" :parent-configuration="configuration" v-if="configuration.useTeaser && (configuration.items[0].position == \'right\' || configuration.items[0].position == \'center\')"></teaser-preview>\n\n\n            <ul v-bind:class="itemsGridClass" v-if="configuration.items[0].position == \'center\'">\n                <template v-for="item in getItemsCount()">\n                    <li class="cc-products-grid-preview__list-item">\n                        <div class="cc-products-grid-preview__product-wrapper">\n                            <svg class="cc-products-grid-preview__product">\n                                <use xlink:href="#icon_component-cc-product-teaser-item"></use>\n                            </svg>\n                        </div>\n                    </li>\n                </template>\n            </ul>\n        </template>\n\n        <template v-if="!teaserExists && !heroExists">\n            <ul v-bind:class="itemsGridClass">\n                <template v-for="item in getItemsCount()">\n                    <li class="cc-products-grid-preview__list-item">\n                        <div class="cc-products-grid-preview__product-wrapper">\n                            <svg class="cc-products-grid-preview__product">\n                                <use xlink:href="#icon_component-cc-product-teaser-item"></use>\n                            </svg>\n                        </div>\n                    </li>\n                </template>\n            </ul>\n        </template>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""},isLoading:{type:Boolean,default:!0}},computed:{itemsGridClass:function(){return this.teaserExists?"cc-products-grid-preview__list cc-products-grid-preview__list--".concat(this.configuration.items[0].position):this.heroExists?"cc-products-grid-preview__list cc-products-grid-preview__list--".concat(this.configuration.hero.position):"cc-products-grid-preview__list"},heroExists:function(){return!(!this.configuration.hero||!this.configuration.hero.position)},teaserExists:function(){return!("true"!==this.configuration.useTeaser||!this.configuration.items[0].position)}},ready:function(){this.setImagesLoadListener(),this.hideEmptySlideContents()},methods:{setImagesLoadListener:function(){var t=this,e=d.default(this.$els.scene).find("img"),n=e.length;n?e.load((function(){--n||(t.isLoading=!1)})).filter((function(){return this.complete})).load():t.isLoading=!1},getItemsCount:function(){var t;return this.heroExists&&(t=3),this.teaserExists&&(t="center"===this.configuration.items[0].position?2:3),this.heroExists||this.teaserExists?t:10},hideEmptySlideContents:function(){d.default(this.$els.scene).find(".cc-products-grid-preview__hero-content").each((function(){d.default(this).children().length||d.default(this).hide()}))}}},A={template:'<div class="cc-separator-preview">\n        <hr class="cc-separator-preview__separator">\n    </div>',props:{class:{type:[String,Object,Array],default:""}}},W={template:'<div class="cc-static-block-preview">\n        <div class="cc-static-block-preview__content">\n            <svg class="cc-static-block-preview__bg">\n                <use xlink:href="#icon_component-cms-block-preview"></use>\n            </svg>\n            <h2 class="cc-static-block-preview__title">{{ configuration.title }}</h2>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},B={mixins:[E],template:'<div data-role="spinner" class="cc-component-placeholder__loading" v-show="isLoading">\n        <div class="spinner">\n            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>\n        </div>\n    </div>\n    <div class="cc-image-teaser-preview" v-show="!isLoading">\n        <div class="cc-image-teaser-preview__wrapper">\n            <ul class="cc-image-teaser-preview__scene cc-image-teaser-preview__scene--2-in-row" v-el:scene>\n                <template v-for="item in configuration.items">\n                    <li class="cc-image-teaser-preview__item cc-image-teaser-preview__item--{{configuration.items[$index].teaserType}}">\n                        <teaser-preview :configuration="configuration.items[$index]" :parent-configuration="configuration"></teaser-preview>\n                    </li>\n                </template>\n            </ul>\n        </div>\n    </div>'},F={mixins:[E],template:'<div data-role="spinner" class="cc-component-placeholder__loading" v-show="isLoading">\n        <div class="spinner">\n            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>\n        </div>\n    </div>\n    <div class="cc-image-teaser-preview cc-image-teaser-preview--mosaic" v-show="!isLoading">\n        <div class="cc-image-teaser-preview__wrapper">\n            <ul class="cc-image-teaser-preview__scene cc-image-teaser-preview__scene--2-in-row cc-image-teaser-preview__scene--asymmetric-{{configuration.scenario.proportions.id}}" v-el:scene>\n                <template v-for="item in configuration.items">\n                    <li class="cc-image-teaser-preview__item cc-image-teaser-preview__item--{{configuration.items[$index].teaserType}}">\n                        <teaser-preview :configuration="configuration.items[$index]" :parent-configuration="configuration"></teaser-preview>\n                    </li>\n                </template>\n            </ul>\n        </div>\n    </div>'},J={template:'<div class="cc-accordion-preview">\n        <div class="cc-accordion-preview__wrapper">\n            <ul class="cc-accordion-preview__items">\n                <li\n                    :class="{\n                        \'cc-accordion-preview__item\': true,\n                        \'cc-accordion-preview__item--open\': $index === 0,\n                    }"\n                    v-for="item in configuration.groups[0].items"\n                    v-if="$index < 10"\n                >\n                    <div class="cc-accordion-preview__item-headline">\n                        {{ item.headline }}\n                        <svg class="cc-accordion-preview__arrow"><use xlink:href="#icon_accordion-arrow"></use></svg>\n                    </div>\n                    <div class="cc-accordion-preview__item-content" v-if="$index === 0">{{ item.content }}</div>\n                </li>\n            </ul>\n        </div>\n    </div>',props:{configuration:{type:Object}}},R={template:'<div class="cc-product-teaser-preview">\n        <div class="cc-product-teaser-preview__icon-wrapper">\n            <svg class="cc-product-teaser-preview__icon">\n                <use xlink:href="#icon_component-product-teaser-preview"></use>\n            </svg>\n        </div>\n        <div class="cc-product-teaser-preview__data">\n            <span>{{configuration.product.name}} (SKU: {{configuration.sku}})</span>\n        </div>\n    </div>',props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},H={template:'<div class="cc-input cc-input--type-text cc-input--{{fieldConfiguration.model}}">\n        <label for="{{fieldConfiguration.model | prefixFieldId}}" class="cc-input__label" v-if="fieldConfiguration.label">\n            {{fieldConfiguration.label | translate}}:\n        </label>\n        <input type="text" class="cc-input__input" id="{{fieldConfiguration.model | prefixFieldId}}" :name="fieldConfiguration.model" v-model="configuration[fieldConfiguration.model]">\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{{fieldConfiguration.warning | translate}}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{{fieldConfiguration.note | translate}}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{{fieldConfiguration.hint | translate}}}</p>\n    </div>',props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}},teaserIndex:{type:Number,default:0}},filters:{translate:function(t){return d.default.mage.__(t)},prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)}},ready:function(){null==this.configuration[this.fieldConfiguration.model]&&null!=this.fieldConfiguration.default&&this.$set("configuration.".concat(this.fieldConfiguration.model),this.fieldConfiguration.default)}},Y={template:'<div class="cc-input cc-input--type-select cc-input--{{fieldConfiguration.model}}">\n        <label for="{{fieldConfiguration.model | prefixFieldId}}" class="cc-input__label" v-if="fieldConfiguration.label">\n            {{fieldConfiguration.label | translate}}:\n        </label>\n        <select class="cc-input__select" id="{{fieldConfiguration.model | prefixFieldId}}" :name="fieldConfiguration.model" v-model="configuration[fieldConfiguration.model]">\n            <option v-for="(value, label) in fieldConfiguration.options" :value="value">{{ label }}</option>\n        </select>\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{{fieldConfiguration.warning | translate}}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{{fieldConfiguration.note | translate}}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{{fieldConfiguration.hint | translate}}}</p>\n    </div>',props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}},teaserIndex:{type:Number,default:0}},filters:{translate:function(t){return d.default.mage.__(t)},prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)}},ready:function(){null==this.configuration[this.fieldConfiguration.model]&&null!=this.fieldConfiguration.default&&this.$set("configuration.".concat(this.fieldConfiguration.model),this.fieldConfiguration.default)}},G={template:'<div class="cc-input cc-input--type-textarea cc-input--{{fieldConfiguration.model}}">\n        <label for="{{fieldConfiguration.model | prefixFieldId}}" class="cc-input__label" v-if="fieldConfiguration.label">\n            {{fieldConfiguration.label | translate}}:\n        </label>\n        <textarea class="cc-input__textarea" id="{{fieldConfiguration.model | prefixFieldId}}" :name="fieldConfiguration.model" v-model="configuration[fieldConfiguration.model] | prettify"></textarea>\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{{fieldConfiguration.warning | translate}}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{{fieldConfiguration.note | translate}}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{{fieldConfiguration.hint | translate}}}</p>\n    </div>',props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}},teaserIndex:{type:Number,default:0}},filters:{translate:function(t){return d.default.mage.__(t)},prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)},prettify:{read:function(t){return t?t.replace(/<br\s*[\/]?>/gi,"\n"):""},write:function(t){return t.replace(/\n/g,"<br>")}}},ready:function(){null==this.configuration[this.fieldConfiguration.model]&&null!=this.fieldConfiguration.default&&this.$set("configuration.".concat(this.fieldConfiguration.model),this.fieldConfiguration.default)}},q={template:'<div class="cc-input cc-input--type-switcher cc-input--{{fieldConfiguration.model}}">\n        <div class="admin__actions-switch" data-role="switcher">\n            <input type="checkbox" class="admin__actions-switch-checkbox" id="{{fieldConfiguration.model | prefixFieldId}}" :name="fieldConfiguration.model" v-model="configuration[fieldConfiguration.model]">\n            <label class="admin__actions-switch-label" for="{{fieldConfiguration.model | prefixFieldId}}" v-if="fieldConfiguration.label">\n                <span class="admin__actions-switch-text">{{fieldConfiguration.label | translate}}</span>\n            </label>\n        </div>\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{{fieldConfiguration.warning | translate}}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{{fieldConfiguration.note | translate}}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{{fieldConfiguration.hint | translate}}}</p>\n    </div>',props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}},teaserIndex:{type:Number,default:0}},filters:{translate:function(t){return d.default.mage.__(t)},prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)}},ready:function(){null==this.configuration[this.fieldConfiguration.model]&&null!=this.fieldConfiguration.checked&&this.$set("configuration.".concat(this.fieldConfiguration.model),this.fieldConfiguration.checked)}},K={template:'<div class="cc-input cc-input--wrapper cc-input--{{fieldConfiguration.model}}">\n        <label class="cc-input__label cc-input__label--radio-group" v-if="fieldConfiguration.label">\n            {{fieldConfiguration.label | translate}}\n        </label>\n        <div class="cc-input cc-input--type-radio" v-for="(value, label) in fieldConfiguration.options">\n            <input type="radio" id="{{fieldConfiguration.model | prefixFieldId }}-{{$index + 1}}" class="cc-input__radio" :name="fieldConfiguration.model" :value="value" v-model="configuration[fieldConfiguration.model]">\n            <label for="{{fieldConfiguration.model | prefixFieldId }}-{{$index + 1}}" class="cc-input__label cc-input__label--radio">{{label | translate}}</label>\n        </div>\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{{fieldConfiguration.warning | translate}}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{{fieldConfiguration.note | translate}}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{{fieldConfiguration.hint | translate}}}</p>\n    </div>',props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}},teaserIndex:{type:Number,default:0}},filters:{translate:function(t){return d.default.mage.__(t)},prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)}},ready:function(){null==this.configuration[this.fieldConfiguration.model]&&null!=this.fieldConfiguration.default&&this.$set("configuration.".concat(this.fieldConfiguration.model),this.fieldConfiguration.default)}},Q={template:'<div class="cc-input cc-input--type-position-grid cc-input--{{fieldConfiguration.model}}">\n        <label class="cc-input__label" v-if="fieldConfiguration.label">{{fieldConfiguration.label | translate}}:</label>\n        <div\n            class="cc-position-grid"\n            :style="{\'width\': gridWidth}"\n        >\n            <template v-for="y in rows">\n                <template v-for="x in columns">\n                    <span\n                        class="cc-position-grid__item"\n                        :class="{\n                            \'cc-position-grid__item--active\': isCurrentPosition(x+1, y+1)\n                        }"\n                        @click="setPosition(x+1, y+1)"\n                    ></span>\n                </template>\n            </template>\n        </div>\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{{fieldConfiguration.warning | translate}}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{{fieldConfiguration.note | translate}}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{{fieldConfiguration.hint | translate}}}</p>\n    </div>',props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}}},filters:{translate:function(t){return d.default.mage.__(t)}},computed:{rows:function(){return Number(this.fieldConfiguration.rows)},columns:function(){return Number(this.fieldConfiguration.columns)},gridWidth:function(){return"".concat(4*this.columns,"rem")}},methods:{isCurrentPosition:function(t,e){return Number(this.configuration[this.fieldConfiguration.model].x)===t&&Number(this.configuration[this.fieldConfiguration.model].y)===e},setPosition:function(t,e){this.configuration[this.fieldConfiguration.model]={x:t,y:e}}},ready:function(){null==this.configuration[this.fieldConfiguration.model]&&(this.$set("configuration.".concat(this.fieldConfiguration.model),{}),null!=this.fieldConfiguration.default&&"number"==typeof this.fieldConfiguration.default.x&&"number"==typeof this.fieldConfiguration.default.y&&this.setPosition(this.fieldConfiguration.default.x,this.fieldConfiguration.default.y))}},Z={template:'<div class="cc-input cc-input--type-daterange cc-input--{{fieldConfiguration.model}}">\n        <label class="cc-input__label" v-if="fieldConfiguration.label" style="margin-bottom: 1rem; width: 100%;">\n            {{fieldConfiguration.label}}\n        </label>\n        <label for="{{fieldConfiguration.model + \'date_from\' | prefixFieldId}}" class="cc-input__label">\n            From:\n        </label>\n        <input type="datetime-local" v-model="datetime_from" :max="datetime_to" class="cc-input__input" id="{{fieldConfiguration.model + \'date_from\' | prefixFieldId}}" :name="datetime_from">\n        <label for="{{fieldConfiguration.model + \'date_to\' | prefixFieldId}}" class="cc-input__label" style="margin-top: 1rem;">\n            To:\n        </label>\n        <input type="datetime-local" v-model="datetime_to" :min="datetime_from" class="cc-input__input" id="{{fieldConfiguration.model  + \'date_to\' | prefixFieldId}}" :name="datetime_to">\n\n        <p class="cc-error" v-if="dateValidationError">{{dateValidationError}}</p>\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{fieldConfiguration.warning}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{fieldConfiguration.note}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{fieldConfiguration.hint}}</p>\n    </div>',data:function(){return{datetime_from:"",datetime_to:"",dateValidationError:""}},methods:{validateAndUpdateValue:function(){if(this.validateDates()){var t=this.datetime_from.length?"".concat(Math.floor(new Date(this.datetime_from).getTime()/1e3)):"",e=this.datetime_to.length?"".concat(Math.floor(new Date(this.datetime_to).getTime()/1e3)):"";this.$set("configuration.".concat(this.fieldConfiguration.model),"".concat(t,"|").concat(e))}},validateDates:function(){return this.dateValidationError=new Date(this.datetime_from).valueOf()>new Date(this.datetime_to).valueOf()?'"From" date needs to preceed "To" date':"",0===this.dateValidationError.length}},watch:{datetime_from:function(t,e){t!==e&&this.validateAndUpdateValue()},datetime_to:function(t,e){t!==e&&this.validateAndUpdateValue()}},props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}},teaserIndex:{type:Number,default:0}},filters:{prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)}},ready:function(){var t=this;require(["moment"],(function(e){if(t.configuration[t.fieldConfiguration.model]){var n=t.configuration[t.fieldConfiguration.model].split("|"),i=n[0],o=n[1],c="YYYY-MM-DDTHH:mm:ss";t.datetime_from=i.length?e(Number(1e3*i)).format(c):"",t.datetime_to=o.length?e(Number(1e3*o)).format(c):""}else null!=t.fieldConfiguration.default&&t.$set("configuration.".concat(t.fieldConfiguration.model),t.fieldConfiguration.default)}))}},X={template:'<div class="cc-input cc-input--type-color cc-input--{{fieldConfiguration.model}}">\n        <label for="{{fieldConfiguration.model | prefixFieldId}}" class="cc-input__label" v-if="fieldConfiguration.label">\n            {{fieldConfiguration.label | translate}}:\n        </label>\n        <div class="cc-input__wrapper">\n            <input type="text" class="cc-input__input" id="{{fieldConfiguration.model | prefixFieldId}}" :name="fieldConfiguration.model" v-model="configuration[fieldConfiguration.model]" pattern="#[a-fA-F0-9]{6}" maxlength="7">\n            <input type="color" class="cc-input__input cc-input__input--type-color" :value="configuration[fieldConfiguration.model]" @change="updateValue($event)">\n        </div>\n        <p class="cc-warning" v-if="fieldConfiguration.warning">{{{fieldConfiguration.warning | translate}}}</p>\n        <p class="cc-input__note" v-if="fieldConfiguration.note">{{{fieldConfiguration.note | translate}}}</p>\n        <p class="cc-input__hint" v-if="fieldConfiguration.hint">{{{fieldConfiguration.hint | translate}}}</p>\n    </div>',props:{fieldConfiguration:{type:Object,default:function(){return{}}},configuration:{type:Object,default:function(){return{}}},teaserIndex:{type:Number,default:0}},filters:{translate:function(t){return d.default.mage.__(t)},prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)}},methods:{updateValue:function(t){this.$set("configuration.".concat(this.fieldConfiguration.model),t.target.value)}},ready:function(){null==this.configuration[this.fieldConfiguration.model]&&null!=this.fieldConfiguration.default&&this.$set("configuration.".concat(this.fieldConfiguration.model),this.fieldConfiguration.default)}},tt={components:{"custom-element-input":H,"custom-element-select":Y,"custom-element-textarea":G,"custom-element-checkbox":q,"custom-element-radio":K,"custom-element-position":Q,"custom-element-datetime-range":Z,"custom-element-color":X},props:{class:{type:[String,Object,Array],default:""},save:{type:Function,default:function(){return function(){}}},change:{type:Function,default:function(){return function(){}}},configuration:{type:String,default:function(){}},ccConfig:{type:Object,default:function(){return{}}}},methods:{_getCustomCssFields:function(t){var e=[];return Object.keys(t).forEach((function(n){"string"!=typeof t[n].content&&null!=t[n].content.fields&&Object.keys(t[n].content.fields).forEach((function(i){"css_class"===t[n].content.fields[i].frontend_type&&e.push(t[n].content.fields[i].model)}))})),e},_collectComponentCssClasses:function(){var t=this;if(null!=this.ccConfig[this.xmlConfigEntry]&&null!=this.ccConfig[this.xmlConfigEntry].custom_sections){var e=this._getCustomCssFields(this.ccConfig[this.xmlConfigEntry].custom_sections),n=[];e.forEach((function(e){t.configuration[e]&&"string"==typeof t.configuration[e]&&n.push(t.configuration[e])})),this.configuration.cc_css_classes=n.join(" ")}},onChange:function(t){var e=JSON.parse(JSON.stringify(this.configuration));this.$dispatch("component-configurator__changed",e),this.change(e)},onSave:function(t){this._collectComponentCssClasses();var e=JSON.parse(JSON.stringify(this.configuration));this.$dispatch("component-configurator__saved",e),this.save(e)}},events:{"component-configurator__save":function(){1===this._events["component-configurator__save"].length&&this.onSave()}},filters:{sectionID:function(t){return t.replace(/\s+/g,"-").toLowerCase()}}},et=/(?:youtu\.be\/|youtube(?:-nocookie)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//,nt=/vimeo\.com\/.+/,it=/^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/,ot=/^https?:\/\/fb\.watch\/.+$/,ct=/(^\{\{media url=")|($\}\})/,at={image:{raw:"",decoded:"",aspect_ratio:"",fetch_priority:!1,mobile:{raw:"",decoded:"",aspect_ratio:""},tablet:{raw:"",decoded:"",aspect_ratio:""}},video:{url:"",type:""},slogan:"",description:"",cta:{label:"More",href:"",target:!1},content_align:{x:1,y:1},sizeSelect:"2x1",size:{x:2,y:1},row:1,position:"left",isAvailableForMobile:1,optimizers:{color_scheme:"dark",mirror_image:!1,scenarios:{none:{enabled:!0,intensity:"disabled",direction:"disabled",configurator:{icon:"#contrast_none",label:"None"}},overlay:{enabled:!1,intensity:50,direction:"disabled",configurator:{icon:"#contrast_overlay",label:"Overlay"}},gradient:{enabled:!1,intensity:50,direction:{x:1,y:1},configurator:{icon:"#contrast_gradient",label:"Gradient shadow"}},container:{enabled:!1,intensity:50,direction:"disabled",configurator:{icon:"#contrast_container",label:"Container"}},text_shadow:{enabled:!1,intensity:50,direction:"disabled",configurator:{icon:"#contrast_text-shadow",label:"Text shadow"}}}},tracking_id:"",teaserType:"",image_alt:""},st={mixins:[tt],components:{"action-button":y,"component-actions":w,"teaser-preview":$,"custom-element-input":H,"custom-element-select":Y,"custom-element-textarea":G,"custom-element-checkbox":q,"custom-element-radio":K,"custom-element-position":Q,"custom-element-datetime":Z,"custom-element-color":X},template:'\n    <div\n        class="cc-teaser-configurator cc-teaser-configurator--{{configuratorLayout}} cc-teaser-configurator--{{teaserType}}"\n        :class="{\n            \'cc-teaser-configurator--actions-visible\': videoInputVisible,\n            \'cc-teaser-configurator--error\': videoTeaserPlaceholderError && !configuration.image.raw\n        }"\n    >\n        <p class="cc-image-teaser-configurator__section-error" v-if="videoTeaserPlaceholderError && !configuration.image.raw">\n            {{ \'Please upload an image, too. It will be used as a placeholder and a fallback for your video\' | translate }}\n        </p>\n        <section class="cc-teaser-configurator__section">\n            <div class="cc-teaser-configurator__content cc-teaser-configurator__content--{{currentImageUploader}}" id="cc-teaser-{{teaserIndex}}">\n                <div class="cc-teaser-configurator__col cc-teaser-configurator__col--preview" :class="{\'cc-teaser-configurator__col--image-uploaded\': configuration.image.raw}">\n                    <div class="cc-teaser-configurator__image-wrapper">\n\n                        <teaser-preview :configuration="configuration" :parent-configuration="parentConfiguration" :teaser-type="teaserType" :support-breakpoint-dedicated-images="supportBreakpointDedicatedImages" :device-type="currentImageUploader"></teaser-preview>\n\n                        <input type="hidden" class="cc-teaser-configurator__image-url cc-teaser-configurator__image-url--mobile" id="teaser-img-mobile-{{teaserIndex}}" data-teaser-index="{{teaserIndex}}" v-if="supportBreakpointDedicatedImages">\n                        <input type="hidden" class="cc-teaser-configurator__image-url cc-teaser-configurator__image-url--tablet" id="teaser-img-tablet-{{teaserIndex}}" data-teaser-index="{{teaserIndex}}" v-if="supportBreakpointDedicatedImages">\n                        <input type="hidden" class="cc-teaser-configurator__image-url" id="teaser-img-{{teaserIndex}}" data-teaser-index="{{teaserIndex}}">\n                        <input type="hidden" class="cc-teaser-configurator__video-url" id="teaser-video-{{teaserIndex}}" data-teaser-index="{{teaserIndex}}">\n\n                        <div class="cc-teaser-configurator__device-tabs" v-if="supportBreakpointDedicatedImages">\n                            <component-actions>\n                                <template slot="cc-component-actions__buttons">\n                                    <button\n                                        class="cc-action-button cc-action-button--look_default cc-component-actions__button cc-component-actions__button--device cc-teaser-configurator__action-button"\n                                        :class="{\'cc-action-button--selected\': currentImageUploader === \'mobile\'}"\n                                        @click="switchUploaderBreakpoint(\'mobile\')">\n                                        {{ \'Mobile\' | translate }}\n                                    </button>\n                                    <button\n                                        class="cc-action-button cc-action-button--look_default cc-component-actions__button cc-component-actions__button--device cc-teaser-configurator__action-button"\n                                        :class="{\'cc-action-button--selected\': currentImageUploader === \'tablet\'}"\n                                        @click="switchUploaderBreakpoint(\'tablet\')">\n                                        {{ \'Tablet\' | translate }}\n                                    </button>\n                                    <button\n                                        class="cc-action-button cc-action-button--look_default cc-component-actions__button cc-component-actions__button--device cc-teaser-configurator__action-button"\n                                        :class="{\'cc-action-button--selected\': currentImageUploader === \'desktop\'}"\n                                        @click="switchUploaderBreakpoint(\'desktop\')">\n                                        {{ \'Desktop\' | translate }}\n                                    </button>\n                                </template>\n                            </component-actions>\n                        </div>\n\n                        <div class="cc-teaser-configurator__actions">\n                            <component-actions>\n                                <template slot="cc-component-actions__buttons">\n                                    <template v-if="callerComponentType !== \'products-grid\'">\n                                        <button\n                                            class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--up cc-teaser-configurator__action-button"\n                                            :class="{\'cc-action-button--look_disabled\': isFirstImageTeaser(teaserIndex)}"\n                                            @click="callerComponentType === \'teaser-and-text\' ? toggleTeaserAndTextItems(teaserIndex) : moveImageTeaserUp(teaserIndex)"\n                                            :disabled="isFirstImageTeaser(teaserIndex)"\n                                        >\n                                            <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                <use xlink:href="#icon_arrow-up"></use>\n                                            </svg>\n                                        </button>\n                                        <button\n                                            class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--down cc-teaser-configurator__action-button"\n                                            :class="{\'cc-action-button--look_disabled\': isLastImageTeaser(teaserIndex)}"\n                                            :disabled="isLastImageTeaser(teaserIndex)"\n                                            @click="callerComponentType === \'teaser-and-text\' ? toggleTeaserAndTextItems(teaserIndex) : moveImageTeaserDown(teaserIndex)"\n                                        >\n                                            <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                <use xlink:href="#icon_arrow-down"></use>\n                                            </svg>\n                                        </button>\n                                    </template>\n                                    <button\n                                        title="{{ \'Open media uploader\' | translate }}"\n                                        class="cc-action-button cc-action-button--look_default cc-action-button--type_icon cc-component-actions__button cc-component-actions__button--upload-image cc-teaser-configurator__action-button"\n                                        @click="getMediaUploader(teaserIndex)"\n                                    >\n                                        <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                            <use xlink:href="#icon_upload-image"></use>\n                                        </svg>\n                                        {{ imageActionText | translate }}\n                                    </button>\n                                    <template v-if="callerComponentType !== \'icon\'">\n                                        <button\n                                            class="cc-action-button cc-action-button--look_default cc-action-button--type_icon cc-component-actions__button cc-component-actions__button--upload-video cc-teaser-configurator__action-button cc-teaser-configurator__action-button--video"\n                                            @click="toggleVideoConfig(teaserIndex)"\n                                        >\n                                            <svg class="cc-action-button__icon">\n                                                <use xlink:href="#icon_video"></use>\n                                            </svg>\n                                            {{ "Video" | translate }}\n                                        </button>\n                                    </template>\n                                    <template v-if="callerComponentType !== \'products-grid\'">\n                                        <button\n                                            class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--delete cc-teaser-configurator__action-button"\n                                            @click="deleteTeaserItem(teaserIndex)"\n                                        >\n                                            <svg class="cc-action-button__icon">\n                                                <use xlink:href="#icon_trash-can"></use>\n                                            </svg>\n                                        </button>\n                                    </template>\n                                </template>\n                            </component-actions>\n                            <div\n                                class="cc-teaser-configurator__video-link"\n                                :class="{\n                                    \'cc-teaser-configurator__video-link--show\': videoInputVisible\n                                }"\n                            >\n                                <div class="cc-input cc-input--type-addon cc-teaser-configurator__form-element">\n                                    <label for="cfg-teaser-{{teaserIndex}}-video-link" class="cc-input__label">{{ \'Video url\' | translate }}:</label>\n                                    <input\n                                        v-model="videoInputValue"\n                                        type="text"\n                                        id="cfg-teaser-{{teaserIndex}}-video-link"\n                                        class="cc-input__input"\n                                        v-on:keyup.enter="setVideoData(teaserIndex)"\n                                    >\n                                        <span\n                                            title="{{ \'Submit url\' | translate }}"\n                                            class="cc-input__addon cc-teaser-configurator__video-link-submit"\n                                            :class="{\'cc-teaser-configurator__video-link-submit--confirmed\': configuration.video && videoInputValue === configuration.video.url}"\n                                            @click="setVideoData(teaserIndex)"\n                                        >\n                                            <svg class="cc-input__addon-icon">\n                                                <use xlink:href="#check"></use>\n                                            </svg>\n                                        </span>\n                                        <span\n                                            title="{{ \'Open media uploader\' | translate }}"\n                                            class="cc-input__addon cc-teaser-configurator__video-upload-trigger"\n                                            @click="getMediaUploader(teaserIndex,\'video\')"\n                                        >\n                                            <svg class="cc-input__addon-icon">\n                                                <use xlink:href="#icon_upload-file"></use>\n                                            </svg>\n                                        </span>\n                                </div>\n                                <div class="cc-teaser-configurator__video-support-info">\n                                    {{ \'Supported services:\' | translate }} <b>YouTube</b>, <b>Vimeo</b>, <b>Facebook</b>, <b>{{ \'File (mp4)\' | translate }}</b>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n                <div class="cc-teaser-configurator__col cc-teaser-configurator__col--configurator">\n                    <ul class="cc-teaser-configurator__tabs">\n                        <li\n                            v-for="(index, tab) in ccConfig.teaser.tabs"\n                            v-if="tab && tab.label && tab.content"\n                            class="cc-teaser-configurator__tab"\n                            :class="{\'cc-teaser-configurator__tab--current\': currentTab == index}"\n                            @click="switchTab(index)"\n                        >\n                            <span class="cc-teaser-configurator__tab-label">{{tab.label}}</span>\n                        </li>\n                        <li\n                            v-if="callerComponentType === \'magento-product-grid-teasers\' || callerComponentType === \'products-grid\'"\n                            class="cc-teaser-configurator__tab"\n                            :class="{\'cc-teaser-configurator__tab--current\': currentTab == callerComponentType}"\n                            @click="switchTab(callerComponentType)"\n                        >\n                            <span class="cc-teaser-configurator__tab-label">{{ \'Position\' | translate }}</span>\n                        </li>\n                    </ul>\n\n                    <div\n                        v-for="(index, tab) in ccConfig.teaser.tabs"\n                        v-if="tab && tab.label && tab.content"\n                        class="cc-teaser-configurator__tab-content"\n                        :class="{\'cc-teaser-configurator__tab-content--current\': currentTab == index}"\n                    >\n                        <template v-if="tab.content && tab.content === \'#content\'">\n                            <div\n                                class="cc-teaser-configurator__tab-section"\n                                :class="{\'block-disabled\': parentConfiguration.scenario.contentPlacement.id === \'under\'}"\n                            >\n                                <label class="cc-input__label">{{ \'Content align\' | translate }}:</label>\n                                <div class="cc-teaser-configurator__position-grid">\n                                    <template v-for="y in 3">\n                                        <template v-for="x in 3">\n                                            <span\n                                                class="cc-teaser-configurator__position-grid-item"\n                                                :class="{\'cc-teaser-configurator__position-grid-item--active\': isCurrentContentAlign(x+1, y+1)}"\n                                                @click="setContentAlign(x+1, y+1)"\n                                            ></span>\n                                        </template>\n                                    </template>\n                                </div>\n                            </div>\n\n                            <div class="cc-teaser-configurator__tab-section">\n                                <div class="cc-input cc-input--group">\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-teaser-{{teaserIndex}}-slogan" class="cc-input__label">{{ \'Slogan\' | translate }}:</label>\n                                        <textarea v-model="configuration.slogan | prettify" id="cfg-teaser-{{teaserIndex}}-slogan" class="cc-input__textarea"></textarea>\n                                    </div>\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-teaser-{{teaserIndex}}-description" class="cc-input__label">{{ \'Description\' | translate }}:</label>\n                                        <textarea v-model="configuration.description | prettify" id="cfg-teaser-{{teaserIndex}}-description" class="cc-input__textarea"></textarea>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class="cc-teaser-configurator__tab-section">\n                                <div class="cc-input cc-input--group">\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-teaser-{{teaserIndex}}-cta-label" class="cc-input__label">{{ \'CTA label\' | translate }}:</label>\n                                        <input type="text" v-model="configuration.cta.label" id="cfg-teaser-{{teaserIndex}}-cta-label" class="cc-input__input">\n                                    </div>\n                                    <div class="cc-input cc-input--type-addon cc-teaser-configurator__form-element">\n                                        <label for="cfg-teaser-{{teaserIndex}}-cta-href" class="cc-input__label">{{ \'CTA target link\' | translate }}:</label>\n                                        <input type="text" class="cc-input__input cc-teaser-configurator__cta-target-link" v-model="configuration.cta.href" id="cfg-teaser-{{teaserIndex}}-cta-href">\n                                        <span\n                                            title="{{ \'Open widget selector\' | translate }}"\n                                            class="cc-input__addon cc-teaser-configurator__widget-chooser-trigger"\n                                            @click="openCtaTargetModal(teaserIndex)"\n                                        >\n                                            <svg class="cc-input__addon-icon">\n                                                <use xlink:href="#icon_link"></use>\n                                            </svg>\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                        </template>\n\n                        <template v-if="tab.content && tab.content === \'#style\'">\n                            <div class="cc-teaser-configurator__tab-section cc-teaser-configurator__tab-section--optimizer">\n                                <label class="cc-input__label">{{ \'Contrast Optimizer\' | translate }}</label>\n                                <ul\n                                    class="cc-teaser-configurator__optimizers"\n                                    :class="{\'block-disabled\': parentConfiguration.scenario.contentPlacement.id === \'under\'}"\n                                >\n                                    <li\n                                        v-for="(index, optimizer) in configuration.optimizers.scenarios"\n                                        class="cc-teaser-configurator__optimizer"\n                                        :class="{\'cc-teaser-configurator__optimizer--current\': optimizer.enabled}"\n                                        @click="setOptimizer(optimizer)"\n                                    >\n                                        <div class="cc-teaser-configurator__optimizer-icon-wrapper">\n                                            <svg class="cc-teaser-configurator__optimizer-icon">\n                                                <use xlink:href="{{optimizer.configurator.icon}}"></use>\n                                            </svg>\n                                        </div>\n                                        <label class="cc-teaser-configurator__optimizer-label">\n                                            {{ optimizer.configurator.label | translate }}\n                                        </label>\n                                    </li>\n                                </ul>\n\n                                <div\n                                    v-for="(key, optimizer) in configuration.optimizers.scenarios"\n                                    class="cc-teaser-configurator__optimizer-tools"\n                                    :class="{\'cc-teaser-configurator__optimizer-tools--current\': optimizer.enabled}"\n                                >\n                                    <div\n                                        class="cc-teaser-configurator__optimizer-tool"\n                                        :class="{\'block-disabled\': optimizer.intensity === \'disabled\'}"\n                                    >\n                                        <label class="cc-input__label cc-teaser-configurator__optimizer-tool-label">{{ \'Intensity\' | translate }}</label>\n                                        <div class="cc-input cc-input--range">\n                                            <input\n                                                class="cc-input__range cc-input__range--step-{{ getOptimizerIntensityStep(key) }} cc-teaser-configurator__optimizer-range"\n                                                type="range"\n                                                min="0"\n                                                max="100"\n                                                step="{{ getOptimizerIntensityStep(key) }}"\n                                                v-model="optimizer.intensity"\n                                                disabled="{{optimizer.intensity === \'disabled\'}}"\n                                            >\n                                        </div>\n                                        <span class="cc-teaser-configurator__optimizer-range-value">\n                                            {{optimizer.intensity === \'disabled\' ? 50 : optimizer.intensity}}\n                                        </span>\n                                    </div>\n\n                                    <div\n                                        class="cc-teaser-configurator__optimizer-tool"\n                                        :class="{\'block-disabled\': optimizer.direction === \'disabled\'}"\n                                    >\n                                        <label class="cc-input__label cc-teaser-configurator__optimizer-tool-label">{{ \'Direction\' | translate }}</label>\n                                        <div class="cc-teaser-configurator__position-grid cc-teaser-configurator__position-grid--small">\n                                            <template v-for="y in 3">\n                                                <template v-for="x in 3">\n                                                    <span\n                                                        class="cc-teaser-configurator__position-grid-item"\n                                                        :class="{\n                                                            \'cc-teaser-configurator__position-grid-item--active\': isCurrentOptimizerDirection(key, x+1, y+1),\n                                                            \'cc-teaser-configurator__position-grid-item--disabled\': x+1 == 2 && y+1 == 2\n                                                        }"\n                                                        @click="setOptimizerDirection(key, x+1, y+1)"\n                                                    ></span>\n                                                </template>\n                                            </template>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class="cc-teaser-configurator__tab-section">\n                                <div class="cc-input cc-input--group cc-input cc-teaser-configurator__form-group">\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-teaser-{{teaserIndex}}-color-scheme" class="cc-input__label">{{ \'Text style\' | translate }}:</label>\n                                        <select\n                                            name="cfg-teaser-{{teaserIndex}}-color-scheme"\n                                            class="cc-input__select"\n                                            id="cfg-teaser-{{teaserIndex}}-color-scheme"\n                                            v-model="configuration.optimizers.color_scheme"\n                                        >\n                                            <option v-for="scheme in ccConfig.teaser.color_schemes" value="{{scheme}}">{{ scheme | capitalize | translate}}</option>\n                                        </select>\n                                    </div>\n\n                                    <div class="cc-input cc-teaser-configurator__form-element cc-teaser-configurator__switcher cc-teaser-configurator__switcher--mirror-image">\n                                        <div class="admin__actions-switch" data-role="switcher" :class="{\'block-disabled\': !configuration.image.raw}">\n                                            <label for="cfg-teaser-{{teaserIndex}}-mirror-image" class="cc-input__label">{{ \'Mirror image\' | translate }}: </label>\n                                            <input\n                                                type="checkbox"\n                                                class="admin__actions-switch-checkbox"\n                                                id="cfg-teaser-{{teaserIndex}}-mirror-image"\n                                                v-model="configuration.optimizers.mirror_image"\n                                                :disabled="!configuration.image.raw"\n                                            >\n                                            <label for="cfg-teaser-{{teaserIndex}}-mirror-image" class="admin__actions-switch-label"></label>\n                                            <span class="admin__actions-switch-text">\n                                                {{ mirrorImageTextOutput | translate }}\n                                            </span>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            </div>\n                        </template>\n\n                        <template v-if="tab.content && tab.content === \'#advanced\'">\n                            <div class="cc-teaser-configurator__tab-section cc-teaser-configurator__tab-section--fetch-priority">\n                                <label class="cc-input__label">{{ \'Image\' | translate }}</label>\n                                <div class="cc-input cc-teaser-configurator__form-element cc-teaser-configurator__switcher cc-teaser-configurator__switcher--fetch-priority">\n                                    <div class="admin__actions-switch" data-role="switcher" :class="{\'block-disabled\': !configuration.image.raw}">\n                                        <label for="cfg-teaser-{{teaserIndex}}-fetch-priority" class="cc-input__label">{{ \'High fetch priority\' | translate }}: </label>\n                                        <input\n                                            type="checkbox"\n                                            class="admin__actions-switch-checkbox"\n                                            id="cfg-teaser-{{teaserIndex}}-fetch-priority"\n                                            v-model="configuration.image.fetch_priority"\n                                            :disabled="!configuration.image.raw"\n                                        >\n                                        <label for="cfg-teaser-{{teaserIndex}}-fetch-priority" class="admin__actions-switch-label"></label>\n                                        <span class="admin__actions-switch-text">\n                                            {{ fetchPriorityTextOutput | translate }}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="cc-teaser-configurator__tab-section cc-teaser-configurator__tab-section--alt">\n                                <label class="cc-input__label">{{ \'Alt\' | translate }}</label>\n                                <div class="cc-input cc-input--group">\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <input type="text" v-model="configuration.image_alt" id="cfg-teaser-{{teaserIndex}}-alt" class="cc-input__input">\n                                        <p class="cc-input__hint">{{ \'Value will be passed to alt (if alt field empty - slogan is used, if slogan is empty - description is used, if empty "Teaser image" is used)\' | translate }}</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="cc-teaser-configurator__tab-section">\n                                <label class="cc-input__label">{{ \'CTA\' | translate }}</label>\n                                <div class="cc-input cc-teaser-configurator__form-element cc-teaser-configurator__switcher cc-teaser-configurator__switcher--cta-target">\n                                    <div class="admin__actions-switch" data-role="switcher">\n                                        <label for="cfg-teaser-{{teaserIndex}}-cta-target" class="cc-input__label">{{ \'Open link in new tab\' | translate }}: </label>\n                                        <input\n                                            type="checkbox"\n                                            class="admin__actions-switch-checkbox"\n                                            id="cfg-teaser-{{teaserIndex}}-cta-target"\n                                            v-model="configuration.cta.target"\n                                        >\n                                        <label for="cfg-teaser-{{teaserIndex}}-cta-target" class="admin__actions-switch-label"></label>\n                                        <span class="admin__actions-switch-text">\n                                            {{ ctaTargetTextOutput | translate }}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="cc-teaser-configurator__tab-section cc-teaser-configurator__tab-section--tracking">\n                                <label class="cc-input__label cc-input__label--spacious">{{ \'Promotion tracking\' | translate }}</label>\n                                <div class="cc-input cc-input--group">\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-teaser-{{teaserIndex}}-tracking-id" class="cc-input__label">{{ \'Tracking ID\' | translate }}:</label>\n                                        <input type="text" v-model="configuration.tracking_id" id="cfg-teaser-{{teaserIndex}}-tracking-id" class="cc-input__input">\n                                        <p class="cc-input__hint">{{ \'Value will be passed to slide data attribute\' | translate }}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </template>\n\n                        <template v-if="tab.content && tab.content !== \'#content\' && tab.content !== \'#style\' && tab.content !== \'#advanced\'">\n                            <div class="cc-teaser-configurator__tab-section">\n                                <div class="cc-custom-fields cc-custom-fields--narrow">\n                                    <div class="cc-custom-fields__form-group" v-for="field in tab.content.fields">\n                                        <component\n                                            :is="\'custom-element-\' + field.type"\n                                            :configuration="configuration"\n                                            :field-configuration="field"\n                                            :teaser-index="teaserIndex"\n                                        ></component>\n                                    </div>\n                                </div>\n                            </div>\n                        </template>\n                    </div>\n\n                    <div\n                        class="cc-teaser-configurator__tab-content"\n                        :class="{\'cc-teaser-configurator__tab-content--current\': currentTab == callerComponentType}"\n                    >\n                        <template v-if="currentTab === \'magento-product-grid-teasers\' || currentTab ===  \'products-grid\'">\n                            <div class="cc-teaser-configurator__tab-section">\n                                <div class="cc-input cc-input--group">\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-mpg-teaser-{{ teaserIndex }}-size-select" class="cc-input__label">{{ \'Teaser size\' | translate }}:</label>\n                                        <select name="cfg-mpg-teaser-{{ teaserIndex }}-size-select" class="cc-input__select" id="cfg-mpg-teaser-{{ teaserIndex }}-size-select" v-model="configuration.sizeSelect" @change="setTeaserSize()">\n                                            <option value="1x1">{{ \'1x1\' | translate }}</option>\n                                            <option value="1x2">{{ \'1x2\' | translate }}</option>\n                                            <option value="2x1">{{ \'2x1\' | translate }}</option>\n                                            <option value="2x2">{{ \'2x2\' | translate }}</option>\n                                        </select>\n                                    </div>\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-mpg-teaser-{{ teaserIndex }}-position" class="cc-input__label">{{ \'Position\' | translate}}:</label>\n                                        <select name="cfg-mpg-teaser-{{ teaserIndex }}-position" class="cc-input__select" id="cfg-mpg-teaser-{{ teaserIndex }}-position" v-model="configuration.position">\n                                            <option value="left">{{ \'Left\' | translate }}</option>\n                                            <option value="center">{{ \'Center\' | translate }}</option>\n                                            <option value="right">{{ \'Right\' | translate }}</option>\n                                        </select>\n                                    </div>\n                                </div>\n                                <div class="cc-input cc-input--group">\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-mpg-teaser-{{ teaserIndex }}-row" class="cc-input__label">{{ \'Row\' | translate }}:</label>\n                                        <select name="cfg-mpg-teaser{{ teaserIndex }}-row" class="cc-input__select" id="cfg-mpg-teaser-{{ teaserIndex }}-row" v-model="configuration.row">\n                                            <option v-for="i in rowsCount" value="{{ i + 1 }}">{{ i + 1 }}</option>\n                                        </select>\n                                    </div>\n                                    <div class="cc-input cc-teaser-configurator__form-element">\n                                        <label for="cfg-mpg-teaser-{{ teaserIndex }}-mobile" class="cc-input__label">{{ \'Show in mobiles\' | translate }}:</label>\n                                        <div class="admin__actions-switch-block" data-role="switcher">\n                                            <input type="checkbox" class="admin__actions-switch-checkbox" id="cfg-mpg-teaser-{{ teaserIndex }}-mobile" name="cfg-mpg-teaser-{{ teaserIndex }}-mobile" v-model="configuration.isAvailableForMobile">\n                                            <label class="admin__actions-switch-label" for="cfg-mpg-teaser-{{ teaserIndex }}-mobile"">\n                                                <span class="admin__actions-switch-text" data-text-on="{{ \'Yes\' | translate }}" data-text-off="{{ \'No\' | translate }}"></span>\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="cc-input">\n                                    <p class="cc-teaser-configurator__note">{{ \'Big image teasers (2x1 and 2x2) might not be displayed on mobile phones. Please switch Show in mobiles toggle to No.\' | translate }}</p>\n                                </div>\n                            </div>\n                        </template>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>',props:{parentConfiguration:{type:Object,default:function(){return{items:[]}}},callerComponentType:{type:String,default:""},class:{type:String,default:""},teaserIndex:{type:Number,default:0},uploaderBaseUrl:{type:String,default:""},imageEndpoint:{type:String,default:""},adminPrefix:{type:String,default:"admin"},ccConfig:{type:Object,default:function(){return{}}},configuratorLayout:{type:String,default:"row"},teaserType:{type:String,default:"full"},productsPerPage:{type:String,default:"30"},videoTeaserPlaceholderError:{type:Boolean,default:!1}},computed:{configuration:function(){return"magento-product-grid-teasers"===this.callerComponentType?this.parentConfiguration.teasers[this.teaserIndex]:this.parentConfiguration.items[this.teaserIndex]},imageActionText:function(){return"mobile"===this.currentImageUploader?this.configuration.image.mobile.raw?"Change":"Upload":"tablet"===this.currentImageUploader?this.configuration.image.tablet.raw?"Change":"Upload":this.configuration.image.raw?"Change":"Upload"},mirrorImageTextOutput:function(){return this.configuration.optimizers.mirror_image?"Yes":"No"},fetchPriorityTextOutput:function(){return this.configuration.image.fetch_priority?"Yes":"No"},ctaTargetTextOutput:function(){return this.configuration.cta.target?"Yes":"No"},parentConfigurationVariation:function(){return"magento-product-grid-teasers"===this.callerComponentType?this.parentConfiguration.teasers:this.parentConfiguration.items},rowsCount:function(){return"magento-product-grid-teasers"===this.callerComponentType?this.getCurrentFErowsCount():"products-grid"===this.callerComponentType?parseInt(this.parentConfiguration.rows_desktop,10):null},supportBreakpointDedicatedImages:function(){return"mosaic"===this.callerComponentType&&this.ccConfig.mosaic.support_breakpoint_dedicated_images}},data:function(){return{currentTab:0,currentImageUploader:"desktop",videoInputVisible:!1,videoInputValue:""}},filters:{translate:function(t){return d.default.mage.__(t)},capitalize:function(t){return"".concat(t.charAt(0).toUpperCase()).concat(t.slice(1))},prefixFieldId:function(t){return"cfg-teaser-".concat(this.teaserIndex,"-").concat(t)},prettify:{read:function(t){return t?t.replace(/<br\s*[\/]?>/gi,"\n"):""},write:function(t){return t.replace(/\n/g,"<br>")}}},methods:{switchTab:function(t){this.currentTab=t},setContentAlign:function(t,e){this.configuration.content_align.x=t,this.configuration.content_align.y=e},isCurrentContentAlign:function(t,e){return Number(this.configuration.content_align.x)===t&&Number(this.configuration.content_align.y)===e},setOptimizerDirection:function(t,e,n){this.configuration.optimizers.scenarios[t].direction.x=e,this.configuration.optimizers.scenarios[t].direction.y=n},isCurrentOptimizerDirection:function(t,e,n){return this.configuration.optimizers.scenarios[t].direction.x===e&&this.configuration.optimizers.scenarios[t].direction.y===n},setOptimizer:function(t){for(var e in this.configuration.optimizers.scenarios)this.configuration.optimizers.scenarios[e]&&(this.configuration.optimizers.scenarios[e].enabled=!1);t.enabled=!0},getOptimizerIntensityStep:function(t){return this.ccConfig.teaser.optimizers_intensity_steps[t]?this.ccConfig.teaser.optimizers_intensity_steps[t]:10},setBadgeAlign:function(t,e){this.configuration.badge.align.x=t,this.configuration.badge.align.y=e},isCurrentBadgeAlign:function(t,e){return Number(this.configuration.badge.align.x)===t&&Number(this.configuration.badge.align.y)===e},setTeaserSize:function(){"magento-product-grid-teasers"===this.callerComponentType&&(this.getCurrentFErowsCount(),this.fixOverflowedRowsSetup());var t=this.configuration.sizeSelect.split("x");this.configuration.size.x=t[0],this.configuration.size.y=t[1]},fixOverflowedRowsSetup:function(){for(var t=0;t<this.parentConfiguration.teasers.length;t++)this.parentConfiguration.teasers[t].row>this.rowsCount&&(this.parentConfiguration.teasers[t].row=this.rowsCount)},getCurrentFErowsCount:function(){return Math.floor(this.getVirtualBricksLength()/this.ccConfig.columns[this.ccConfig.columns.default_layout].desktop)},getVirtualBricksLength:function(){for(var t=parseInt(this.productsPerPage,10),e=0;e<this.parentConfiguration.teasers.length;e++)t+=this.parentConfiguration.teasers[e].size.x*this.parentConfiguration.teasers[e].size.y;return t},getMediaUploader:function(t,e){var n;n="video"===e?"".concat(this.uploaderBaseUrl,"target_element_id/teaser-video-").concat(t,"/"):"desktop"===this.currentImageUploader?"".concat(this.uploaderBaseUrl,"target_element_id/teaser-img-").concat(t,"/"):"".concat(this.uploaderBaseUrl,"target_element_id/teaser-img-").concat(this.currentImageUploader,"-").concat(t,"/"),MediabrowserUtility.openDialog(n,"auto","auto",d.default.mage.__("Insert File..."),{closed:!0})},onVideoFileUrlChange:function(t,e){var n=t.target.value.match("___directive/([a-zA-Z0-9]*)")[1],i=Base64?Base64.decode(n):window.atob(n);this.videoInputValue=i,this.setVideoData(e)},onRawImageUrlChange:function(t){var e=this,n=t.target.value,i=n.match("___directive/([a-zA-Z0-9]*)")[1],o=Base64?Base64.decode(i):window.atob(i);"desktop"!==this.currentImageUploader?(this.$set("configuration.image.".concat(this.currentImageUploader,".raw"),n),this.$set("configuration.image.".concat(this.currentImageUploader,".decoded"),o)):(this.$set("configuration.image.raw",n),this.$set("configuration.image.decoded",o));var c=new Image;c.onload=function(){var t=e.getAspectRatio(c.naturalWidth,c.naturalHeight),n=c.getAttribute("src");"desktop"!==e.currentImageUploader?(e.configuration.image[e.currentImageUploader]&&e.configuration.image[e.currentImageUploader].image?e.$set("configuration.image.".concat(e.currentImageUploader,".image"),n):e.$set("configuration.image.".concat(e.currentImageUploader,".raw"),n),e.$set("configuration.image.".concat(e.currentImageUploader,".aspect_ratio"),t)):(e.configuration.image&&e.configuration.image.image?e.$set("configuration.image.image",n):e.$set("configuration.image.raw",n),e.$set("configuration.image.aspect_ratio",t)),e.supportBreakpointDedicatedImages&&["mobile","tablet","desktop"].forEach((function(i){"desktop"===i?""===e.configuration.image.aspect_ratio&&(e.$set("configuration.image.image",n),e.$set("configuration.image.raw",n),e.$set("configuration.image.aspect_ratio",t),e.$set("configuration.image.decoded",o)):""===e.configuration.image[i].aspect_ratio&&(e.$set("configuration.image.".concat(i,".image"),n),e.$set("configuration.image.".concat(i,".raw"),n),e.$set("configuration.image.".concat(i,".aspect_ratio"),t),e.$set("configuration.image.".concat(i,".decoded"),o))})),setTimeout((function(){e.checkImageSizes(),e.onChange()}),400)},c.src=this.imageEndpoint.replace("{/encoded_image}",i)},moveImageTeaserUp:function(t){var e=this;if(t>0){var n=d.default("#cc-image-teaser-item-".concat(t)),i=d.default("#cc-image-teaser-item-".concat(t-1));n.addClass("cc-teaser-configurator--animating").css("transform","translateY(".concat(-Math.abs(i.outerHeight(!0)),"px)")),i.addClass("cc-teaser-configurator--animating").css("transform","translateY(".concat(n.outerHeight(!0),"px )")),setTimeout((function(){e.parentConfigurationVariation.splice(t-1,0,e.parentConfigurationVariation.splice(t,1)[0]),n.removeClass("cc-teaser-configurator--animating").css("transform",""),i.removeClass("cc-teaser-configurator--animating").css("transform",""),e.onChange()}),400)}},moveImageTeaserDown:function(t){var e=this;if(t<this.parentConfigurationVariation.length-1){var n=d.default("#cc-image-teaser-item-".concat(t)),i=d.default("#cc-image-teaser-item-".concat(t+1));n.addClass("cc-teaser-configurator--animating").css("transform","translateY(".concat(i.outerHeight(!0),"px)")),i.addClass("cc-teaser-configurator--animating").css("transform","translateY(".concat(-Math.abs(n.outerHeight(!0)),"px)")),setTimeout((function(){e.parentConfigurationVariation.splice(t+1,0,e.parentConfigurationVariation.splice(t,1)[0]),n.removeClass("cc-teaser-configurator--animating").css("transform",""),i.removeClass("cc-teaser-configurator--animating").css("transform",""),e.onChange()}),400)}},toggleTeaserAndTextItems:function(t){var e=this,n=d.default("#cc-image-teaser-item-0"),i=d.default("#cc-image-teaser-item-1");d.default(".cc-teaser-configurator").toggleClass("cc-teaser-configurator--text-only"),n.addClass("cc-teaser-configurator--animating").css("transform","translateX(".concat(i.outerWidth(!0),"px)")),i.addClass("cc-teaser-configurator--animating").css("transform","translateX(".concat(-Math.abs(n.outerWidth(!0)),"px)")),setTimeout((function(){n.removeClass("cc-teaser-configurator--animating").css("transform",""),i.removeClass("cc-teaser-configurator--animating").css("transform",""),e.parentConfiguration.items.reverse(),e.onChange()}),400)},isFirstImageTeaser:function(t){return 0===t},isLastImageTeaser:function(t){return t===this.parentConfiguration.items.length-1},openCtaTargetModal:function(t){widgetTools.openDialog("".concat(window.location.origin,"/").concat(this.adminPrefix,"/admin/widget/index/filter_widgets/Link/widget_target_id/cfg-teaser-").concat(t,"-cta-href/")),this.wWidgetListener(t)},wWidgetListener:function(t){var e=this;if("undefined"!=typeof wWidget&&""!==widgetTools.dialogWindow[0].innerHTML){var n=widgetTools.dialogWindow[0].querySelector("#insert_button");n.onclick=null,n.addEventListener("click",(function(){e.configuration.cta.href="",wWidget.insertWidget()}))}else window.setTimeout((function(){e.wWidgetListener(t)}),300)},deleteTeaserItem:function(t){var e=this;"mosaic"===this.callerComponentType?this.$dispatch("teaser__deleteItem",t):h.default({content:d.default.mage.__("Are you sure you want to delete this item?"),actions:{confirm:function(){"magento-product-grid-teasers"===e.callerComponentType?(e.parentConfiguration.teasers.splice(t,1),e.getCurrentFErowsCount(),e.fixOverflowedRowsSetup()):e.parentConfiguration.items.splice(t,1)}}})},checkImageSizes:function(){if(!d.default(".modal-popup.confirm._show").length&&"mosaic"!==this.callerComponentType){for(var t=JSON.parse(JSON.stringify(this.parentConfigurationVariation)).filter((function(t){return Boolean(t.image.aspect_ratio)})),e=0;e<t.length;e++)if(t[e].image.aspect_ratio!==t[0].image.aspect_ratio)return m.default({title:d.default.mage.__("Warning"),content:d.default.mage.__("Images you have uploaded have different aspect ratio. This may cause this component to display wrong. We recommend to keep the same aspect ratio for all uploaded images.")}),!1;for(e=0;e<t.length;e++)if(t[e].image.aspect_ratio!==t[0].image.aspect_ratio)return m.default({title:d.default.mage.__("Warning"),content:d.default.mage.__("Images you have uploaded have different aspect ratio. This may cause this component to display wrong. We recommend to keep the same aspect ratio for all uploaded images.")}),!1;return!0}},getGreatestCommonDivisor:function(t,e){return e?this.getGreatestCommonDivisor(e,t%e):t},getAspectRatio:function(t,e){var n=this.getGreatestCommonDivisor(t,e);return"".concat(t/n,":").concat(e/n)},handleJqEvents:function(){var t=this;d.default('.cc-teaser-configurator__image-url[data-teaser-index="'.concat(this.teaserIndex,'"]')).off("change").on("change",this.onRawImageUrlChange),d.default('.cc-teaser-configurator__video-url[data-teaser-index="'.concat(this.teaserIndex,'"]')).off("change").on("change",(function(e){t.onVideoFileUrlChange(e,t.teaserIndex)}))},switchUploaderBreakpoint:function(t){this.currentImageUploader=t},toggleVideoConfig:function(t){this.videoInputVisible=!this.videoInputVisible,this.videoInputVisible&&document.getElementById("cfg-teaser-".concat(t,"-video-link")).focus()},setVideoData:function(t){if(this.videoInputValue.length){var e=function(t){switch(!0){case et.test(t):return"youtube";case it.test(t)||ot.test(t):return"facebook";case nt.test(t):return"vimeo";case ct.test(t):return"file";default:return null}}(this.videoInputValue);e?(this.configuration.video={url:this.videoInputValue,type:e},this.toggleVideoConfig(t)):m.default({title:d.default.mage.__("Warning"),content:"\n                            ".concat(d.default.mage.__("Please make sure that provided URL is correct")," \n\n                        ")})}else this.configuration.video&&this.configuration.video.url.length?(this.clearVideoData(),this.toggleVideoConfig(t)):this.toggleVideoConfig(t)},clearVideoData:function(){this.configuration.video={url:"",type:""}}},ready:function(){var t=this;if(this.handleJqEvents(),"products-grid"===this.callerComponentType&&!this.configuration.image.aspect_ratio){var e=new Image;e.src=this.configuration.image.raw,e.onload=function(){t.configuration.image.aspect_ratio=t.getAspectRatio(e.width,e.height)}}"magento-product-grid-teasers"===this.callerComponentType&&this.fixOverflowedRowsSetup(),this.configuration.teaserType||(this.configuration.teaserType=this.teaserType),d.default("#cc-image-teaser-item-".concat(this.teaserIndex," .cc-teaser-configurator")).toggleClass("cc-teaser-configurator--text-only","text-only"===this.configuration.teaserType),this.configuration.video&&(this.videoInputValue=this.configuration.video.url)}},rt={mixins:[tt],components:{"action-button":y,"component-adder":x,"component-actions":w,"teaser-configurator":st},template:'<div class="cc-image-teaser-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Teaser Width</h3>\n            <p class="cc-image-teaser-configurator__section-error" v-if="configuration.scenario.teaserWidth.error">{{configuration.scenario.teaserWidth.error}}</p>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.teaserWidth.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.teaserWidth"\n                    @click="!option.disabled && toggleOption(\'teaserWidth\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n\n        </section>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Desktop and Tablet Layout</h3>\n            <p class="cc-image-teaser-configurator__section-error" v-if="configuration.scenario.desktopLayout.error">{{configuration.scenario.desktopLayout.error}}</p>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.desktopLayout.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.desktopLayout"\n                    @click="!option.disabled && toggleOption(\'desktopLayout\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Mobile Layout</h3>\n            <p class="cc-image-teaser-configurator__section-error" v-if="configuration.scenario.mobileLayout.error">{{configuration.scenario.mobileLayout.error}}</p>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.mobileLayout.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.mobileLayout"\n                    @click="!option.disabled && toggleOption(\'mobileLayout\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Text Positioning</h3>\n            <p class="cc-image-teaser-configurator__section-error" v-if="configuration.scenario.contentPlacement.error">{{configuration.scenario.contentPlacement.error}}</p>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.contentPlacement.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.contentPlacement"\n                    @click="!option.disabled && toggleOption(\'contentPlacement\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-configurator__section cc-image-teaser-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.image_teaser != null && ccConfig.image_teaser.custom_sections != null" v-for="section in ccConfig.image_teaser.custom_sections">\n            <h3 class="cc-image-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                        :teaser-index="9999"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-configurator__section">\n            <component-adder class="cc-component-adder cc-component-adder--static" v-show="!configuration.items.length">\n                <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-image-teaser-configurator__item-action-button" @click="createTeaserItem( 0 )">\n                    <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                        <use v-bind="{ \'xlink:href\': \'#icon_plus\' }"></use>\n                    </svg>\n                </button>\n            </component-adder>\n\n            <template v-for="item in configuration.items">\n                <div class="cc-image-teaser-configurator__item" id="cc-image-teaser-item-{{ $index }}">\n                    <component-adder class="cc-component-adder cc-component-adder--first">\n                        <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-image-teaser-configurator__item-action-button" @click="createTeaserItem( $index )">\n                            <svg class="cc-action-button__icon cc-action-button__icon--size_300">\n                                <use xlink:href="#icon_plus"></use>\n                            </svg>\n                        </button>\n                    </component-adder>\n\n                    <teaser-configurator\n                        :class="cc-teaser-configurator--image-teaser"\n                        :teaser-index="$index"\n                        :configuration="items[$index]"\n                        :parent-configuration="configuration"\n                        :uploader-base-url="uploaderBaseUrl"\n                        :image-endpoint="imageEndpoint"\n                        :admin-prefix="adminPrefix"\n                        :cc-config="ccConfig"\n                        :caller-component-type="callerComponentType"\n                        :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf($index) != -1"\n                    ></teaser-configurator>\n\n                    <component-adder class="cc-component-adder cc-component-adder--last" v-if="configuration.items.length">\n                        <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-image-teaser-configurator__item-action-button" @click="createTeaserItem( $index + 1 )">\n                            <svg class="cc-action-button__icon cc-action-button__icon--size_300">\n                                <use xlink:href="#icon_plus"></use>\n                            </svg>\n                        </button>\n                    </component-adder>\n                </div>\n            </template>\n        </section>\n    </div>',data:function(){return{invalidVideoPlaceholderTeaserIndexes:[],scenarioOptions:{teaserWidth:{container:{name:"Content width",iconId:"tw_content-width",disabled:!1},window:{name:"Browser width",iconId:"tw_window-width",disabled:!1},"container-slider":{name:"Content width Slider",iconId:"tw_content-slider",disabled:!1},"window-slider":{name:"Browser width Slider",iconId:"tw_window-slider",disabled:!1}},desktopLayout:{1:{name:"1 in row",iconId:"dl_1",disabled:!1,teasersNum:1},2:{name:"2 in row",iconId:"dl_2",disabled:!1,teasersNum:2},3:{name:"3 in row",iconId:"dl_3",disabled:!1,teasersNum:3},4:{name:"4 in row",iconId:"dl_4",disabled:!1,teasersNum:4}},contentPlacement:{over:{name:"Text over image",iconId:"tl_over",disabled:!1,contentPlacement:!0},under:{name:"Text below image",iconId:"tl_under",disabled:!1,contentPlacement:!1}},mobileLayout:{"mobile-in-columns":{name:"Teasers in column",iconId:"ml_col",disabled:!1},"mobile-slider":{name:"Slider",iconId:"ml_slider",disabled:!1},"mobile-in-row":{name:"Teasers in row",iconId:"ml_2-2",disabled:!1}}},availableScenarios:[["container","1","over",["mobile-in-columns"]],["container","2","over",["mobile-in-columns","mobile-in-row","mobile-slider"]],["container","2","under",["mobile-in-columns","mobile-in-row","mobile-slider"]],["container","3","over",["mobile-in-columns","mobile-slider"]],["container","3","under",["mobile-in-columns","mobile-slider"]],["container","4","over",["mobile-slider"]],["container","4","under",["mobile-in-columns"]],["window","1","over",["mobile-in-columns"]],["window","2","over",["mobile-in-columns","mobile-in-row","mobile-slider"]],["window","2","under",["mobile-in-columns"]],["window","3","over",["mobile-in-columns","mobile-slider"]],["window","3","under",["mobile-in-columns"]],["window","4","over",["mobile-slider"]],["window","4","under",["mobile-in-columns"]],["window-slider","2","over",["mobile-slider"]],["window-slider","2","under",["mobile-slider"]],["window-slider","3","over",["mobile-slider"]],["window-slider","3","under",["mobile-slider"]],["window-slider","4","over",["mobile-slider"]],["window-slider","4","under",["mobile-slider"]],["container-slider","1","over",["mobile-slider"]],["container-slider","1","under",["mobile-slider"]],["container-slider","2","over",["mobile-slider"]],["container-slider","2","under",["mobile-slider"]],["container-slider","3","over",["mobile-slider"]],["container-slider","3","under",["mobile-slider"]],["container-slider","4","over",["mobile-slider"]],["container-slider","4","under",["mobile-slider"]]]}},props:{configuration:{type:Object,default:function(){return{customCssClass:"",items:[JSON.parse(JSON.stringify(at))],ignoredItems:[],scenario:{teaserWidth:{},desktopLayout:{},contentPlacement:{},mobileLayout:{}}}}},uploaderBaseUrl:{type:String,default:""},imageEndpoint:{type:String,default:""},adminPrefix:{type:String,default:"admin"},callerComponentType:{type:String,default:"image-teaser"},xmlConfigEntry:{type:String,default:"image_teaser"}},computed:{imageTeasersContentPositions:function(){var t=this.ccConfig.image_teasers_content_positions;return Object.keys(t).map((function(e){return t[e]}))}},events:{"component-configurator__save":function(){this.configuration.isError=!1,this._validateOptionsSet(),this._validateVideoPlaceholders(),this._collectTeasersCssClasses(),this.onSave()}},filters:{prettify:{read:function(t,e){return JSON.stringify(t,null,2)},write:function(t,e,n){var i;try{i=JSON.parse(t)}catch(t){t.hasOwnProperty("message")&&m.default("Error in teaser ".concat(n,": ").concat(t.message))}return i||t}},translate:function(t){return d.default.mage.__(t)}},methods:{_collectPossibleOptions:function(t){var e={teaserWidth:{},desktopLayout:{},contentPlacement:{},mobileLayout:{}};return t.forEach((function(t){e.teaserWidth[t[0]]=!0,e.desktopLayout[t[1]]=!0,e.contentPlacement[t[2]]=!0,t[3].forEach((function(t){e.mobileLayout[t]=!0}))})),Object.keys(e).forEach((function(t){e[t]=Object.keys(e[t])})),e},_findPossibleOptions:function(t,e,n,i){var o=JSON.parse(JSON.stringify(this.availableScenarios));return t&&(o=o.filter((function(e){return e[0]===t}))),e&&(o=o.filter((function(t){return t[1]===e}))),n&&(o=o.filter((function(t){return!n||t[2]===n}))),i&&(o=(o=o.filter((function(t){return-1!==t[3].indexOf(i)}))).map((function(t){return t[3]=[i],t}))),this._collectPossibleOptions(o)},toggleOption:function(t,e){this.configuration.scenario[t].id?this.configuration.scenario[t]={}:(this.configuration.scenario[t]=this.scenarioOptions[t][e],this.configuration.scenario[t].id=e),this.$delete("configuration.scenario.".concat(t),"error"),this.togglePossibleOptions()},togglePossibleOptions:function(){var t=this,e=this.configuration.scenario,n=this._findPossibleOptions(e.teaserWidth.id,e.desktopLayout.id,e.contentPlacement.id,e.mobileLayout.id);Object.keys(this.scenarioOptions).forEach((function(e){Object.keys(t.scenarioOptions[e]).forEach((function(i){t.scenarioOptions[e][i].disabled=-1===n[e].indexOf(i)}))}))},createTeaserItem:function(t){this.configuration.items.splice(t,0,JSON.parse(JSON.stringify(at))),this.onChange()},cleanupConfiguration:function(){this.configuration.items=this.configuration.items.filter((function(t){return""!==t.image.raw})),this.configuration.ignoredItems=this.configuration.ignoredItems.filter((function(t){return""!==t.image.raw})),this.onChange()},_collectTeasersCssClasses:function(){if(null!=this.configuration.items){var t=this._getCustomCssFields(this.ccConfig.teaser.tabs);this.configuration.items.forEach((function(e,n){var i=[];t.forEach((function(t){e[t]&&"string"==typeof e[t]&&i.push(e[t])})),e.cc_css_classes=i.join(" ")}))}},updateConfigurationProp:function(){var t=this.$options.props.configuration.default();this.configuration=d.default.extend({},t,this.configuration,!0)},_validateOptionsSet:function(){for(var t=0,e=Object.keys(this.configuration.scenario);t<e.length;t++){var n=e[t];"numberOfSlides"!==n&&(this.$delete("configuration.scenario.".concat(n),"error"),this.configuration.scenario[n].id&&""!==this.configuration.scenario[n].id||(this.$set("configuration.scenario.".concat(n,".error"),"Please choose one of available options"),this.configuration.isError=!0))}},_validateVideoPlaceholders:function(){var t,e=this;this.invalidVideoPlaceholderTeaserIndexes=[],(null===(t=this.configuration.items)||void 0===t?void 0:t.length)&&this.configuration.items.forEach((function(t,n){t.video&&t.video.url.length&&!t.image.raw&&(e.invalidVideoPlaceholderTeaserIndexes.push(n),e.configuration.isError=!0)}))}},ready:function(){this.togglePossibleOptions(),this.updateConfigurationProp()}},lt={extends:rt,template:'<div class="cc-image-teaser-configurator cc-image-teaser-configurator--extended-mosaic {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Teaser Width</h3>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.teaserWidth.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.teaserWidth"\n                    @click="!option.disabled && toggleOption(\'teaserWidth\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Proportions</h3>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.proportions.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.proportions"\n                    @click="!option.disabled && toggleOption(\'proportions\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-configurator__section" v-if="ccConfig.image_teaser != null && ccConfig.image_teaser.custom_sections != null" v-for="section in ccConfig.image_teaser.custom_sections">\n            <div v-if="section.label != \'Version\'">\n                <h3 class="cc-image-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n                <div class="cc-custom-fields">\n                    <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                        <component\n                            :is="\'custom-element-\' + field.type"\n                            :configuration="configuration"\n                            :field-configuration="field"\n                            :teaser-index="9999"\n                        ></component>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="0" :configuration="items[0]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'mosaic\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(0) != -1" :support_breakpoint_dedicated_images="true"></teaser-configurator>\n        \n        <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="1" :configuration="items[1]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'mosaic\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(1) != -1" :support_breakpoint_dedicated_images="true"></teaser-configurator>\n\n        <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="2" :configuration="items[2]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'mosaic\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(2) != -1" :support_breakpoint_dedicated_images="true"></teaser-configurator>\n\n        <div :class="{\'visually-hidden\': configuration.scenario.proportions.id == \'7\' || configuration.scenario.proportions.id == \'8\'}">\n            <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="3" :configuration="items[3]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'mosaic\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(3) != -1" :support_breakpoint_dedicated_images="true"></teaser-configurator>\n        </div>\n\n        <div :class="{\'visually-hidden\': configuration.scenario.proportions.id != \'5\' && configuration.scenario.proportions.id != \'6\'}">\n            <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="4" :configuration="items[4]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'mosaic\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(4) != -1" :support_breakpoint_dedicated_images="true"></teaser-configurator>\n        </div>\n\n    </div>',props:{configuration:{type:Object,default:function(){return{customCssClass:"",items:[JSON.parse(JSON.stringify(at)),JSON.parse(JSON.stringify(at)),JSON.parse(JSON.stringify(at)),JSON.parse(JSON.stringify(at)),JSON.parse(JSON.stringify(at))],ignoredItems:[],scenario:{teaserWidth:{id:"container"},proportions:{id:"1"},contentPlacement:{id:"over"},desktopLayout:{id:"4"},mobileLayout:{id:"mobile-in-columns"}}}}}},ready:function(){this.scenarioOptions={teaserWidth:{container:{name:"Content width",iconId:"tw_content-width",disabled:!1},window:{name:"Browser width",iconId:"tw_window-width",disabled:!1}},proportions:{1:{name:"",iconId:"scene_1",disabled:!1},2:{name:"",iconId:"scene_2",disabled:!1},3:{name:"",iconId:"scene_3",disabled:!1},4:{name:"",iconId:"scene_4",disabled:!1},5:{name:"",iconId:"scene_5",disabled:!1},6:{name:"",iconId:"scene_6",disabled:!1},7:{name:"",iconId:"scene_7",disabled:!1},8:{name:"",iconId:"scene_8",disabled:!1},9:{name:"",iconId:"scene_9",disabled:!1},10:{name:"",iconId:"scene_10",disabled:!1}}},this.togglePossibleOptions=function(){return!0}},events:{teaser__deleteItem:function(t){this.deleteTeaserItem(t)}},methods:{deleteTeaserItem:function(t){var e=this;h.default({content:d.default.mage.__("Are you sure you want to delete this item?"),actions:{confirm:function(){e.$set("configuration.items[".concat(t,"]"),JSON.parse(JSON.stringify(at)))}}})}}},dt={mixins:[E],template:'<div data-role="spinner" class="cc-component-placeholder__loading" v-show="isLoading">\n        <div class="spinner">\n            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>\n        </div>\n    </div>\n    <div class="cc-image-teaser-preview cc-image-teaser-preview--extended-mosaic" v-show="!isLoading">\n        <div class="cc-image-teaser-preview__wrapper">\n            <ul class="cc-image-teaser-preview__scene cc-image-teaser-preview__scene-{{configuration.scenario.proportions.id}}" v-el:scene>\n                <template v-for="item in configuration.items">\n                    <li class="cc-image-teaser-preview__item">\n                        <teaser-preview :configuration="configuration.items[$index]" :parent-configuration="configuration"></teaser-preview>\n                    </li>\n                </template>\n            </ul>\n        </div>\n    </div>'},ut={mixins:[tt],template:'<div class="cc-background-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        \n        <section class="cc-background-configurator__section" v-if="ccConfig.background != null && ccConfig.background.custom_sections != null" v-for="section in ccConfig.background.custom_sections">\n            <h3 class="cc-background-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-background-type" class="cc-input__label">'.concat(g.default("Choose start of end of background"),':</label>\n            <select name="cfg-background-type" class="cc-input__select" id="cfg-background-type" v-model="configuration.bgType" @change="onChange">\n                <option value="start" :selected="\'start\' === configuration.bgType">Start</option>\n                <option value="end" :selected="\'end\' === configuration.bgType">End</option>\n            </select>\n        </div>\n        <div :class="configuration.bgType == \'start\' ? \'\' : \'visually-hidden\'">\n            <div class="cc-input cc-input--type-inline">\n                <label for="cfg-color" class="cc-input__label">').concat(g.default("Color"),':</label>\n                <input type="color" v-model="configuration.color" id="cfg-color" class="cc-input__color" @change="onChange">\n            </div>\n        </div>\n    </div>'),props:{configuration:{type:Object,default:function(){return{customCssClass:"",bgType:"",color:""}}},xmlConfigEntry:{type:String,default:"background"}},events:{"component-configurator__save":function(){this.onSave()}},data:function(){return{isAvdancedSettingsOpen:!1}},methods:{},ready:function(){}},pt={template:'<div class="cc-background-preview" style="background: {{ configuration.color }};">\n        <h1 class="cc-background-preview__type">'.concat(g.default("Background type: "),"{{ configuration.bgType }}</h1>\n    </div>"),props:{configuration:{type:Object},class:{type:[String,Object,Array],default:""}}},gt={"extended-mosaic-configurator":lt,"background-configurator":ut,"image-teaser-configurator":{extends:rt,ready:function(){this.togglePossibleOptions=function(){var t=this;Object.keys(this.scenarioOptions).forEach((function(e){Object.keys(t.scenarioOptions[e]).forEach((function(n){t.scenarioOptions[e][n].disabled=!1}))}))},this.togglePossibleOptions()}}},ft={template:'<div class="cc-layout-builder | {{ class }}">\n        <div class="cc-layout-builder__filters" v-if="filters">\n            <template v-for="(filterKey, filter) in filters">\n                <div class="cc-layout-builder__filter">\n                    <div class="cc-layout-builder__filter-content">\n                        <svg class="cc-layout-builder__filter-icon">\n                            <use xlink:href="{{ filter.icon }}"></use>\n                        </svg>\n                        <span class="cc-layout-builder__filter-title">\n                            {{ getTranslatedText( filter.title ) }}:\n                        </span>\n                        <template v-for="(optionKey, option) in filter.options">\n                            <div class="cc-layout-builder__filter-control">\n                                <label :class="[ option.value ? \'cc-input__checkbox-label cc-input__checkbox-label--checked\' : \'cc-input__checkbox-label\' ]">\n                                    <input type="checkbox" v-model="option.value" class="cc-input__checkbox" @change="saveFiltersState()">\n                                    {{ getTranslatedText( option.label ) }}\n                                </label>\n                            </div>\n                        </template>\n                    </div>\n                </div>\n            </template>\n        </div>\n\n        <div class="cc-layout-builder__component cc-layout-builder__component--static">\n            <div class="cc-layout-builder__component-wrapper">\n                <div class="cc-component-placeholder__component cc-component-placeholder__component--decorated cc-component-placeholder__component--header">\n                    <svg class="cc-component-placeholder__component-icon">\n                        <use xlink:href="#icon_component-cc-header"></use>\n                    </svg>\n                </div>\n            </div>\n\n            <component-adder class="cc-component-adder cc-component-adder--last">\n                <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button" @click="createNewComponent( 0 )">\n                    <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                        <use xlink:href="#icon_plus"></use>\n                    </svg>\n                </button>\n            </component-adder>\n        </div>\n\n        <template v-for="component in components">\n            <div v-bind:class="{ \'cc-layout-builder__component\': true, \'cc-layout-builder__component--special\': getIsSpecialComponent( component.type ), \'cc-layout-builder__component--invisible\': getIsComponentHiddenFE( component.data ), \'cc-layout-builder__component--filtered-out\': !getIsComponentVisibleDashboard( component.data ) }" id="{{ component.id }}">\n                <component-adder class="cc-component-adder cc-component-adder--first">\n                    <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button" @click="createNewComponent( $index )">\n                        <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                            <use xlink:href="#icon_plus"></use>\n                        </svg>\n                    </button>\n                </component-adder>\n\n                <div class="cc-layout-builder__component-actions">\n                    <component-actions>\n                        <template slot="cc-component-actions__buttons">\n                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--up" @click="moveComponentUp( $index )" :class="[ isFirstComponent( $index ) ? \'cc-action-button--look_disabled\' : \'\' ]" :disabled="isFirstComponent( $index )">\n                                <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                    <use xlink:href="#icon_arrow-up"></use>\n                                </svg>\n                            </button>\n                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--down" @click="moveComponentDown( $index )" :class="[ isLastComponent( $index ) ? \'cc-action-button--look_disabled\' : \'\' ]" :disabled="isLastComponent( $index )">\n                                <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                    <use xlink:href="#icon_arrow-down"></use>\n                                </svg>\n                            </button>\n                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--settings" :class="[ isPossibleToEdit( component.type ) ? \'\' : \'cc-action-button--look_disabled\' ]" :disabled="!isPossibleToEdit( component.type )" @click="editComponentSettings( $index )" title="{{ getTranslatedText(\'Edit component\') }}">\n                                <svg class="cc-action-button__icon">\n                                    <use xlink:href="#icon_edit"></use>\n                                </svg>\n                            </button>\n                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--duplicate" :class="[ isPossibleToDuplicate( component ) ? \'\' : \'cc-action-button--look_disabled\' ]" :disabled="!isPossibleToDuplicate( component )" @click="duplicateComponent( $index )" title="{{ getTranslatedText(\'Duplicate component\') }}">\n                                <svg class="cc-action-button__icon">\n                                    <use xlink:href="#icon_duplicate"></use>\n                                </svg>\n                            </button>\n                            <div class="cc-component-display-controller" v-if="isPossibleToControlDisplay( component.type )">\n                                <svg class="cc-component-display-controller__icon">\n                                    <use xlink:href="#icon_eye"></use>\n                                </svg>\n                                <div class="cc-component-display-controller__control" :class="[ isMobileVisibilityToggleable(component.type) ? \'\' : \'cc-component-display-controller__control--disabled\' ]">\n                                    <label class="cc-input__checkbox-label" :class="{\n                                        \'cc-input__checkbox-label--checked\': component.data.componentVisibility.mobile,\n                                        \'cc-input__checkbox-label--disabled\': !isMobileVisibilityToggleable(component.type)\n                                    }">\n                                        <input type="checkbox" v-model="component.data.componentVisibility.mobile" class="cc-input__checkbox" @change="updateLayout()" :disabled="!isMobileVisibilityToggleable(component.type)">\n                                        {{ getTranslatedText(\'Mobile\') }}\n                                    </label>\n                                </div>\n                                <div class="cc-component-display-controller__control">\n                                    <label :class="[ component.data.componentVisibility.desktop ? \'cc-input__checkbox-label cc-input__checkbox-label--checked\' : \'cc-input__checkbox-label\' ]">\n                                        <input type="checkbox" v-model="component.data.componentVisibility.desktop" class="cc-input__checkbox" @change="updateLayout()">\n                                        {{ getTranslatedText(\'Tablet and Desktop\') }}\n                                    </label>\n                                </div>\n                            </div>\n                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--delete" :class="[ isPossibleToDelete( component.type ) ? \'\' : \'cc-action-button--look_disabled\' ]" :disabled="!isPossibleToDelete( component.type )" @click="deleteComponent( $index )">\n                                <svg class="cc-action-button__icon">\n                                    <use xlink:href="#icon_trash-can"></use>\n                                </svg>\n                            </button>\n                        </template>\n                    </component-actions>\n                </div>\n                <div class="cc-layout-builder__component-wrapper">\n                    <component-placeholder>\n                        <h3 class="cc-component-placeholder__headline" v-text="transformComponentTypeToText( component.name || component.type )"></h3>\n                        <div class="cc-component-placeholder__component">\n                            <component :is="component.type + \'-preview\'" :configuration="component.data" :index="$index" :assets-src="assetsSrc" :image-endpoint="imageEndpoint"></component>\n                        </div>\n                    </component-placeholder>\n                </div>\n\n                <component-adder class="cc-component-adder cc-component-adder--last">\n                    <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button" @click="createNewComponent( $index + 1 )">\n                        <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                            <use xlink:href="#icon_plus"></use>\n                        </svg>\n                    </button>\n                </component-adder>\n            </div>\n        </template>\n\n        <div class="cc-layout-builder__component cc-layout-builder__component--static">\n            <component-adder class="cc-component-adder cc-component-adder--first">\n                <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button" @click="createNewComponent( components.length + 1 )">\n                    <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                        <use xlink:href="#icon_plus"></use>\n                    </svg>\n                </button>\n            </component-adder>\n\n            <div class="cc-layout-builder__component-wrapper">\n                <div class="cc-component-placeholder__component cc-component-placeholder__component--decorated cc-component-placeholder__component--footer">\n                    <svg class="cc-component-placeholder__component-icon">\n                        <use xlink:href="#icon_component-cc-footer"></use>\n                    </svg>\n                </div>\n            </div>\n        </div>\n    </div>',components:v({"action-button":y,"component-adder":x,"component-actions":w,"component-display-controller":{template:'<div class="cc-component-display-controller {{ class }}">\n        <div class="cc-component-display-controller__content">\n            <slot></slot>\n        </div>\n    </div>'},"component-placeholder":{template:'<div class="cc-component-placeholder">\n        <div class="cc-component-placeholder__content">\n            <slot></slot>\n        </div>\n    </div>'},"brand-carousel-preview":C,"button-preview":k,"category-links-preview":I,"cms-teaser-preview":S,"custom-html-preview":O,"daily-deal-teaser-preview":T,"headline-preview":P,"hero-carousel-preview":L,"image-teaser-preview":D,"image-teaser-2-preview":E,"magento-product-grid-teasers-preview":z,"paragraph-preview":j,"product-carousel-preview":M,"product-finder-preview":U,"product-grid-preview":V,"separator-preview":A,"static-cms-block-preview":W,"icon-preview":N,"teaser-and-text-preview":B,"instagram-feed-preview":{template:'<ul class="cc-instagram-feed-preview">\n        <template v-for="item in 4">\n            <li class="cc-instagram-feed-preview__tile">\n                <div class="cc-instagram-feed-preview__tile-inner">\n                    <svg class="cc-instagram-feed-preview__icon">\n                        <use xlink:href="#icon_instagram"></use>\n                    </svg>\n                </div>\n            </li>\n        </template>\n    </ul'},"mosaic-preview":F,"accordion-preview":J,"product-teaser-preview":R},{"extended-mosaic-preview":dt,"background-preview":pt}),props:{class:{type:[String,Object,Array],default:""},assetsSrc:{type:String,default:""},ccConfig:{type:Object,default:function(){return{}}},imageEndpoint:{type:String,default:""},componentsConfiguration:{type:String,default:""},editComponent:{type:Function,default:function(t){return t}},addComponent:{type:Function,default:function(){}},pageType:{type:String,default:"cms_page_form.cms_page_form"}},data:function(){return{components:[],filters:{}}},computed:{ccSections:function(){var t=this.ccConfig.sections[this.pageType];return Object.keys(t).map((function(e){return t[e]}))},specialComponents:function(){var t=this.ccConfig.special_components;return Object.keys(t).map((function(e){return t[e]}))}},ready:function(){this.components=this.componentsConfiguration?JSON.parse(this.componentsConfiguration):[],this.filters=void 0!==typeof Storage&&window.localStorage.getItem("ccFilters")?JSON.parse(window.localStorage.getItem("ccFilters")):this.ccConfig.filters,this.sortComponentsBySections(),this.setupInitialDisplayProps(),this.updateLayout()},methods:{getComponentInformation:function(){return JSON.parse(JSON.stringify(this.components))},saveFiltersState:function(){void 0!==typeof Storage&&this.filters&&window.localStorage.setItem("ccFilters",JSON.stringify(this.filters))},updateLayout:function(){this.$dispatch("layout-builder__update")},addComponentInformation:function(t,e){e&&(e.data.hasOwnProperty("componentVisibility")||this.getIsSpecialComponent(e.type)||(e.data.componentVisibility={mobile:this.isMobileVisibilityToggleable(e.type),desktop:!0}),this.components.splice(t,0,e),this.setComponentsPlacementInfo(),this.updateLayout())},setComponentInformation:function(t,e){e&&(this.components.$set(t,e),this.setComponentsPlacementInfo(),this.updateLayout())},createNewComponent:function(t){var e=this,n=this.addComponent((function(n){e.addComponentInformation(t,n)}));this.addComponentInformation(t,n)},editComponentSettings:function(t){var e=this,n=JSON.parse(JSON.stringify(this.components[t]));n=this.editComponent(n,(function(n){e.setComponentInformation(t,n)})),this.setComponentInformation(t,n)},moveComponentUp:function(t){var e=this;if(t>0){var n=this.components[t-1],i=d.default("#".concat(this.components[t].id)),o=d.default("#".concat(this.components[t-1].id));i.addClass("cc-layout-builder__component--animating").css("transform","translateY(".concat(-Math.abs(o.outerHeight(!0)),"px)")),o.addClass("cc-layout-builder__component--animating").css("transform","translateY(".concat(i.outerHeight(!0),"px)")),setTimeout((function(){e.components.$set(t-1,e.components[t]),e.components.$set(t,n),e.setComponentsPlacementInfo(),e.updateLayout(),i.removeClass("cc-layout-builder__component--animating").css("transform",""),o.removeClass("cc-layout-builder__component--animating").css("transform","")}),400)}},moveComponentDown:function(t){var e=this;if(t<this.components.length-1){var n=this.components[t+1],i=d.default("#".concat(this.components[t].id)),o=d.default("#".concat(this.components[t+1].id));i.addClass("cc-layout-builder__component--animating").css("transform","translateY(".concat(o.outerHeight(!0),"px)")),o.addClass("cc-layout-builder__component--animating").css("transform","translateY(".concat(-Math.abs(i.outerHeight(!0)),"px)")),setTimeout((function(){e.components.$set(t+1,e.components[t]),e.components.$set(t,n),e.setComponentsPlacementInfo(),e.updateLayout(),i.removeClass("cc-layout-builder__component--animating").css("transform",""),o.removeClass("cc-layout-builder__component--animating").css("transform","")}),400)}},generateNewComponentId:function(t){var e=t;return e.split("_").length-1&&(e=e.substring(0,e.indexOf("_"))),"".concat(e,"_duplicate").concat(Math.floor(99998*Math.random()+2))},duplicateComponent:function(t){var e=this,n=JSON.parse(JSON.stringify(this.components[t]));n.id=this.generateNewComponentId(n.id),this.addComponentInformation(t+1,n),this.$nextTick((function(){var i=d.default("#".concat(e.components[t].id)),o=d.default("#".concat(n.id));o.addClass("cc-layout-builder__component--duplicate cc-layout-builder__component--show-up"),setTimeout((function(){o.removeClass("cc-layout-builder__component--show-up"),d.default("html, body").animate({scrollTop:i.offset().top+i.outerHeight(!0)-150},350,"swing")}),10),setTimeout((function(){o.removeClass("cc-layout-builder__component--duplicate")}),800)}))},setComponentsPlacementInfo:function(){if(this.ccSections.length>1)for(var t=0,e=0;e<this.components.length;e++)-1!==this.specialComponents.indexOf(this.components[e].type)?(t++,this.components[e].section=this.ccSections[t],t++):this.components[e].section=this.ccSections[t]},sortComponentsBySections:function(){var t=this;this.components.length&&this.ccSections.length>1&&this.components.sort((function(e,n){return t.ccSections.indexOf(e.section)-t.ccSections.indexOf(n.section)}))},setupInitialDisplayProps:function(){for(var t=0;t<this.components.length;t++){var e=this.components[t];if(!e.data.hasOwnProperty("componentVisibility")&&!this.getIsSpecialComponent(e.type)){var n=d.default.extend(!0,{},e,{data:{componentVisibility:{mobile:!0,desktop:!0}}});this.setComponentInformation(t,n)}}},isFirstComponent:function(t){return 0===t},isLastComponent:function(t){return t===this.components.length-1},transformComponentTypeToText:function(t){return t.replace(/\-+/g," ").replace(/[0-9]+/g,"").trim()},getIsSpecialComponent:function(t){return-1!==this.specialComponents.indexOf(t)},isPossibleToEdit:function(t){return"brand-carousel"!==t&&"separator"!==t},isPossibleToDelete:function(t){return!this.getIsSpecialComponent(t)},isPossibleToDuplicate:function(t){return!this.getIsSpecialComponent(t.type)&&("paragraph"!==t.type||"paragraph"===t.type&&t.data.hasOwnProperty("migrated"))},isPossibleToControlDisplay:function(t){return!this.getIsSpecialComponent(t)&&"custom-html"!==t},isMobileVisibilityToggleable:function(t){return"mosaic"!==t||"mosaic"===t&&this.ccConfig.mosaic.support_breakpoint_dedicated_images},getIsComponentHiddenFE:function(t){return!!t.hasOwnProperty("componentVisibility")&&!(t.componentVisibility.mobile&&""!==t.componentVisibility.mobile||t.componentVisibility.desktop&&""!==t.componentVisibility.desktop)},getIsComponentVisibleDashboard:function(t){if(t.hasOwnProperty("componentVisibility")&&this.filters){var e=""!==t.componentVisibility.mobile&&!1!==t.componentVisibility.mobile,n=""!==t.componentVisibility.desktop&&!1!==t.componentVisibility.desktop;return!(!this.filters.component_visibility.options.mobile.value||!e)||(!(!this.filters.component_visibility.options.desktop.value||!n)||!(!this.filters.component_visibility.options.none.value||e||n))}return!0},deleteComponent:function(t){var e=this;h.default({content:g.default("Are you sure you want to delete this item?"),actions:{confirm:function(){var n=e.components[t];e.components.splice(t,1),"paragraph"===n.type&&n.data.blockId&&""!==n.data.blockId&&e.deleteStaticBlock(n.data.blockId),e.$dispatch("layout-builder__update")}}})},deleteStaticBlock:function(t){var e=this;h.default({content:g.default("Would you like to delete CMS Block related to this component (CMS Block ID: %s) ?").replace("%s",t),actions:{confirm:function(){e.$dispatch("layout-builder__cmsblock-delete-request",t)}}})},getTranslatedText:function(t){return g.default(t)}}},mt={mixins:[tt],template:'<form class="cc-button-configurator {{ classes }} | {{ mix }}" {{ attributes }} @submit.prevent="onSave">\n        <section class="cc-button-configurator__section cc-button-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.button != null && ccConfig.button.custom_sections != null" v-for="section in ccConfig.button.custom_sections">\n            <h3 class="cc-button-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-label" class="cc-input__label">'.concat(g.default("Label"),':</label>\n            <input type="text" v-model="configuration.label" id="cfg-label" class="cc-input__input" @change="onChange">\n        </div>\n        <div class="cc-input cc-input--type-addon cc-input--type-inline | cc-button-configurator__item-form-element">\n            <label for="cfg-target" class="cc-input__label">').concat(g.default("Target"),':</label>\n            <div class="cc-input__addon-wrapper">\n                <input type="text" class="cc-input__input | cc-button-configurator__target" v-model="configuration.target" id="cfg-target">\n                <span class="cc-input__addon | cc-button-configurator__widget-chooser-trigger" @click="openCtaTargetModal()">\n                    <svg class="cc-input__addon-icon">\n                        <use xlink:href="#icon_link"></use>\n                    </svg>\n                </span>\n            </div>\n        </div>\n    </form>'),props:{configuration:{type:Object,default:function(){return{customCssClass:"",label:"",target:""}}},assetsSrc:{type:String,default:""},adminPrefix:{type:String,default:"admin"},xmlConfigEntry:{type:String,default:"button"}},events:{"component-configurator__save":function(){this.onSave()}},methods:{openCtaTargetModal:function(){widgetTools.openDialog("".concat(window.location.origin,"/").concat(this.adminPrefix,"/admin/widget/index/filter_widgets/Link/widget_target_id/cfg-target/")),this.wWidgetListener()},widgetSetListener:function(){var t=this;d.default(".cc-button-configurator__cta-target-link").on("change",(function(){t.onChange()}))},wWidgetListener:function(){var t=this;if("undefined"!=typeof wWidget&&""!==widgetTools.dialogWindow[0].innerHTML){var e=widgetTools.dialogWindow[0].querySelector("#insert_button");e.onclick=null,e.addEventListener("click",(function(){t.configuration.target="",wWidget.insertWidget()}))}else setTimeout(this.wWidgetListener,300)}},ready:function(){this.widgetSetListener()}},_t=function(t,e,n){return'<div class="cc-input__fake-select | '.concat(t.input.base," ").concat(n,'">').concat(e.select,'</div>\n        <div class="').concat(t.input.base,'-opener"></div>\n        <div class="').concat(t.menu.base,'">\n            <div class="').concat(t.search.wrapper,'">\n                <input class="cc-input__input | ').concat(t.search.input,'" data-role="advanced-select-text" type="text" placeholder="').concat(e.search,'">\n                <div class="').concat(t.search.resultsQty,'"></div>\n            </div>\n            <div class="').concat(t.menu.content,'"></div>\n            <div class="').concat(t.search.resultsWrapper,'"></div>\n            <div class="').concat(t.actions.wrapper,'">\n                <button class="action-default | ').concat(t.actions.button,'" type="button">').concat(e.doneButton,"</button>\n            </div>\n        </div>")},ht=function(t,e,n){return'<div class="cc-input__fake-select | '.concat(t.input.base," ").concat(n,'">').concat(e.select,'</div>\n        <div class="').concat(t.input.base,'-opener"></div>\n        <div class="').concat(t.menu.base,'">\n            <div class="').concat(t.menu.content,'"></div>\n            <div class="').concat(t.actions.wrapper,'">\n                <button class="action-default | ').concat(t.actions.button,'" type="button">').concat(e.doneButton,"</button>\n            </div>\n        </div>")},vt=function(t,e,n,i){return'<span class="'.concat(t,'__crumb">\n            <span class="').concat(t,'__crumb-text">').concat(e,'</span>\n            <button class="').concat(t,'__crumb-remove" type="button" title="').concat(n,'" tabindex="-1" data-value="').concat(i,'"></button>\n        </span>')},bt=function(){function t(t,e,n){this._defaults={multiple:!0,showChildren:!0,showSearch:!0,disabled:!1,disableLastLevelItems:!1,minSearchQueryLength:3,placeholders:{select:g.default("Select..."),doneButton:g.default("Done"),search:g.default("Type category name to search..."),empty:g.default("There are no categories matching your selection"),removeCrumb:g.default("Remove this category")},classes:{base:"cc-category-picker",baseMix:"",input:{base:"cc-category-picker__input"},menu:{base:"cc-category-picker__box",open:"cc-category-picker__box--open",content:"cc-category-picker__box-content"},search:{wrapper:"cc-category-picker__search",input:"cc-category-picker__search-input",label:"cc-category-picker__results-label",resultsQty:"cc-category-picker__results-qty",resultsWrapper:"cc-category-picker__results",resultsUL:"cc-category-picker__results-list",resultsLI:"cc-category-picker__results-item",resultsPath:"cc-category-picker__results-path"},actions:{wrapper:"cc-category-picker__actions",button:"cc-category-picker__button"},dropdown:{ul:"cc-category-picker__dropdown",li:"cc-category-picker__dropdown-item",toggler:"cc-category-picker__dropdown-toggler",label:"cc-category-picker__label",checkbox:"cc-category-picker__checkbox",radio:"cc-category-picker__radio"}}},this._categoriesData=e,this._categoriesLabels=[],this._options=d.default.extend(!0,{},this._defaults,n),this._$output=t,this._$wrapper=void 0,this._isOpen=!1,this._prefix=Math.random().toString(36).substring(2,5),this._orderedCheckboxes=[],this._renderPicker(),this._afterBuild(!1),this._rebuildValues(),this._setEvents()}return t.prototype.updatePicker=function(t){var e=this._options.classes,n=this._options.placeholders,i=d.default(t).map((function(){return this.value})).get().join(",");this._categoriesLabels=d.default(t).map((function(){return d.default(this).next("label").clone().children().remove().end().text()}));var o=d.default(t).map((function(){var t=d.default(this).next("label").clone().children().remove().end().text();return vt(e.base,t,n.removeCrumb,this.value)})).get().join("");this._$output[0].value=i,this._$output[0].dispatchEvent(new Event("change")),""!==o?this._$wrapper.find(".".concat(e.input.base)).html(o):this._$wrapper.find(".".concat(e.input.base)).html(this._options.placeholders.select),this._setCrumbsEvents()},t.prototype.openSubcategoriesTree=function(t){var e=this._options.classes;t.find("> .".concat(e.dropdown.ul)).toggleClass("".concat(e.dropdown.ul,"--hidden")),t.find("> .".concat(e.dropdown.li,"-content .").concat(e.dropdown.toggler)).toggleClass("".concat(e.dropdown.toggler,"--active"))},t.prototype.openPicker=function(t){this.closePicker(d.default(".".concat(this._options.classes.base))),t.find(".cc-input__fake-select").addClass("cc-input__fake-select--active"),t.find(".".concat(this._options.classes.menu.base)).addClass("".concat(this._options.classes.menu.base,"--open")),this._isOpen=!0},t.prototype.closePicker=function(t){t.find(".cc-input__fake-select").removeClass("cc-input__fake-select--active"),t.find(".".concat(this._options.classes.menu.base)).removeClass("".concat(this._options.classes.menu.base,"--open")),this._isOpen=!1},t.prototype.showChildrenOnly=function(t){var e=this._getChildren(t);e.optgroup?(this._orderedCheckboxes=[],this._$wrapper.find(".".concat(this._options.classes.menu.content)).html(this._getContents(e.optgroup,"","".concat(this._options.classes.dropdown.ul,"--normal"))),this._afterBuild(!1),this._rebuildValues(),this._setEvents()):this._$wrapper.find(".".concat(this._options.classes.menu.content)).html(this._options.placeholders.empty)},t.prototype.enable=function(){this._$wrapper.find(".".concat(this._options.classes.input.base)).removeClass("".concat(this._options.classes.input.base,"--disabled")),this._options.disabled=!1},t.prototype.disable=function(){this._$wrapper.find(".".concat(this._options.classes.input.base)).addClass("".concat(this._options.classes.input.base,"--disabled")),this.closePicker(this._$wrapper),this._options.disabled=!0},t.prototype.resetAll=function(){this._$output[0].value="",this._$wrapper.find(".".concat(this._options.classes.input.base)).html(this._options.placeholders.select),this._orderedCheckboxes=[],this._categoriesLabels=[]},t.prototype._renderPicker=function(){var t=this._options.classes,e=this._options.placeholders,n=this._options.disabled?"".concat(t.input.base,"--disabled"):"",i="";i=this._options.showChildren&&this._options.showSearch?_t(t,e,n):ht(t,e,n),this._$output.wrap('<div class="'.concat(t.base," ").concat(t.baseMix,'"></div>')),this._$wrapper=this._$output.parent(".".concat(t.base)),this._$wrapper.append(i),this._categoriesData.optgroup?this._$wrapper.find(".".concat(t.menu.content)).html(this._getContents(this._categoriesData.optgroup,"")):this._$wrapper.find(".".concat(t.menu.content)).html(e.empty)},t.prototype._renderSearchResults=function(t){var e=this._options.classes,n=this,i="";if(this._$wrapper.find(".".concat(e.search.resultsWrapper)).html(""),t.length){i+='<ul class="'.concat(e.search.resultsUL,'">');for(var o=0;o<t.length;o++){var c=d.default(t[o].path).map((function(){return this})).get().join(" / "),a=d.default("#cp-".concat(this._prefix,"-").concat(t[o].value)).prop("checked")?"checked":"",s=d.default("#cp-".concat(this._prefix,"-").concat(t[o].value)).prop("disabled")?"disabled":"";i+='<li class="'.concat(e.search.resultsLI,'" role="option-group">'),this._options.multiple?i+='<div class="cc-input cc-input--type-checkbox">\n                        <input class="cc-input__checkbox | '.concat(e.dropdown.checkbox,'" type="checkbox" value="').concat(t[o].value,'" name="cp-sr-').concat(this._prefix,'[]" id="cp-sr-').concat(this._prefix,"-").concat(t[o].value,'" tabindex="-1" ').concat(a," ").concat(s,">"):i+='<div class="cc-input cc-input--type-radio">\n                        <input class="cc-input__radio | '.concat(e.dropdown.radio,'" type="radio" value="').concat(t[o].value,'" name="cp-sr-').concat(this._prefix,'[]" id="cp-sr-').concat(this._prefix,"-").concat(t[o].value,'" tabindex="-1" ').concat(a," ").concat(s,">"),i+='<label for="cp-sr-'.concat(this._prefix,"-").concat(t[o].value,'" class="cc-input__label | ').concat(e.search.label,'">\n                    ').concat(t[o].label,'\n                    <span class="').concat(e.search.resultsPath,'">').concat(c,"</span>\n                </label></div>\n                </li>")}i+="</ul>"}this._$wrapper.find(".".concat(e.search.resultsWrapper)).html(i),this._$wrapper.find(".".concat(e.search.resultsUL,' input[type="checkbox"]')).off("change").on("change",(function(){n._$wrapper.find(".".concat(e.menu.content,' :input[value="').concat(this.value,'"]')).trigger("click")}));var r=1===t.length?"".concat(t.length," ").concat(g.default("Result")):"".concat(t.length," ").concat(g.default("Results"));this._$wrapper.find(".".concat(this._options.classes.search.resultsQty)).html(r),this._setEvents()},t.prototype._getByQuery=function(t,e,n){var i=this;void 0===n&&(n=[]);var o=[];if("1"===t.is_active&&t.label&&t.label.match(new RegExp(e,"i"))&&o.push({label:t.label,value:t.value,path:n}),t.optgroup){var c=t.label?n.concat([t.label]):[];t.optgroup.forEach((function(t){i._getByQuery(t,e,c).map((function(e){if("1"===t.is_active)return o.push(e)}))}))}return o},t.prototype._getChildren=function(t,e){var n=e||this._categoriesData;if(n.value&&n.value===t)return n;if(n.optgroup)for(var i=n.optgroup,o=0;o<i.length;o++){var c=this._getChildren(t,i[o]);if(c)return c}return null},t.prototype._getContents=function(t,e,n){var i=this._options.classes;n||(n=""),e+='<ul class="'.concat(i.dropdown.ul," ").concat(i.dropdown.ul,"--hidden ").concat(n,'">');for(var o=0;o<t.length;o++)if("1"===t[o].is_active){var c=d.default("#cp-".concat(this._prefix,"-").concat(t[o].value)).prop("checked")?"checked":"";e+='<li class="'.concat(i.dropdown.li,'" data-role="option-group">'),this._options.multiple?e+='<div class="cc-input cc-input--type-checkbox | '.concat(i.dropdown.li,'-content">\n                        <input class="cc-input__checkbox | ').concat(i.dropdown.checkbox,'" type="checkbox" value="').concat(t[o].value,'" name="cp-').concat(this._prefix,'[]" id="cp-').concat(this._prefix,"-").concat(t[o].value,'" tabindex="-1" ').concat(c,">"):e+='<div class="cc-input cc-input--type-radio | '.concat(i.dropdown.li,'-content">\n                        <input class="cc-input__radio | ').concat(i.dropdown.radio,'" type="radio" value="').concat(t[o].value,'" name="cp-').concat(this._prefix,'[]" id="cp-').concat(this._prefix,"-").concat(t[o].value,'" tabindex="-1" ').concat(c,">"),e+='<label for="cp-'.concat(this._prefix,"-").concat(t[o].value,'" class="cc-input__label | ').concat(i.dropdown.label,'">').concat(t[o].label,"</label>"),t[o].optgroup&&t[o].optgroup.length&&this._options.showChildren?e+='<div class="'.concat(i.dropdown.toggler,'"></div></div>\n                        ').concat(this._getContents(t[o].optgroup,"")):e+="</div>",e+="</li>"}return e+="</ul>"},t.prototype._afterBuild=function(t){void 0===t&&(t=!0);var e=this._options.classes,n=this;this._$wrapper.find(".".concat(e.menu.content," > .").concat(e.dropdown.ul)).removeClass("".concat(e.dropdown.ul,"--hidden")),t&&this.openSubcategoriesTree(this._$wrapper.find(".".concat(e.menu.content," > ul > li:first-child"))),this._$wrapper.find(".".concat(e.dropdown.li)).each((function(){d.default(this).find(".".concat(e.dropdown.ul)).length?d.default(this).addClass("".concat(e.dropdown.li,"--has-children")):n._options.disableLastLevelItems&&d.default(this).addClass("".concat(e.dropdown.li,"--disabled")).find("input").prop("disabled",!0)}))},t.prototype._rebuildValues=function(){if(""!==this._$output[0].value){for(var t=this._$output[0].value.split(","),e=0;e<t.length;e++){var n=this._$wrapper.find(".".concat(this._options.classes.menu.content,' input[value="').concat(t[e],'"]'));n.length&&(n.prop("checked",!0),this._orderedCheckboxes.push(n[0]))}this.updatePicker(this._orderedCheckboxes)}},t.prototype._setEvents=function(){var t=this._options.classes,e=this,n=[112,113,114,115,116,117,118,119,120,121,122,123],i=/^[a-zA-Z0-9._\b\-\s]+$/i;this._$wrapper.find(".".concat(t.input.base,"-opener")).off("click").on("click",(function(){e._isOpen?e.closePicker(d.default(this).parents(".".concat(t.base))):e.openPicker(d.default(this).parents(".".concat(t.base)))})),this._$wrapper.find(".".concat(t.actions.button)).off("click").on("click",(function(){e.closePicker(d.default(this).parents(".".concat(t.base)))})),this._$wrapper.find(".".concat(t.dropdown.toggler)).off("click").on("click",(function(){e.openSubcategoriesTree(d.default(this).parents(".".concat(t.dropdown.li)).first())})),this._$wrapper.find(".".concat(t.menu.content,' input[type="checkbox"]')).off("change").on("change",(function(){var n=e._orderedCheckboxes.indexOf(this);-1!==n&&e._orderedCheckboxes.splice(n,1),this.checked&&e._orderedCheckboxes.push(this);for(var i=void 0;i<e._orderedCheckboxes.length;i++){var o=e._orderedCheckboxes[i].value;e._$wrapper.find(".".concat(t.search.resultsUL,' input[value="').concat(o,'"]')).length&&e._$wrapper.find(".".concat(t.menu.content,' input[value="').concat(o,'"]')).prop("checked",!0)}e.updatePicker(e._orderedCheckboxes)})),this._$wrapper.find(".".concat(t.menu.base,' input[type="radio"]')).off("change").on("change",(function(){e._$wrapper.find(".".concat(t.search.resultsUL,' input[value="').concat(this.value,'"]')).length&&e._$wrapper.find(".".concat(t.menu.content,' input[value="').concat(this.value,'"]')).prop("checked",!0),e.updatePicker(this)})),this._$wrapper.find(".".concat(t.search.input)).off("keyup").on({keyup:function(o){this.value.length>=e._options.minSearchQueryLength?(!String.fromCharCode(o.keyCode).toLowerCase().match(i)||-1!==n.indexOf(o.which)||o.ctrlKey||o.metaKey||o.altKey||e._renderSearchResults(e._getByQuery(e._categoriesData,this.value)),e._$wrapper.find(".".concat(t.search.resultsWrapper)).show(),e._$wrapper.find(".".concat(t.search.resultsQty)).show(),e._$wrapper.find(".".concat(t.menu.content)).hide()):(e._$wrapper.find(".".concat(t.search.resultsWrapper)).hide(),e._$wrapper.find(".".concat(t.search.resultsQty)).hide(),e._$wrapper.find(".".concat(t.menu.content)).show())}})},t.prototype._setCrumbsEvents=function(){var t=this;this._$wrapper.find(".".concat(t._options.classes.base,"__crumb-remove")).off("click").on("click",(function(e){var n=t._$wrapper.find(".".concat(t._options.classes.menu.content,' input[value="').concat(d.default(this).data("value"),'"]')),i=t._$wrapper.find(".".concat(t._options.classes.search.resultsWrapper,' input[value="').concat(d.default(this).data("value"),'"]'));t._options.multiple?n.click():n.prop("checked")&&(n.prop("checked",!1),t.updatePicker()),i.length&&i.prop("checked",!i.prop("checked")),e.preventDefault()}))},t}(),yt={mixins:[tt],template:'<form class="cc-category-links-configurator {{ classes }} | {{ mix }}" {{ attributes }} @submit.prevent="onSave">\n        <section class="cc-category-links-configurator__section cc-category-links-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.category_links != null && ccConfig.category_links.custom_sections != null" v-for="section in ccConfig.category_links.custom_sections">\n            <h3 class="cc-category-links-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" :class="{\'cc-custom-fields__form-group--full\': section.type === \'full-width\'}" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label">'.concat(g.default("Category"),'</label>\n            <input type="hidden" v-model="configuration.main_category_id" id="cp-main">\n        </div>\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label">').concat(g.default("Subcategories"),'</label>\n            <input type="hidden" v-model="configuration.sub_categories_ids" id="cp-sub">\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-shownumbers" class="cc-input__label">').concat(g.default("Show products count"),'</label>\n            <div class="admin__actions-switch" data-role="switcher">\n                <input type="checkbox" class="admin__actions-switch-checkbox" id="cfg-shownumbers" name="use_name_in_product_search" v-model="configuration.shownumbers" @change="onChange">\n                <label class="admin__actions-switch-label" for="cfg-shownumbers">\n                    <span class="admin__actions-switch-text" data-text-on="').concat(g.default("Yes"),'" data-text-off="').concat(g.default("No"),'"></span>\n                </label>\n            </div>\n        </div>\n\n        <div\n            class="cc-input cc-input--type-inline"\n            v-bind:class="{ \'_disabled\': !subCategoriesPicker._categoriesLabels.length}"\n        >\n            <label for="hide_link_to_all_products" class="cc-input__label">').concat(g.default("Hide link to all products"),'</label>\n            <div class="admin__actions-switch" data-role="switcher">\n                <input\n                    type="checkbox"\n                    class="admin__actions-switch-checkbox"\n                    id="cfg-hidelinktoall"\n                    name="hide_link_to_all_products"\n                    v-model="configuration.hide_link_to_all_products"\n                    @change="onChange"\n                    :checked="subCategoriesPicker._categoriesLabels.length && configuration.hide_link_to_all_products"\n                    :disabled="!subCategoriesPicker._categoriesLabels.length">\n                <label class="admin__actions-switch-label" for="cfg-hidelinktoall">\n                    <span class="admin__actions-switch-text" data-text-on="').concat(g.default("Yes"),'" data-text-off="').concat(g.default("No"),'"></span>\n                </label>\n            </div>\n        </div>\n    </form>'),events:{"component-configurator__save":function(){this.configuration.main_category_labels=this.categoryPicker._categoriesLabels,this.configuration.sub_categories_labels=this.subCategoriesPicker._categoriesLabels,this.configuration.hide_link_to_all_products=!!this.subCategoriesPicker._categoriesLabels.length&&this.configuration.hide_link_to_all_products,this.onSave()}},props:{configuration:{type:Object,default:function(){return{customCssClass:"",main_category_id:"",sub_categories_ids:"",shownumbers:!1,hide_link_to_all_products:!1}}},categoriesDataUrl:{type:String,default:""},xmlConfigEntry:{type:String,default:"category_links"}},data:function(){return{categoryPicker:void 0,subCategoriesPicker:void 0}},ready:function(){var t=this;d.default("body").trigger("showLoadingPopup"),this.$http.get(this.categoriesDataUrl).then((function(e){t.initializePickers(JSON.parse(e.body)),d.default("body").trigger("hideLoadingPopup")}))},methods:{initializePickers:function(t){var e=this;this.subCategoriesPicker=new bt(d.default("#cp-sub"),t,{showSearch:!1,disabled:""===this.configuration.main_category_id}),this.categoryPicker=new bt(d.default("#cp-main"),t,{multiple:!1}),""!==this.configuration.main_category_id&&this.subCategoriesPicker.showChildrenOnly(this.configuration.main_category_id),d.default("#cp-main").on("change",(function(){e.configuration.hide_link_to_all_products=!1,e.updateSubcategoriesPicker(e.configuration.main_category_id)}))},updateSubcategoriesPicker:function(t){this.subCategoriesPicker.resetAll(),""!==t?(this.subCategoriesPicker.showChildrenOnly(t),this.subCategoriesPicker.enable()):this.subCategoriesPicker.disable()}}},wt={mixins:[tt],components:{"action-button":y,"component-actions":w},template:'<div class="cc-cms-pages-teaser-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-cms-pages-teaser-configurator__section cc-cms-pages-teaser-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.cms_pages_teaser != null && ccConfig.cms_pages_teaser.custom_sections != null" v-for="section in ccConfig.cms_pages_teaser.custom_sections">\n            <h3 class="cc-cms-pages-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-cms-pages-teaser-configurator__section">\n            <h3 class="cc-cms-pages-teaser-configurator__subtitle">'.concat(g.default("Data source"),'</h3>\n            <div class="cc-cms-pages-teaser-configurator__scenario-options cc-cms-pages-teaser-configurator__scenario-options--inputs">\n                <div class="cc-input cc-input--type-inline | cc-cms-pages-teaser-configurator__section-option">\n                    <label class="cc-input__label | cc-cms-pages-teaser-configurator__section-option-label">').concat(g.default("CMS Tags"),':</label>\n                    <input type="hidden" v-model="configuration.tags" @change="onChange" id="cp-cms-pages-teaser">\n                </div>\n                <div class="cc-cms-pages-teaser-configurator__section-option">\n                    <div class="cc-input">\n                        <label class="cc-input__label" for="cfg-cmspt-page-ids">').concat(g.default("CMS Pages IDs"),':</label>\n                        <input type="text" name="cfg-cmspt-page-ids" class="cc-input__input" id="cfg-cmspt-page-ids" v-model="configuration.ids" @change="onChange">\n                    </div>\n                    <div class="cc-input cc-input--type-inline cc-input--type-hint">\n                        <span class="cc-input__hint cc-input__hint--under-field">').concat(g.default("Multiple, comma-separated."),'</span>\n                    </div>\n                    <div class="cc-input cc-input--type-inline cc-input--type-hint" v-if="configuration.ids.length">\n                        <span class="cc-input__hint cc-input__hint--info-mark">').concat(g.default("Providing list of comma separated IDs will result in ignoring any CMS tags (if specified). Only pages with specified IDs will be displayed in exactly the same order as they are provided in the field."),'</span>\n                    </div>\n                </div>\n\n                <div class="cc-input cc-input--type-inline | cc-cms-pages-teaser-configurator__section-option">\n                    <label for="cfg-cmspt-limit" class="cc-input__label | cc-cms-pages-teaser-configurator__section-option-label">').concat(g.default("Teasers limit"),':</label>\n                    <select name="cfg-cmspt-limit" class="cc-input__select" id="cfg-cmspt-limit" v-model="configuration.limit" @change="onChange">\n                        <option value="4">').concat(g.default("4 teasers"),'</option>\n                        <option value="8">').concat(g.default("8 teasers"),'</option>\n                        <option value="16">').concat(g.default("16 teasers"),'</option>\n                        <option value="1000">').concat(g.default("All available teasers (no limit)"),'</option>\n                    </select>\n                </div>\n\n                <div class="cc-input cc-input--type-inline | cc-cms-pages-teaser-configurator__section-option">\n                    <label for="cfg-cmspt-text-variant" class="cc-input__label | cc-cms-pages-teaser-configurator__section-option-label">{{ \'Content align\' | translate }}:</label>\n                    <div class="cc-teaser-configurator__position-grid">\n                        <template v-for="y in 3">\n                            <template v-for="x in 3">\n                                <span\n                                    class="cc-teaser-configurator__position-grid-item"\n                                    :class="{\'cc-teaser-configurator__position-grid-item--active\': isCurrentContentAlign(x+1, y+1)}"\n                                    @click="setContentAlign(x+1, y+1)"\n                                ></span>\n                            </template>\n                        </template>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-cms-pages-teaser-configurator__section">\n            <h3 class="cc-cms-pages-teaser-configurator__subtitle">Desktop Layout</h3>\n            <div class="cc-cms-pages-teaser-configurator__scenario-options">\n                <div class="cc-cms-pages-teaser-configurator__scenario-options-list">\n                    <li\n                        :class="{\n                            \'cc-cms-pages-teaser-configurator__option--selected\': configuration.currentScenario.desktopLayout.id == optionId,\n                        }"\n                        class="cc-cms-pages-teaser-configurator__option"\n                        v-for="(optionId, option) in scenarioOptions.desktopLayout"\n                        @click="toggleOption(\'desktopLayout\', optionId)">\n                        <div class="cc-cms-pages-teaser-configurator__option-wrapper">\n                            <svg class="cc-cms-pages-teaser-configurator__option-icon">\n                                <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                            </svg>\n                        </div>\n                        <p class="cc-cms-pages-teaser-configurator__option-name">\n                            ').concat(g.default("{{ option.name }}"),'\n                        </p>\n                    </li>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-cms-pages-teaser-configurator__section">\n            <h3 class="cc-cms-pages-teaser-configurator__subtitle">Mobile Layout</h3>\n            <div class="cc-cms-pages-teaser-configurator__scenario-options">\n                <ul class="cc-cms-pages-teaser-configurator__scenario-options-list">\n                    <li\n                        :class="{\n                            \'cc-cms-pages-teaser-configurator__option--selected\': configuration.currentScenario.mobileLayout.id == optionId,\n                        }"\n                        class="cc-cms-pages-teaser-configurator__option"\n                        v-for="(optionId, option) in scenarioOptions.mobileLayout"\n                        @click="toggleOption(\'mobileLayout\', optionId)">\n                        <div class="cc-cms-pages-teaser-configurator__option-wrapper">\n                            <svg class="cc-cms-pages-teaser-configurator__option-icon">\n                                <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                            </svg>\n                        </div>\n                        <p class="cc-cms-pages-teaser-configurator__option-name">\n                            ').concat(g.default("{{ option.name }}"),"\n                        </p>\n                    </li>\n                </ul>\n            </div>\n        </section>\n    </div>"),props:{configuration:{type:Object,default:function(){return{customCssClass:"",tags:"",ids:"",limit:"1000",content_align:{x:1,y:1},currentScenario:{desktopLayout:{},mobileLayout:{}}}}},cmsTags:{type:String,default:""},xmlConfigEntry:{type:String,default:"cms_pages_teaser"}},events:{"component-configurator__save":function(){this.onSave()}},data:function(){return{scenarioOptions:{desktopLayout:{2:{name:"2 in row",iconId:"dl_2",teasersNum:2},4:{name:"4 in row",iconId:"dl_4",teasersNum:4}},mobileLayout:{"mobile-slider":{name:"Slider",iconId:"ml_slider"},"mobile-in-row":{name:"Grid",iconId:"ml_2-2"}}}}},methods:{toggleOption:function(t,e){this.configuration.currentScenario[t]=this.scenarioOptions[t][e],this.configuration.currentScenario[t].id=e},setContentAlign:function(t,e){this.configuration.content_align.x=t,this.configuration.content_align.y=e},isCurrentContentAlign:function(t,e){return Number(this.configuration.content_align.x)===t&&Number(this.configuration.content_align.y)===e}},ready:function(){""!==this.cmsTags&&(this.categoryPicker=new bt(d.default("#cp-cms-pages-teaser"),JSON.parse(this.cmsTags),{multiple:!0,minSearchQueryLength:1,placeholders:{select:g.default("Select tags..."),doneButton:g.default("Done"),search:g.default("Type tag-name to search..."),empty:g.default("There are no tags matching your selection"),removeCrumb:g.default("Remove this tag")},classes:{baseMix:"cc-category-picker--min"}})),this.configuration.content_align||(this.$set("configuration.content_align.x",1),this.$set("configuration.content_align.y",1))}},xt={mixins:[tt],template:'\n    <div class="cc-custom-html-configurator">\n        <section class="cc-custom-html-configurator__section cc-custom-html-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.custom_html != null && ccConfig.custom_html.custom_sections != null" v-for="section in ccConfig.custom_html.custom_sections">\n            <h3 class="cc-custom-html-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n        <section class="cc-custom-html-configurator__section">\n            <h3 class="cc-custom-html-configurator__subtitle">Configuration</h3>\n            <form class="cc-custom-html-configurator__form @submit.prevent="onSave">\n                <div class="cc-input cc-input--type-inline">\n                    <p class="cc-warning">'.concat(g.default("This component is meant to be used only by developers due to high risk of breaking shop layout."),'</p>\n                </div>\n                <div class="cc-input cc-input--type-inline">\n                    <label for="cfg-title" class="cc-input__label">').concat(g.default("Title"),':</label>\n                    <input type="text" v-model="configuration.title" id="cfg-title" class="cc-input__input" @change="onChange" />\n                </div>\n                <div class="cc-input cc-input--type-inline">\n                    <label for="cfg-markup" class="cc-input__label">').concat(g.default("HTML markup"),':</label>\n                    <textarea v-model="configuration.markup" id="cfg-markup" class="cc-input__textarea" @change="onChange"></textarea>\n                </div>\n            </form>\n        </section>\n    </div>'),props:{configuration:{type:Object,default:function(){return{title:"",markup:""}}}},events:{"component-configurator__save":function(){this.$set("configuration.markup",this.fixMarkup(this.configuration.markup)),this.onSave()}},methods:{fixMarkup:function(t){return t.replace(/\/>/g,">").replace(/&quot;/g,"'")}}},Ct={mixins:[tt],template:'<form class="cc-daily-deal-teaser-configurator" {{ attributes }}>\n        <section class="cc-daily-deal-teaser-configurator__section cc-daily-deal-teaser-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.daily_deal_teaser != null && ccConfig.daily_deal_teaser.custom_sections != null" v-for="section in ccConfig.daily_deal_teaser.custom_sections">\n            <h3 class="cc-daily-deal-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label">'.concat(g.default("Categories"),':</label>\n            <input type="hidden" v-model="configuration.category_id" @change="onChange" id="cp-daily-deal-teaser">\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label" for="cfg-ddt-skus">').concat(g.default("SKUs"),':</label>\n            <input type="text" name="cfg-ddt-skus" class="cc-input__input" id="cfg-ddt-skus" v-model="configuration.skus" @change="onChange">\n        </div>\n        <div class="cc-input cc-input--type-inline cc-input--type-hint">\n            <label class="cc-input__label"> </label>\n            <span class="cc-input__hint cc-input__hint--under-field">').concat(g.default("Multiple, comma-separated"),'</span>\n        </div>\n        <div class="cc-input cc-input--type-inline cc-input--type-hint" v-if="configuration.skus.length">\n            <label class="cc-input__label"> </label>\n            <span class="cc-input__hint cc-input__hint--under-field cc-input__hint--info-mark">').concat(g.default("Providing list of comma separated SKUs will disable any filtering and sorting configured for that component.  Category (if specified) will also not be taken into account. Only products with specified SKUs will be displayed in exactly the same order as they are provided in SKUs field."),'</span>\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label" for="cfg-ddt-dataprovider">').concat(g.default("Custom Data Provider"),':</label>\n            <input type="text" name="cfg-ddt-dataprovider" class="cc-input__input" id="cfg-ddt-dataprovider" v-model="configuration.class_overrides.dataProvider" @change="onChange">\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-ddt-filter" class="cc-input__label">').concat(g.default("Filter"),':</label>\n            <select name="cfg-ddt-filter" class="cc-input__select" id="cfg-ddt-filter" v-model="configuration.filter" @change="onChange">\n                <option value="">').concat(g.default("No filter"),'</option>\n                <template v-for="filter in productCollectionsFilters">\n                    <option value="{{ filter.value }}" :selected="filter.value === configuration.filter">{{ filter.label }}</option>\n                </template>\n            </select>\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-ddt-order-by" class="cc-input__label">').concat(g.default("Order by"),':</label>\n            <select name="cfg-ddt-order-by" class="cc-input__select" id="cfg-ddt-order-by" v-model="configuration.order_by" @change="onChange">\n                <option value="">').concat(g.default("Not specified"),'</option>\n                <template v-for="sorter in productCollectionsSorters">\n                    <option value="{{ sorter.value }}" :selected="sorter.value === configuration.order_by">{{ sorter.label }}</option>\n                </template>\n            </select>\n            <select name="cfg-ddt-order-type" class="cc-input__select" v-model="configuration.order_type" @change="onChange">\n                <option value="ASC">').concat(g.default("Ascending"),'</option>\n                <option value="DESC">').concat(g.default("Descending"),"</option>\n            </select>\n        </div>\n    </form>"),props:{configuration:{type:Object,default:function(){return{customCssClass:"",category_id:"",filter:"",order_by:"creation_date",order_type:"DESC",skus:"",class_overrides:{dataProvider:""}}}},categoriesDataUrl:{type:String,default:""},productCollectionsSorters:{type:[String,Array],default:""},productCollectionsFilters:{type:[String,Array],default:""},xmlConfigEntry:{type:String,default:"daily_deal_teaser"}},data:function(){return{categoryPicker:void 0}},events:{"component-configurator__save":function(){""===this.configuration.class_overrides.dataProvider&&delete this.configuration.class_overrides,this.onSave()}},ready:function(){var t=this;this.productCollectionsSorters=""!==this.productCollectionsSorters?JSON.parse(this.productCollectionsSorters):[],this.productCollectionsFilters=""!==this.productCollectionsFilters?JSON.parse(this.productCollectionsFilters):[],this.configuration.class_overrides||(this.configuration.class_overrides={dataProvider:""}),d.default("body").trigger("showLoadingPopup"),this.$http.get(this.categoriesDataUrl).then((function(e){t.categoryPicker=new bt(d.default("#cp-daily-deal-teaser"),JSON.parse(e.body),{multiple:!1}),d.default("body").trigger("hideLoadingPopup")}))}},kt={mixins:[tt],template:'<div class="cc-headline-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-headline-configurator__section cc-headline-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.headline != null && ccConfig.headline.custom_sections != null" v-for="section in ccConfig.headline.custom_sections">\n            <h3 class="cc-headline-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-headline" class="cc-input__label">'.concat(g.default("Headline"),':</label>\n            <input type="text" v-model="configuration.title" id="cfg-headline" class="cc-input__input" @change="onChange">\n        </div>\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-subheadline" class="cc-input__label">').concat(g.default("Subheadline"),':</label>\n            <input type="text" v-model="configuration.subtitle" id="cfg-subheadline" class="cc-input__input" @change="onChange">\n        </div>\n\n        <div class="cc-headline-configurator__advanced-trigger">\n            <span :class="isAvdancedSettingsOpen ? \'active\' : \'\'" role="button" @click="toggleAdvancedContent()">').concat(g.default("Advanced settings"),'</span>\n        </div>\n\n        <div class="cc-headline-configurator__advanced-content" v-show="isAvdancedSettingsOpen">\n            <div class="cc-input cc-input--type-inline">\n                <label for="cfg-heading-tag" class="cc-input__label">').concat(g.default("Level of Heading tag"),':</label>\n                <select name="cfg-heading-tag" class="cc-input__select" id="cfg-heading-tag" v-model="configuration.headingTag" @change="onChange">\n                    <option v-for="n in 6" value="h{{ n+1 }}" :selected="n+1 === configuration.headingTag">Heading {{ n+1 }} (h{{ n+1 }})</option>\n                </select>\n            </div>\n        </div>\n    </div>'),props:{configuration:{type:Object,default:function(){return{customCssClass:"",title:"",subtitle:"",headingTag:"h2"}}},xmlConfigEntry:{type:String,default:"headline"}},events:{"component-configurator__save":function(){this.onSave()}},data:function(){return{isAvdancedSettingsOpen:!1}},methods:{toggleAdvancedContent:function(){this.isAvdancedSettingsOpen=!this.isAvdancedSettingsOpen}},ready:function(){this.configuration.headingTag||(this.configuration.headingTag="h2")}},It={mixins:[tt],components:{"action-button":y,"component-adder":x,"component-actions":w,"teaser-configurator":st},template:'<div class="cc-hero-carousel-configurator | {{ class }}">\n        <section class="cc-hero-carousel-configurator__section cc-hero-carousel-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.hero_carousel != null && ccConfig.hero_carousel.custom_sections != null" v-for="section in ccConfig.hero_carousel.custom_sections">\n            <h3 class="cc-hero-carousel-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-hero-carousel-configurator__custom-sections">\n                <div class="cc-custom-fields">\n                    <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                        <component\n                            :is="\'custom-element-\' + field.type"\n                            :configuration="configuration"\n                            :field-configuration="field"\n                            :teaser-index="9999"\n                        ></component>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-hero-carousel-configurator__section">\n            <h3 class="cc-hero-carousel-configurator__subtitle">Mobile Devices Scenario</h3>\n            <div class="cc-hero-carousel-configurator__scenario-options">\n                <ul class="cc-hero-carousel-configurator__scenario-options-list">\n                    <li\n                        :class="{\n                            \'cc-hero-carousel-configurator__option--selected\': configuration.mobileDisplayVariant.id == optionId,\n                        }"\n                        class="cc-hero-carousel-configurator__option"\n                        v-for="(optionId, option) in scenarioOptions.mobileDisplayVariant"\n                        @click="setOption(\'mobileDisplayVariant\', optionId)">\n                        <div class="cc-hero-carousel-configurator__option-wrapper">\n                            <svg class="cc-hero-carousel-configurator__option-icon">\n                                <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                            </svg>\n                        </div>\n                        <p class="cc-hero-carousel-configurator__option-name">\n                            {{ option.name }}\n                        </p>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <h3 class="cc-hero-carousel-configurator__title">Content</h3>\n\n        <component-adder class="cc-component-adder cc-component-adder--static" v-show="!configuration.items.length">\n            <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-hero-carousel-configurator__item-action-button" @click="createNewHeroItem( 0 )">\n                <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                    <use xlink:href="#icon_plus"></use>\n                </svg>\n            </button>\n        </component-adder>\n\n        <template v-for="item in configuration.items">\n            <div class="cc-hero-carousel-configurator__item" id="cc-hero-carousel-item-{{ $index }}">\n                <component-adder class="cc-component-adder cc-component-adder--first">\n                    <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-hero-carousel-configurator__item-action-button" @click="createNewHeroItem( $index )">\n                        <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                            <use xlink:href="#icon_plus"></use>\n                        </svg>\n                    </button>\n                </component-adder>\n\n                <teaser-configurator\n                    :class="cc-teaser-configurator--image-teaser"\n                    :teaser-index="$index"\n                    :configuration="items[$index]"\n                    :parent-configuration="configuration"\n                    :uploader-base-url="uploaderBaseUrl"\n                    :image-endpoint="imageEndpoint"\n                    :admin-prefix="adminPrefix"\n                    :cc-config="ccConfig"\n                    :caller-component-type="hero-carousel"\n                    :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf($index) != -1"\n                ></teaser-configurator>\n\n                <component-adder class="cc-component-adder cc-component-adder--last">\n                    <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-hero-carousel-configurator__item-action-button" @click="createNewHeroItem( $index + 1 )">\n                        <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                            <use xlink:href="#icon_plus"></use>\n                        </svg>\n                    </button>\n                </component-adder>\n            </div>\n        </template>\n\n        <div class="cc-hero-carousel-configurator__modal" v-el:error-modal></div>\n    </div>',props:{configuration:{type:Object,default:function(){return{customCssClass:"",mobileDisplayVariant:{},items:[JSON.parse(JSON.stringify(at))],ignoredItems:[],scenario:{teaserWidth:{},desktopLayout:{},contentPlacement:{},mobileLayout:{}}}}},assetsSrc:{type:String,default:""},uploaderBaseUrl:{type:String,default:""},imageEndpoint:{type:String,default:""},adminPrefix:{type:String,default:"admin"},xmlConfigEntry:{type:String,default:"hero_carousel"}},computed:{imageTeasersContentPositions:function(){var t=this.ccConfig.image_teasers_content_positions;return Object.keys(t).map((function(e){return t[e]}))}},data:function(){return{invalidVideoPlaceholderTeaserIndexes:[],imageUploadedText:g.default("Change"),noImageUploadedText:g.default("Upload"),scenarioOptions:{mobileDisplayVariant:{list:{name:"Large teaser",iconId:"ml_col"},slider:{name:"Slider",iconId:"ml_slider"}}}}},events:{"component-configurator__save":function(){this.configuration.isError=!1,this._validateVideoPlaceholders(),this.onSave()}},methods:{setOption:function(t,e){this.configuration[t]=this.scenarioOptions[t][e],this.configuration[t].id=e},createNewHeroItem:function(t){this.configuration.items.splice(t,0,JSON.parse(JSON.stringify(at))),this.onChange()},mapLegacyConfiguration:function(){var t=this;Object.keys(this.configuration.items[0]).some((function(t){return-1!==["headline","subheadline","paragraph","ctaLabel","href","colorScheme","aspectRatio","decodedImage","displayVariant"].indexOf(t)}))&&(this.configuration.items.forEach((function(e,n){var i=JSON.parse(JSON.stringify(at));switch(i.image={raw:e.image,decoded:e.decodedImage,aspect_ratio:e.aspectRatio,image:e.image},i.slogan=e.headline,i.description=e.subheadline+e.paragraph,i.cta={label:e.ctaLabel,href:e.href},e.displayVariant){case"variant-1":i.content_align={x:1,y:2};break;case"variant-2":i.content_align={x:1,y:3};break;case"variant-3":i.content_align={x:2,y:2};break;case"variant-4":i.content_align={x:2,y:3};break;default:i.content_align={x:1,y:1}}i.optimizers.color_scheme=e.colorScheme,t.$set("configuration.items[".concat(n,"]"),i)})),this.configuration.scenario={contentPlacement:{id:"over"},teaserWidth:{id:"window-slider"},mobileLayout:{id:"mobile-slider"},desktopLayout:{id:"1"}})},_validateVideoPlaceholders:function(){var t=this;this.invalidVideoPlaceholderTeaserIndexes=[],this.configuration.items.forEach((function(e,n){e.video&&e.video.url.length&&!e.image.raw&&(t.invalidVideoPlaceholderTeaserIndexes.push(n),t.configuration.isError=!0)}))}},ready:function(){this.configuration.mobileDisplayVariant.id||d.default(".cc-hero-carousel-configurator__option:first-child").click()},created:function(){this.mapLegacyConfiguration()}},St={extends:rt,props:{callerComponentType:{type:String,default:"icon"}},ready:function(){this.scenarioOptions={teaserWidth:{container:{name:"Content width",iconId:"tw_content-width",disabled:!1},"container-slider":{name:"Content width Slider",iconId:"tw_content-slider",disabled:!1}},desktopLayout:{5:{name:"5 in row",iconId:"dl_5",disabled:!1,teasersNum:5},6:{name:"6 in row",iconId:"dl_6",disabled:!1,teasersNum:6},7:{name:"7 in row",iconId:"dl_7",disabled:!1,teasersNum:7},8:{name:"8 in row",iconId:"dl_8",disabled:!1,teasersNum:8}},contentPlacement:{under:{name:"Text below image",iconId:"tl_under",disabled:!1,contentPlacement:!1}},mobileLayout:{"mobile-slider":{name:"Slider",iconId:"ml_slider",disabled:!1}}},this.availableScenarios=[["container","4","under",["mobile-slider"]],["container-slider","4","under",["mobile-slider"]],["container","5","under",["mobile-slider"]],["container-slider","5","under",["mobile-slider"]],["container","6","under",["mobile-slider"]],["container-slider","6","under",["mobile-slider"]],["container","7","under",["mobile-slider"]],["container-slider","7","under",["mobile-slider"]],["container","8","under",["mobile-slider"]],["container-slider","8","under",["mobile-slider"]]],this.configuration.teaserWidth&&!this.configuration.teaserWidth.name&&this.toggleOption("teaserWidth","container"),this.configuration.contentPlacement&&!this.configuration.contentPlacement&&this.toggleOption("contentPlacement","under"),this.configuration.mobileLayout&&!this.configuration.mobileLayout&&this.toggleOption("mobileLayout","mobile-slider")}},Ot={image:"",decodedImage:"",displayVariant:"1",colorScheme:"light",headline:"",subheadline:"",paragraph:"",ctaLabel:g.default("More"),href:"",sizeInfo:"",aspectRatio:""},Tt={mixins:[tt],components:{"action-button":y,"component-adder":x,"component-actions":w},template:'<div class="cc-image-teaser-legacy-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-image-teaser-legacy-configurator__section">\n            <h3 class="cc-image-teaser-legacy-configurator__subtitle">Teaser Width</h3>\n            <div class="cc-image-teaser-legacy-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-legacy-configurator__option--selected\': configuration.currentScenario.teaserWidth.id == optionId,\n                        \'cc-image-teaser-legacy-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-legacy-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.teaserWidth"\n                    @click="!option.disabled && toggleOption(\'teaserWidth\', optionId)">\n                    <div class="cc-image-teaser-legacy-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-legacy-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-legacy-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n\n        </section>\n        <section class="cc-image-teaser-legacy-configurator__section">\n            <h3 class="cc-image-teaser-legacy-configurator__subtitle">Desktop Layout</h3>\n            <div class="cc-image-teaser-legacy-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-legacy-configurator__option--selected\': configuration.currentScenario.desktopLayout.id == optionId,\n                        \'cc-image-teaser-legacy-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-legacy-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.desktopLayout"\n                    @click="!option.disabled && toggleOption(\'desktopLayout\', optionId)">\n                    <div class="cc-image-teaser-legacy-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-legacy-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-legacy-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-legacy-configurator__section">\n            <h3 class="cc-image-teaser-legacy-configurator__subtitle">Text Positioning</h3>\n            <div class="cc-image-teaser-legacy-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-legacy-configurator__option--selected\': configuration.currentScenario.textPositioning.id == optionId,\n                        \'cc-image-teaser-legacy-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-legacy-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.textPositioning"\n                    @click="!option.disabled && toggleOption(\'textPositioning\', optionId)">\n                    <div class="cc-image-teaser-legacy-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-legacy-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-legacy-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-legacy-configurator__section">\n            <h3 class="cc-image-teaser-legacy-configurator__subtitle">Mobile Layout</h3>\n            <div class="cc-image-teaser-legacy-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-legacy-configurator__option--selected\': configuration.currentScenario.mobileLayout.id == optionId,\n                        \'cc-image-teaser-legacy-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-legacy-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.mobileLayout"\n                    @click="!option.disabled && toggleOption(\'mobileLayout\', optionId)">\n                    <div class="cc-image-teaser-legacy-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-legacy-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-legacy-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-legacy-configurator__section">\n            <component-adder class="cc-component-adder cc-component-adder--static" v-show="!configuration.items.length">\n                <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-image-teaser-legacy-configurator__item-action-button" @click="createTeaserItem( 0 )">\n                    <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                        <use v-bind="{ \'xlink:href\': \'#icon_plus\' }"></use>\n                    </svg>\n                </button>\n            </component-adder>\n\n            <template v-for="item in configuration.items">\n                <div class="cc-image-teaser-legacy-configurator__item" id="cc-image-teaser-legacy-item-{{ $index }}">\n                    <component-adder class="cc-component-adder cc-component-adder--first" v-if="canAddTeaser()">\n                        <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-image-teaser-legacy-configurator__item-action-button" @click="createTeaserItem( $index )">\n                            <svg class="cc-action-button__icon cc-action-button__icon--size_300">\n                                <use xlink:href="#icon_plus"></use>\n                            </svg>\n                        </button>\n                    </component-adder>\n\n                    <div class="cc-image-teaser-legacy-configurator__item-content">\n                        <div v-bind:class="[ \'cc-image-teaser-legacy-configurator__item-col-left\', configuration.items[$index].image ? \'cc-image-teaser-legacy-configurator__item-col-left--look-image-uploaded\' : \'\' ]">\n                            <div class="cc-image-teaser-legacy-configurator__item-image-wrapper">\n                                <img :src="configuration.items[$index].image" class="cc-image-teaser-legacy-configurator__item-image" v-show="configuration.items[$index].image">\n                                <input type="hidden" v-model="configuration.items[$index].image">\n                                <input type="hidden" class="cc-image-teaser-legacy-configurator__image-url" id="image-teaser-img-{{$index}}">\n                                <svg class="cc-image-teaser-legacy-configurator__item-image-placeholder" v-show="!configuration.items[$index].image">\n                                    <use xlink:href="#icon_image-placeholder"></use>\n                                </svg>\n\n                                <div class="cc-image-teaser-legacy-configurator__item-actions">\n                                    <component-actions>\n                                        <template slot="cc-component-actions__buttons">\n                                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--up | cc-image-teaser-legacy-configurator__item-action-button" @click="moveImageTeaserUp( $index )" :class="[ isFirstImageTeaser( $index ) ? \'cc-action-button--look_disabled\' : \'\' ]" :disabled="isFirstImageTeaser( $index )">\n                                                <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                    <use xlink:href="#icon_arrow-up"></use>\n                                                </svg>\n                                            </button>\n                                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--down | cc-image-teaser-legacy-configurator__item-action-button" @click="moveImageTeaserDown( $index )" :class="[ isLastImageTeaser( $index ) ? \'cc-action-button--look_disabled\' : \'\' ]" :disabled="isLastImageTeaser( $index )">\n                                                <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                    <use xlink:href="#icon_arrow-down"></use>\n                                                </svg>\n                                            </button>\n                                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon | cc-component-actions__button cc-component-actions__button--upload-image | cc-image-teaser-legacy-configurator__item-action-button" @click="getImageUploader( $index )">\n                                                    <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                        <use xlink:href="#icon_upload-image"></use>\n                                                    </svg>\n                                                    {{ configuration.items[$index].image ? imageUploadedText : noImageUploadedText }}\n                                            </button>\n                                            <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--delete | cc-image-teaser-legacy-configurator__item-action-button" @click="deleteTeaserItem( $index )">\n                                                <svg class="cc-action-button__icon">\n                                                    <use xlink:href="#icon_trash-can"></use>\n                                                </svg>\n                                            </button>\n                                        </template>\n                                    </component-actions>\n                                </div>\n\n                            </div>\n                        </div>\n                        <div class="cc-image-teaser-legacy-configurator__item-col-right">\n                            <div class="cc-input cc-input--group">\n                                <div class="cc-input | cc-image-teaser-legacy-configurator__item-form-element">\n                                    <label for="cfg-it-item{{ $index }}-variant" class="cc-input__label">'.concat(g.default("Display variant"),':</label>\n                                    <select name="cfg-it-item{{ $index }}-variant" class="cc-input__select" id="cfg-it-item{{ $index }}-variant" v-model="configuration.items[$index].displayVariant">\n                                        <template v-for="(idx, scenario) in imageTeasersContentPositions">\n                                            <option value="{{ idx + 1 }}">').concat(g.default("{{ scenario }}"),'</option>\n                                        </template>\n                                    </select>\n                                </div>\n                                <div class="cc-input | cc-image-teaser-legacy-configurator__item-form-element">\n                                    <label for="cfg-it-item{{ $index }}-color-scheme" class="cc-input__label">').concat(g.default("Text color scheme"),':</label>\n                                    <select name="cfg-it-item{{ $index }}-color-scheme" class="cc-input__select" id="cfg-it-item{{ $index }}-color-scheme" v-model="configuration.items[$index].colorScheme">\n                                        <option value="light">').concat(g.default("Light"),'</option>\n                                        <option value="dark">').concat(g.default("Dark"),'</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class="cc-input | cc-image-teaser-legacy-configurator__item-form-element">\n                                <label for="cfg-hc-item{{ $index }}-headline" class="cc-input__label">').concat(g.default("Headline"),':</label>\n                                <input type="text" v-model="configuration.items[$index].headline" id="cfg-hc-item{{ $index }}-headline" class="cc-input__input">\n                            </div>\n                            <div class="cc-input | cc-image-teaser-legacy-configurator__item-form-element">\n                                <label for="cfg-hc-item{{ $index }}-subheadline" class="cc-input__label">').concat(g.default("Subheadline"),':</label>\n                                <input type="text" v-model="configuration.items[$index].subheadline" id="cfg-hc-item{{ $index }}-subheadline" class="cc-input__input">\n                            </div>\n                            <div class="cc-input | cc-image-teaser-legacy-configurator__item-form-element">\n                                <label for="cfg-hc-item{{ $index }}-paragraph" class="cc-input__label">').concat(g.default("Paragraph"),':</label>\n                                <textarea type="text" v-model="configuration.items[$index].paragraph" id="cfg-hc-item{{ $index }}-paragraph" class="cc-input__textarea"></textarea>\n                            </div>\n                            <div class="cc-input cc-input--group">\n                                <div class="cc-input | cc-image-teaser-legacy-configurator__item-form-element">\n                                    <label for="cfg-hc-item{{ $index }}-cta-label" class="cc-input__label">').concat(g.default("CTA label"),':</label>\n                                    <input type="text" v-model="configuration.items[$index].ctaLabel" id="cfg-hc-item{{ $index }}-cta-label" class="cc-input__input">\n                                </div>\n                                <div class="cc-input cc-input--type-addon | cc-image-teaser-legacy-configurator__item-form-element">\n                                    <label for="image-teaser-ctatarget-output-{{ $index }}" class="cc-input__label">').concat(g.default("CTA target link"),':</label>\n                                    <input type="text" class="cc-input__input | cc-image-teaser-legacy-configurator__cta-target-link" v-model="configuration.items[$index].href" id="image-teaser-ctatarget-output-{{ $index }}">\n                                    <span class="cc-input__addon | cc-image-teaser-legacy-configurator__widget-chooser-trigger" @click="openCtaTargetModal( $index )">\n                                        <svg class="cc-input__addon-icon">\n                                            <use xlink:href="#icon_link"></use>\n                                        </svg>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <component-adder class="cc-component-adder cc-component-adder--last" v-if="configuration.items.length && canAddTeaser()">\n                        <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-image-teaser-legacy-configurator__item-action-button" @click="createTeaserItem( $index + 1 )">\n                            <svg class="cc-action-button__icon cc-action-button__icon--size_300">\n                                <use xlink:href="#icon_plus"></use>\n                            </svg>\n                        </button>\n                    </component-adder>\n                </div>\n            </template>\n        </section>\n    </div>'),data:function(){return{imageUploadedText:g.default("Change"),noImageUploadedText:g.default("Upload"),scenarioOptions:{teaserWidth:{c:{name:"Container width",iconId:"tw_content-width",disabled:!1,teasersLimit:!0},w:{name:"Window width",iconId:"tw_window-width",disabled:!1,teasersLimit:!0},"c-s":{name:"Content width Slider",iconId:"tw_content-slider",disabled:!1,teasersLimit:!1},"w-s":{name:"Window width Slider",iconId:"tw_window-slider",disabled:!1,teasersLimit:!1}},desktopLayout:{1:{name:"1 in row",iconId:"dl_1",disabled:!1,teasersNum:1},2:{name:"2 in row",iconId:"dl_2",disabled:!1,teasersNum:2},3:{name:"3 in row",iconId:"dl_3",disabled:!1,teasersNum:3},4:{name:"4 in row",iconId:"dl_4",disabled:!1,teasersNum:4},6:{name:"6 in row",iconId:"dl_6",disabled:!1,teasersNum:6},8:{name:"8 in row",iconId:"dl_8",disabled:!1,teasersNum:8}},textPositioning:{over:{name:"Text over image",iconId:"tl_over",disabled:!1,textPosition:!0},under:{name:"Text below image",iconId:"tl_under",disabled:!1,textPosition:!1}},mobileLayout:{large:{name:"Large teaser",iconId:"ml_col",disabled:!1},slider:{name:"Slider",iconId:"ml_slider",disabled:!1},row:{name:"Teasers in row",iconId:"ml_2-2",disabled:!1},col:{name:"Teasers in column",iconId:"ml_col",disabled:!1},"1-2":{name:"Big, two small",iconId:"ml_1-2",disabled:!1},"2-2":{name:"2 in row, 2 rows",iconId:"ml_2-2",disabled:!1},"1-2-1":{name:"Big, two small, big",iconId:"ml_1-2",disabled:!1},"2-2-2":{name:"2 in row, 3 rows",iconId:"ml_2-2",disabled:!1}}},availableScenarios:[["c","1","over",["large"]],["c","2","over",["col","row","slider"]],["c","2","under",["col"]],["c","3","over",["col","slider","1-2"]],["c","3","under",["col"]],["c","4","over",["2-2","slider","1-2-1"]],["c","4","under",["col"]],["c","6","over",["2-2-2","slider"]],["c","6","under",["2-2-2","slider"]],["c","8","under",["slider"]],["w","1","over",["large"]],["w","2","over",["col","row","slider"]],["w","2","under",["col"]],["w","3","over",["col","slider","1-2"]],["w","3","under",["col"]],["w","4","over",["2-2","slider","1-2-1"]],["w","4","under",["col"]],["w-s","2","over",["slider"]],["w-s","2","under",["slider"]],["w-s","3","over",["slider"]],["w-s","3","under",["slider"]],["w-s","4","over",["slider"]],["w-s","4","under",["slider"]],["c-s","1","over",["slider"]],["c-s","2","over",["slider"]],["c-s","2","under",["slider"]],["c-s","3","over",["slider"]],["c-s","3","under",["slider"]],["c-s","4","over",["slider"]],["c-s","4","under",["slider"]],["c-s","6","under",["slider"]],["c-s","8","under",["slider"]]]}},props:{configuration:{type:Object,default:function(){return{items:[JSON.parse(JSON.stringify(Ot))],ignoredItems:[],currentScenario:{teaserWidth:{},desktopLayout:{},textPositioning:{},mobileLayout:{}}}}},assetsSrc:{type:String,default:""},uploaderBaseUrl:{type:String,default:""},imageEndpoint:{type:String,default:""},adminPrefix:{type:String,default:"admin"},ccConfig:{type:Object,default:function(){return{}}}},computed:{imageTeasersContentPositions:function(){var t=this.ccConfig.image_teasers_content_positions;return Object.keys(t).map((function(e){return t[e]}))}},events:{"component-configurator__save":function(){this.onSave()}},created:function(){void 0===this.configuration.ignoredItems&&(this.configuration.ignoredItems=[])},methods:{_collectPossibleOptions:function(t){var e={teaserWidth:{},desktopLayout:{},textPositioning:{},mobileLayout:{}};return t.forEach((function(t){e.teaserWidth[t[0]]=!0,e.desktopLayout[t[1]]=!0,e.textPositioning[t[2]]=!0,t[3].forEach((function(t){e.mobileLayout[t]=!0}))})),Object.keys(e).forEach((function(t){e[t]=Object.keys(e[t])})),e},_findPossibleOptions:function(t,e,n,i){var o=JSON.parse(JSON.stringify(this.availableScenarios));return t&&(o=o.filter((function(e){return e[0]===t}))),e&&(o=o.filter((function(t){return t[1]===e}))),n&&(o=o.filter((function(t){return!n||t[2]===n}))),i&&(o=(o=o.filter((function(t){return-1!==t[3].indexOf(i)}))).map((function(t){return t[3]=[i],t}))),this._collectPossibleOptions(o)},toggleOption:function(t,e){this.configuration.currentScenario[t].id?this.configuration.currentScenario[t]={}:(this.configuration.currentScenario[t]=this.scenarioOptions[t][e],this.configuration.currentScenario[t].id=e),this.togglePossibleOptions(),this.adjustVisibleItems()},adjustVisibleItems:function(){var t=this.configuration.items,e=this.configuration.currentScenario.desktopLayout.teasersNum;if(this.configuration.currentScenario.teaserWidth.teasersLimit&&t.length>e){var n=t.splice(e,t.length-e);this.configuration.ignoredItems=n.concat(this.configuration.ignoredItems)}else if(t.length<e){t.concat(this.configuration.ignoredItems.splice(0,e-t.length));for(var i=0;i<e-t.length;i++)t.push(JSON.parse(JSON.stringify(Ot)))}},togglePossibleOptions:function(){var t=this,e=this.configuration.currentScenario,n=this._findPossibleOptions(e.teaserWidth.id,e.desktopLayout.id,e.textPositioning.id,e.mobileLayout.id);Object.keys(this.scenarioOptions).forEach((function(e){Object.keys(t.scenarioOptions[e]).forEach((function(i){t.scenarioOptions[e][i].disabled=-1===n[e].indexOf(i)}))}))},canAddTeaser:function(){var t=this.configuration.items,e=this.configuration.currentScenario.teaserWidth.teasersLimit;return!e||t.length<e},getImageUploader:function(t){MediabrowserUtility.openDialog("".concat(this.uploaderBaseUrl,"target_element_id/image-teaser-img-").concat(t,"/"),"auto","auto",g.default("Insert File..."),{closed:!0})},imageUploadListener:function(){var t=this,e=!1;d.default(document).on("change",".cc-image-teaser-legacy-configurator__image-url",(function(n){e||(e=!0,t.onImageUploaded(n.target),setTimeout((function(){e=!1}),100))}))},onImageUploaded:function(t){var e=this,n=t.id.substr(t.id.lastIndexOf("-")+1),i=t.value.match("___directive/([a-zA-Z0-9]*)")[1],o=this.imageEndpoint.replace("{/encoded_image}",i);this.configuration.items[n].decodedImage=Base64?Base64.decode(i):window.atob(i);var c=new Image;c.onload=function(){var t=e.getAspectRatio(c.naturalWidth,c.naturalHeight);e.configuration.items[n].image=c.getAttribute("src"),e.configuration.items[n].sizeInfo="".concat(c.naturalWidth,"x").concat(c.naturalHeight,"px (").concat(t,")"),e.configuration.items[n].aspectRatio=t,setTimeout((function(){e.checkImageSizes(),e.onChange()}),400)},c.src=o},createTeaserItem:function(t){this.configuration.items.splice(t,0,JSON.parse(JSON.stringify(Ot))),this.onChange()},moveImageTeaserUp:function(t){var e=this;if(t>0){var n=d.default("#cc-image-teaser-legacy-item-".concat(t)),i=d.default("#cc-image-teaser-legacy-item-".concat(t-1));n.addClass("cc-image-teaser-legacy-configurator__item--animating").css("transform","translateY(".concat(-Math.abs(i.outerHeight(!0)),"px)")),i.addClass("cc-image-teaser-legacy-configurator__item--animating").css("transform","translateY(".concat(n.outerHeight(!0),"px )")),setTimeout((function(){e.configuration.items.splice(t-1,0,e.configuration.items.splice(t,1)[0]),e.onChange(),n.removeClass("cc-image-teaser-legacy-configurator__item--animating").css("transform",""),i.removeClass("cc-image-teaser-legacy-configurator__item--animating").css("transform","")}),400)}},moveImageTeaserDown:function(t){var e=this;if(t<this.configuration.items.length-1){var n=d.default("#cc-image-teaser-legacy-item-".concat(t)),i=d.default("#cc-image-teaser-legacy-item-".concat(t+1));n.addClass("cc-image-teaser-legacy-configurator__item--animating").css("transform","translateY(".concat(i.outerHeight(!0),"px)")),i.addClass("cc-image-teaser-legacy-configurator__item--animating").css("transform","translateY(".concat(-Math.abs(n.outerHeight(!0)),"px)")),setTimeout((function(){e.configuration.items.splice(t+1,0,e.configuration.items.splice(t,1)[0]),e.onChange(),n.removeClass("cc-image-teaser-legacy-configurator__item--animating").css("transform",""),i.removeClass("cc-image-teaser-legacy-configurator__item--animating").css("transform","")}),400)}},isFirstImageTeaser:function(t){return 0===t},isLastImageTeaser:function(t){return t===this.configuration.items.length-1},openCtaTargetModal:function(t){widgetTools.openDialog("".concat(window.location.origin,"/").concat(this.adminPrefix,"/admin/widget/index/filter_widgets/Link/widget_target_id/image-teaser-ctatarget-output-").concat(t,"/")),this.wWidgetListener(t)},widgetSetListener:function(){var t=this;d.default(".cc-image-teaser-legacy-configurator__cta-target-link").on("change",(function(){t.onChange()}))},wWidgetListener:function(t){var e=this;if("undefined"!=typeof wWidget&&""!==widgetTools.dialogWindow[0].innerHTML){var n=widgetTools.dialogWindow[0].querySelector("#insert_button");n.onclick=null,n.addEventListener("click",(function(){e.configuration.items[t].href="",wWidget.insertWidget()}))}else window.setTimeout((function(){e.wWidgetListener(t)}),300)},isPossibleToDelete:function(t){return(0!==t||this.configuration.items.length>1)&&""!==this.configuration.items[t].image},deleteTeaserItem:function(t){var e=this;h.default({content:g.default("Are you sure you want to delete this item?"),actions:{confirm:function(){e.configuration.items.splice(t,1),e.onChange()}}})},checkImageSizes:function(){for(var t=JSON.parse(JSON.stringify(this.configuration.items)).filter((function(t){return Boolean(t.aspectRatio)})),e=0;e<t.length;e++)if(t[e].aspectRatio!==t[0].aspectRatio)return m.default({title:g.default("Warning"),content:g.default("Images you have uploaded have different aspect ratio. This may cause this component to display wrong. We recommend to keep the same aspect ratio for all uploaded images.")}),!1;return!0},getGreatestCommonDivisor:function(t,e){return e?this.getGreatestCommonDivisor(e,t%e):t},getAspectRatio:function(t,e){var n=this.getGreatestCommonDivisor(t,e);return"".concat(t/n,":").concat(e/n)},cleanupConfiguration:function(){this.configuration.items=this.configuration.items.filter((function(t){return""!==t.image})),this.configuration.ignoredItems=this.configuration.ignoredItems.filter((function(t){return""!==t.image})),this.onChange()}},ready:function(){this.imageUploadListener(),this.widgetSetListener()}},Pt={mixins:[tt],template:'<div class="cc-magento-product-grid-teasers-configurator | {{ class }}">\n        <component-adder class="cc-component-adder cc-component-adder--static" v-show="!configuration.teasers.length">\n            <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-magento-product-grid-teasers-configurator__item-action-button" @click="createNewTeaser( 0 )">\n                <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                    <use xlink:href="#icon_plus"></use>\n                </svg>\n            </button>\n        </component-adder>\n\n        <template v-for="item in configuration.teasers">\n            <div class="cc-magento-product-grid-teasers-configurator__item" id="cc-magento-pg-teaser-{{ $index }}">\n                <component-adder class="cc-component-adder cc-component-adder--first">\n                    <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-magento-product-grid-teasers-configurator__item-action-button" @click="createNewTeaser( $index )">\n                        <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                            <use xlink:href="#icon_plus"></use>\n                        </svg>\n                    </button>\n                </component-adder>\n\n                <teaser-configurator :teaser-index="$index" :configuration="item[$index]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'magento-product-grid-teasers\'" :products-per-page="productsPerPage" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf($index) != -1"></teaser-configurator>\n\n                <component-adder class="cc-component-adder cc-component-adder--last">\n                    <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-magento-product-grid-teasers-configurator__item-action-button" @click="createNewTeaser( $index + 1 )">\n                        <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                            <use xlink:href="#icon_plus"></use>\n                        </svg>\n                    </button>\n                </component-adder>\n            </div>\n        </template>\n\n        <div class="cc-magento-product-grid-teasers-configurator__modal" v-el:error-modal></div>\n    </div>',components:{"action-button":y,"component-adder":x,"component-actions":w,"teaser-configurator":st},props:{configuration:{type:Object,default:function(){return{teasers:[JSON.parse(JSON.stringify(at))],json:[]}}},productsPerPage:{type:String,default:"30"},adminPrefix:{type:String,default:"admin"},uploaderBaseUrl:{type:String,default:""},imageEndpoint:{type:String,default:""},componentCcEntry:{type:String,default:"image_teaser"}},data:function(){return{invalidVideoPlaceholderTeaserIndexes:[],configuration:this.getInitialConfiguration()}},events:{"component-configurator__save":function(){this.configuration.isError=!1,this._validateVideoPlaceholders(),this._collectTeasersCssClasses(),this._collectComponentCssClasses(),this.generateTeasersConfig(),this.onSave()}},methods:{getInitialConfiguration:function(){var t=this;return this.configuration||(this.configuration={teasers:[JSON.parse(JSON.stringify(at))]}),Object.values(this.configuration.teasers).filter((function(e,n){return e.decodedImage?t.updateTeaser(e,n):e})),null==this.configuration.scenario&&this.$set("configuration.scenario.contentPlacement.id","over"),this.configuration},updateTeaser:function(t,e){var n=this,i=v({},t);this.configuration.teasers.splice(e,1),this.createNewTeaser(e),Object.entries(i).map((function(t){if("colorScheme"===t[0]&&(n.configuration.teasers[e].optimizers.color_scheme=t[1]),"image"===t[0]&&(n.configuration.teasers[e].image.raw=t[1]),"decodedImage"===t[0]&&(n.configuration.teasers[e].image.decoded=t[1]),"ctaLabel"===t[0]&&(n.configuration.teasers[e].cta.label=t[1]),"href"===t[0]&&(n.configuration.teasers[e].cta.href=t[1]),"headline"===t[0]&&(n.configuration.teasers[e].slogan=t[1]),"subheadline"===t[0]&&(n.configuration.teasers[e].description=t[1]),"paragraph"===t[0]&&(n.configuration.teasers[e].description+="<br>"+t[1]),"displayVariant"===t[0])switch(t[1]){case"variant-1":n.configuration.teasers[e].content_align.x=1,n.configuration.teasers[e].content_align.y=2;break;case"variant-2":n.configuration.teasers[e].content_align.x=1,n.configuration.teasers[e].content_align.y=3;break;case"variant-3":n.configuration.teasers[e].content_align.x=2,n.configuration.teasers[e].content_align.y=2;break;case"variant-3":n.configuration.teasers[e].content_align.x=2,n.configuration.teasers[e].content_align.y=3;break;default:n.configuration.teasers[e].content_align.x=1,n.configuration.teasers[e].content_align.y=1}"position"===t[0]&&(n.configuration.teasers[e].position=t[1]),"row"===t[0]&&(n.configuration.teasers[e].row=t[1]),"size"===t[0]&&(n.configuration.teasers[e].size=t[1]),"sizeSelect"===t[0]&&(n.configuration.teasers[e].sizeSelect=t[1]),"isAvailableForMobile"===t[0]&&(n.configuration.teasers[e].isAvailableForMobile=t[1])}))},createNewTeaser:function(t){this.configuration.teasers.splice(t,0,JSON.parse(JSON.stringify(at))),this.onChange()},cleanupConfiguration:function(){var t=this.configuration.teasers.filter((function(t){return""!==t.image}));this.configuration.teasers=t,this.onChange()},_collectTeasersCssClasses:function(){if(null!=this.configuration.teasers){var t=this._getCustomCssFields(this.ccConfig.teaser.tabs);this.configuration.teasers.forEach((function(e,n){var i=[];t.forEach((function(t){e[t]&&"string"==typeof e[t]&&i.push(e[t])})),e.cc_css_classes=i.join(" ")}))}},generateTeasersConfig:function(){this.configuration.json=[];for(var t=0;t<this.configuration.teasers.length;t++){var e={id:t+1,mobile:Number(this.configuration.teasers[t].isAvailableForMobile),size:{x:Number(this.configuration.teasers[t].size.x),y:Number(this.configuration.teasers[t].size.y)},gridPosition:{x:this.configuration.teasers[t].position,y:Number(this.configuration.teasers[t].row)}};this.configuration.json.push(e)}},_validateVideoPlaceholders:function(){var t=this;this.invalidVideoPlaceholderTeaserIndexes=[],this.configuration.teasers.forEach((function(e,n){e.video&&e.video.url.length&&!e.image.raw&&(t.invalidVideoPlaceholderTeaserIndexes.push(n),t.configuration.isError=!0)}))}}},$t={mixins:[tt],template:'<form class="cc-paragraph-configurator {{ classes }} | {{ mix }}" {{ attributes }} @submit.prevent="onSave">\n\n        <div class="cc-paragraph-configurator__error" v-text="tempConfiguration.errorMessage" v-show="tempConfiguration.errorMessage">\n        </div>\n\n        <section class="cc-paragraph-configurator__section cc-paragraph-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.paragraph != null && ccConfig.paragraph.custom_sections != null" v-for="section in ccConfig.paragraph.custom_sections">\n            <h3 class="cc-paragraph-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-paragraph-configurator__section">\n            <h3 class="cc-paragraph-configurator__subtitle">'.concat(g.default("Paragraph width"),'</h3>\n            <div class="cc-paragraph-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-paragraph-configurator__option--selected\': configuration.scenarios.reading.id == optionId,\n                    }"\n                    class="cc-paragraph-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.reading"\n                    @click="toggleOption(\'reading\', optionId)">\n                    <div class="cc-paragraph-configurator__option-wrapper">\n                        <svg class="cc-paragraph-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-paragraph-configurator__option-name">\n                        ').concat(g.default("{{ option.name }}"),'\n                    </p>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-paragraph-configurator__section">\n            <div class="cc-input">\n                <label for="input-cfg-title" class="cc-input__label">').concat(g.default("Title"),':</label>\n                <input type="text" name="cfg-title" v-model="configuration.title" id="input-cfg-title" class="cc-input__input cc-input__input--limited-width" maxlength="100">\n            </div>\n            <div class="cc-input" v-if="isColumnsConfigAvailable()">\n                <label for="input-cfg-columns" class="cc-input__label">').concat(g.default("Number of columns"),':</label>\n                <select name="input-cfg-columns" class="cc-input__select | cc-paragraph-configurator__select" id="input-cfg-columns" v-model="configuration.columns">\n                    <option value="none">').concat(g.default("Don't split content - display full width"),'</option>\n                    <option value="2">').concat(g.default("Split content into 2 columns"),'</option>\n                    <option value="3">').concat(g.default("Split content into 3 columns"),'</option>\n                    <option value="4">').concat(g.default("Split content into 4 columns"),'</option>\n                </select>\n                <div class="admin__field-note cc-input__note">\n                    <span>').concat(g.default("Defines the way of content display. Content can be splitted into defined number of columns. This setting has no effect on small screen resolutions (such as smartphones) where content is always displayed in one column."),'</span>\n                </div>\n            </div>\n            <div class="cc-input">\n                <label for="textarea-cfg-paragraph" class="cc-input__label cc-input__label--look-top-align">').concat(g.default("HTML"),':</label>\n\n                <div class="buttons-set | cc-paragraph-configurator__wysiwyg-buttons">\n                    <button type="button" class="scalable action-show-hide" id="toggle-wysiwyg">').concat(g.default("Show / Hide Editor"),'</button>\n                    <button type="button" class="scalable action-add-widget plugin" @click="openWidgetModal()" v-show="!isEditorVisible">').concat(g.default("Insert Widget"),'...</button>\n                    <button type="button" class="scalable action-add-image plugin" @click="openMediaModal()" v-show="!isEditorVisible">').concat(g.default("Insert Image"),'...</button>\n                    <button type="button" class="scalable add-variable plugin" @click="openMagentoVariablesModal()" v-show="!isEditorVisible">').concat(g.default("Insert Variable"),'...</button>\n                </div>\n\n                <textarea name="cfg-paragraph" v-model="configuration.content" id="textarea-cfg-paragraph" class="cc-input__textarea | cc-paragraph-configurator__textarea"></textarea>\n            </div>\n        </section>\n    </form>'),props:{configuration:{type:Object,default:function(){return{customCssClass:"",title:"",columns:"none",content:"",scenarios:{reading:{}}}}},restToken:{type:String,default:""},wysiwygConfig:{type:String,default:""},uploaderBaseUrl:{type:String,default:""},adminPrefix:{type:String,default:""},assetsUrl:{type:String,default:""},xmlConfigEntry:{type:String,default:"paragraph"}},data:function(){return{tempConfiguration:{identifier:"",title:"",content:"",errorMessage:""},isEditorVisible:!0,editor:void 0,scenarioOptions:{reading:{full:{name:"Container width",iconId:"tw_content-width-text"},optimal:{name:"Optimal reading width",iconId:"tw_optimal-reading"}}}}},ready:function(){var t=this;""!==this.wysiwygConfig&&(this.wysiwygCfg=JSON.parse(this.wysiwygConfig),this.wysiwygCfg.height="300px"),d.default("body").one().loadingPopup({timeout:!1}).trigger("hideLoadingPopup"),this.configuration.blockId&&!this.configuration.migrated?(d.default("body").trigger("showLoadingPopup"),this.$http({headers:{Accept:"application/json",Authorization:this.restToken},method:"get",url:"".concat(window.location.origin,"/rest/all/V1/cmsBlock/").concat(this.configuration.blockId)}).then((function(e){var n="string"==typeof e.data?JSON.parse(e.data):e.data;d.default("body").trigger("hideLoadingPopup"),t.$set("configuration.content",n.content),t.$set("configuration.title",n.title),t.wysiwygCfg&&t.initWysiwyg()}),(function(){d.default("body").trigger("hideLoadingPopup")}))):this.wysiwygCfg&&this.initWysiwyg(),this.updateConfigurationProp()},events:{"component-configurator__save":function(){this.$set("configuration.migrated",!0),this.$set("configuration.content",this.fixMarkup(this.configuration.content)),this.configuration.blockId&&delete this.configuration.blockId,this.onSave()}},methods:{stripSpaces:function(t){var e=t.split(" ").join("-").toLowerCase();this.tempConfiguration.identifier=e},openWidgetModal:function(){widgetTools.openDialog("".concat(this.wysiwygCfg.plugins[1].options.window_url,"widget_target_id/textarea-cfg-paragraph/"))},openMediaModal:function(){MediabrowserUtility.openDialog("".concat(this.uploaderBaseUrl,"target_element_id/textarea-cfg-paragraph/"),"auto","auto",g.default("Insert File..."),{closed:!0})},openMagentoVariablesModal:function(){MagentovariablePlugin.loadChooser(this.wysiwygCfg.plugins[2].options.url,"textarea-cfg-paragraph")},initWysiwyg:function(){var t,e=this,n=JSON.parse(this.wysiwygConfig);require(["mage/adminhtml/wysiwyg/tiny_mce/setup"],(function(){(t=new wysiwygSetup("textarea-cfg-paragraph",n)).setup("exact"),Event.observe("toggle-wysiwyg","click",function(){t.toggle(),e.isEditorVisible=!e.isEditorVisible}.bind(t)),e.isEditorVisible=!0}))},toggleOption:function(t,e){this.configuration.scenarios[t]=this.scenarioOptions[t][e],this.configuration.scenarios[t].id=e},isColumnsConfigAvailable:function(){return"optimal"!==this.configuration.scenarios.reading.id},updateConfigurationProp:function(){var t=this.$options.props.configuration.default();this.configuration=d.default.extend({},t,this.configuration,!0)},fixMarkup:function(t){return t.replace(/\/>/g,">").replace(/&quot;/g,"'")}}},Lt={mixins:[tt],template:'<form class="cc-product-carousel-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-product-carousel-configurator__section cc-product-carousel-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.product_carousel != null && ccConfig.product_carousel.custom_sections != null" v-for="section in ccConfig.product_carousel.custom_sections">\n            <h3 class="cc-product-carousel-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label">'.concat(g.default("Categories"),':</label>\n            <input type="hidden" v-model="configuration.category_id" @change="onChange" id="cp-products-carousel">\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label" for="cfg-pc-skus">').concat(g.default("SKUs"),':</label>\n            <input type="text" name="cfg-pc-skus" class="cc-input__input" id="cfg-pc-skus" v-model="configuration.skus" @change="onChange">\n        </div>\n        <div class="cc-input cc-input--type-inline cc-input--type-hint">\n            <label class="cc-input__label"> </label>\n            <span class="cc-input__hint cc-input__hint--under-field">').concat(g.default("Multiple, comma-separated"),'</span>\n        </div>\n        <div class="cc-input cc-input--type-inline cc-input--type-hint" v-if="configuration.skus.length">\n            <label class="cc-input__label"> </label>\n            <span class="cc-input__hint cc-input__hint--under-field cc-input__hint--info-mark">').concat(g.default("Providing list of comma separated SKUs will disable any filtering and sorting configured for that component.  Category (if specified) will also not be taken into account. Only products with specified SKUs will be displayed in exactly the same order as they are provided in SKUs field."),'</span>\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label" for="cfg-pc-dataprovider">').concat(g.default("Custom Data Provider"),':</label>\n            <input type="text" name="cfg-pc-dataprovider" class="cc-input__input" id="cfg-pc-dataprovider" v-model="configuration.class_overrides.dataProvider" @change="onChange">\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-pc-filter" class="cc-input__label">').concat(g.default("Filter"),':</label>\n            <select name="cfg-pc-filter" class="cc-input__select" id="cfg-pc-filter" v-model="configuration.filter" @change="onChange">\n                <option value="">').concat(g.default("No filter"),'</option>\n                <template v-for="filter in productCollectionsFilters">\n                    <option value="{{ filter.value }}" :selected="filter.value === configuration.filter">{{ filter.label }}</option>\n                </template>\n            </select>\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-pc-order-by" class="cc-input__label">').concat(g.default("Order by"),':</label>\n            <select name="cfg-pc-order-by" class="cc-input__select" id="cfg-pc-order-by" v-model="configuration.order_by" @change="onChange">\n                <option value="">').concat(g.default("Not specified"),'</option>\n                <template v-for="sorter in productCollectionsSorters">\n                    <option value="{{ sorter.value }}" :selected="sorter.value === configuration.order_by">{{ sorter.label }}</option>\n                </template>\n            </select>\n            <select name="cfg-pc-order-type" class="cc-input__select" v-model="configuration.order_type" @change="onChange">\n                <option value="ASC">').concat(g.default("Ascending"),'</option>\n                <option value="DESC">').concat(g.default("Descending"),'</option>\n            </select>\n        </div>\n\n        <div class="cc-input cc-input--type-inline">\n            <label for="cfg-pc-order-by" class="cc-input__label">').concat(g.default("Show "),':</label>\n            <select name="cfg-pc-limit" class="cc-input__select" id="cfg-pc-limit" v-model="configuration.limit" @change="onChange">\n                <option value="20">20 ').concat(g.default("products "),'</option>\n                <option value="40">40 ').concat(g.default("products "),'</option>\n                <option value="60">60 ').concat(g.default("products "),'</option>\n                <option value="80">80 ').concat(g.default("products "),'</option>\n                <option value="100">100 ').concat(g.default("products "),"</option>\n            </select>\n        </div>\n    </form>"),props:{configuration:{type:Object,default:function(){return{customCssClass:"",category_id:"",filter:"",order_by:"creation_date",order_type:"DESC",limit:20,skus:"",class_overrides:{dataProvider:""}}}},categoriesDataUrl:{type:String,default:""},productCollectionsSorters:{type:[String,Array],default:""},productCollectionsFilters:{type:[String,Array],default:""},xmlConfigEntry:{type:String,default:"product_carousel"}},data:function(){return{categoryPicker:void 0}},events:{"component-configurator__save":function(){""===this.configuration.class_overrides.dataProvider&&delete this.configuration.class_overrides,this.onSave()}},ready:function(){var t=this;this.productCollectionsSorters=""!==this.productCollectionsSorters?JSON.parse(this.productCollectionsSorters):[],this.productCollectionsFilters=""!==this.productCollectionsFilters?JSON.parse(this.productCollectionsFilters):[],this.configuration.class_overrides||(this.configuration.class_overrides={dataProvider:""}),d.default("body").trigger("showLoadingPopup"),this.$http.get(this.categoriesDataUrl).then((function(e){t.categoryPicker=new bt(d.default("#cp-products-carousel"),JSON.parse(e.body),{multiple:!1}),d.default("body").trigger("hideLoadingPopup")}))}},Et={id:"",additional_css_class:"",title:"",description:"",options:[{label:"",image:"",attributes:[{code:"",values:["",""]}],category_id:"",next_step:""},{label:"",image:"",attributes:[{code:"",range:["",""]}],category_id:"",next_step:""}]},Nt={mixins:[tt],components:{"action-button":y,"component-adder":x,"component-actions":w,"product-finder-preview":U},template:'<div class="cc-product-finder-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-product-finder-configurator__section cc-product-finder-configurator__section--{{section.label | sectionID}} cc-product-finder-configurator__section--custom-section" v-if="ccConfig.product_finder != null && ccConfig.product_finder.custom_sections != null" v-for="section in ccConfig.product_finder.custom_sections">\n            <h3 class="cc-product-finder-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-product-finder-configurator__custom-sections">\n                <div class="cc-custom-fields">\n                    <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                        <component\n                            :is="\'custom-element-\' + field.type"\n                            :configuration="configuration"\n                            :field-configuration="field"\n                        ></component>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-product-finder-configurator__section cc-product-finder-configurator__section--styled">\n            <h3 class="cc-product-finder-configurator__subtitle">{{ \'Default settings\' | translate }}:</h3>\n            <div class="cc-product-finder-configurator__global-options">\n                <div class="cc-input | cc-product-finder-configurator__global-option">\n                    <label for="cfg-pf-layout-m" class="cc-input__label | cc-product-finder-configurator__section-option-label">{{ \'Mobile layout\' | translate }}:</label>\n                    <select name="cfg-pf-layout-m" class="cc-input__select" id="cfg-pf-layout-m" v-model="configuration.optionsPerRow.mobile" @change="onChange">\n                        <option value="1">{{ \'1 option per row\' | translate }}</option>\n                        <option value="2">{{ \'2 options per row\' | translate }}</option>\n                        <option value="3">{{ \'3 options per row\' | translate }}</option>\n                    </select>\n                </div>\n                <div class="cc-input | cc-product-finder-configurator__global-option">\n                    <label for="cfg-pf-layout-t" class="cc-input__label | cc-product-finder-configurator__section-option-label">{{ \'Tablet layout\' | translate }}:</label>\n                    <select name="cfg-pf-layout-t" class="cc-input__select" id="cfg-pf-layout-t" v-model="configuration.optionsPerRow.tablet" @change="onChange">\n                        <option value="2">{{ \'2 options per row\' | translate }}</option>\n                        <option value="3">{{ \'3 options per row\' | translate }}</option>\n                        <option value="4">{{ \'4 options per row\' | translate }}</option>\n                    </select>\n                </div>\n                <div class="cc-input | cc-product-finder-configurator__global-option">\n                    <label for="cfg-pf-layout-d" class="cc-input__label | cc-product-finder-configurator__section-option-label">{{ \'Desktop layout\' | translate }}:</label>\n                    <select name="cfg-pf-layout-d" class="cc-input__select" id="cfg-pf-layout-d" v-model="configuration.optionsPerRow.desktop" @change="onChange">\n                        <option value="3">{{ \'3 options per row\' | translate }}</option>\n                        <option value="4">{{ \'4 options per row\' | translate }}</option>\n                        <option value="5">{{ \'5 options per row\' | translate }}</option>\n                        <option value="6">{{ \'6 options per row\' | translate }}</option>\n                    </select>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-product-finder-configurator__section">\n            <component-adder class="cc-component-adder cc-component-adder--static" v-show="!configuration.steps.length">\n                <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-component-adder__button | cc-product-finder-configurator__item-action-button" @click="createStep(0)">\n                    <svg class="cc-action-button__icon cc-action-button__icon--size_100 | cc-component-adder__button-icon">\n                        <use v-bind="{ \'xlink:href\': \'#icon_plus\' }"></use>\n                    </svg>\n                </button>\n            </component-adder>\n\n            <template v-for="step in configuration.steps">\n                <div class="cc-product-finder-configurator__step" id="cc-product-finder-step-{{ $index }}">\n                    <component-adder class="cc-component-adder cc-component-adder--first">\n                        <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-product-finder-configurator__item-action-button" @click="createStep($index)">\n                            <svg class="cc-action-button__icon cc-action-button__icon--size_300">\n                                <use xlink:href="#icon_plus"></use>\n                            </svg>\n                        </button>\n                    </component-adder>\n\n                    <div class="cc-product-finder-configurator__step-content">\n                        <div :class="[ componentConfigurationErrors[$index] ? \'cc-product-finder-configurator__preview cc-product-finder-configurator__preview--error\' : \'cc-product-finder-configurator__preview\' ]">\n                            <div class="cc-product-finder-configurator__error" v-if="componentConfigurationErrors[$index]">\n                                {{ componentConfigurationErrors[$index] }}\n                            </div>\n\n                            <template v-if="!componentConfigurationErrors[$index]">\n                                <product-finder-preview :configuration="configuration" :step-index="$index" :is-configurator-preview="true" :image-endpoint="imageEndpoint"></product-finder-preview>\n                            </template>\n\n                            <div class="cc-product-finder-configurator__step-actions">\n                                <component-actions>\n                                    <template slot="cc-component-actions__buttons">\n                                        <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--up | cc-product-finder-configurator__item-action-button" @click="moveStepUp($index)" :class="[ isFirstStep($index) ? \'cc-action-button--look_disabled\' : \'\' ]" :disabled="isFirstStep($index)">\n                                            <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                <use xlink:href="#icon_arrow-up"></use>\n                                            </svg>\n                                        </button>\n                                        <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--down | cc-product-finder-configurator__item-action-button" @click="moveStepDown( $index )" :class="[ isLastStep($index) ? \'cc-action-button--look_disabled\' : \'\' ]" :disabled="isLastStep($index)">\n                                            <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                <use xlink:href="#icon_arrow-down"></use>\n                                            </svg>\n                                        </button>\n                                        <button is="action-button" class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--delete | cc-product-finder-configurator__item-action-button" @click="deleteStep($index)">\n                                            <svg class="cc-action-button__icon">\n                                                <use xlink:href="#icon_trash-can"></use>\n                                            </svg>\n                                        </button>\n                                    </template>\n                                </component-actions>\n                            </div>\n                        </div>\n\n                        <div class="cc-input | cc-product-finder-configurator__source">\n                            <div class="buttons-set">\n                                <button type="button" class="scalable action-add-image plugin" @click="getImageUploader($index)">{{ \'Insert Image\' | translate }}...</button>\n                            </div>\n                            <textarea class="cc-input__textarea | cc-product-finder-configurator__editor" id="cfg-pf-step{{ $index }}-sourcefield" @keydown="saveCaretPosition($event)" @click="saveCaretPosition($event)" v-model="step | prettify $index"></textarea>\n                            <input type="hidden" class="cc-product-finder-configurator__imgholder" data-step-index="{{$index}}" id="pf-imgholder-{{$index}}" />\n                        </div>\n                    </div>\n\n                    <component-adder class="cc-component-adder cc-component-adder--last" v-if="configuration.steps.length">\n                        <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-product-finder-configurator__item-action-button" @click="createStep( $index + 1 )">\n                            <svg class="cc-action-button__icon cc-action-button__icon--size_300">\n                                <use xlink:href="#icon_plus"></use>\n                            </svg>\n                        </button>\n                    </component-adder>\n                </div>\n            </template>\n        </section>\n    </div>',events:{"component-configurator__save":function(){this.$set("configuration.showErrorAlert",!0),this.configuration.isError=!1;for(var t=0,e=this.componentConfigurationErrors;t<e.length;t++){e[t].length&&(this.configuration.isError=!0)}this.onSave()}},props:{configuration:{type:Object,default:function(){return{customCssClass:"",optionsPerRow:{mobile:1,tablet:3,desktop:6},steps:[JSON.parse(JSON.stringify(Et))],isError:!1}}},uploaderBaseUrl:{type:String,default:""},imageEndpoint:{type:String,default:""},xmlConfigEntry:{type:String,default:"product_finder"}},data:function(){return{componentConfigurationErrors:this.prepareComponentErrorsArray(),caretPosition:1}},filters:{prettify:{read:function(t,e){return this.componentConfigurationErrors[e].length?t:JSON.stringify(t,null,2)},write:function(t,e,n){var i;try{i=JSON.parse(t)}catch(t){t.hasOwnProperty("message")?this.setError(n,t.message):this.setError(n,JSON.stringify(t))}return i?(this.clearError(n),i):t}},translate:function(t){return d.default.mage.__(t)}},methods:{setError:function(t,e){this.componentConfigurationErrors.$set(t,e)},clearError:function(t){this.componentConfigurationErrors.$set(t,"")},createStep:function(t){this.configuration.steps.splice(t,0,JSON.parse(JSON.stringify(Et))),this.componentConfigurationErrors.splice(t,0,"")},deleteStep:function(t){var e=this;h.default({content:d.default.mage.__("Are you sure you want to delete this step?"),actions:{confirm:function(){e.configuration.steps.splice(t,1),e.componentConfigurationErrors.splice(t,1)}}})},prepareComponentErrorsArray:function(){for(var t=[],e=0,n=this.configuration.steps;e<n.length;e++)n[e],t.push("");return t},getImageUploader:function(t){MediabrowserUtility.openDialog("".concat(this.uploaderBaseUrl,"target_element_id/pf-imgholder-").concat(t),"auto","auto",d.default.mage.__("Insert File..."),{closed:!0})},imageUploadListener:function(){var t=this,e=!1;d.default(document).on("change",".cc-product-finder-configurator__imgholder",(function(n){e||(e=!0,t.setImageUrl(n),setTimeout((function(){e=!1}),100))}))},setImageUrl:function(t){var e=t.target,n=e.value.match("___directive/([a-zA-Z0-9]*)")[1],i=window.atob(n),o=e.previousElementSibling,c=o.value,a=i.replace(/\"/g,'\\"');o.value=c.substr(0,this.caretPosition)+a+c.substr(this.caretPosition),d.default(o).trigger("change")},saveCaretPosition:function(t){var e=t.target;this.caretPosition=e.selectionStart||0},moveStepUp:function(t){var e=this;if(t>0){var n=d.default("#cc-product-finder-step-".concat(t)),i=d.default("#cc-product-finder-step-".concat(t-1));n.addClass("cc-product-finder-configurator__step--animating").css("transform","translateY(".concat(-Math.abs(i.outerHeight(!0)),"px)")),i.addClass("cc-product-finder-configurator__step--animating").css("transform","translateY(".concat(n.outerHeight(!0),"px)")),setTimeout((function(){e.configuration.steps.splice(t-1,0,e.configuration.steps.splice(t,1)[0]),n.removeClass("cc-product-finder-configurator__step--animating").css("transform",""),i.removeClass("cc-product-finder-configurator__step--animating").css("transform","")}),400)}},moveStepDown:function(t){var e=this;if(t<this.configuration.steps.length-1){var n=d.default("#cc-product-finder-step-".concat(t)),i=d.default("#cc-product-finder-step-".concat(t+1));n.addClass("cc-product-finder-configurator__step--animating").css("transform","translateY(".concat(i.outerHeight(!0),"px)")),i.addClass("cc-product-finder-configurator__step--animating").css("transform","translateY(".concat(-Math.abs(n.outerHeight(!0)),"px)")),setTimeout((function(){e.configuration.steps.splice(t+1,0,e.configuration.steps.splice(t,1)[0]),n.removeClass("cc-product-finder-configurator__step--animating").css("transform",""),i.removeClass("cc-product-finder-configurator__step--animating").css("transform","")}),400)}},isFirstStep:function(t){return 0===t},isLastStep:function(t){return t===this.configuration.steps.length-1}},ready:function(){this.imageUploadListener()}},Dt={mixins:[tt],components:{"action-button":y,"component-actions":w,"teaser-configurator":st},template:'<div class="cc-products-grid-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-products-grid-configurator__section cc-products-grid-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.products_grid != null && ccConfig.products_grid.custom_sections != null" v-for="section in ccConfig.products_grid.custom_sections">\n            <h3 class="cc-products-grid-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-hero-carousel-configurator__custom-sections">\n                <div class="cc-custom-fields">\n                    <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                        <component\n                            :is="\'custom-element-\' + field.type"\n                            :configuration="configuration"\n                            :field-configuration="field"\n                        ></component>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-products-grid-configurator__section">\n            <h3 class="cc-products-grid-configurator__subtitle">'.concat(g.default("Data source"),':</h3>\n            <div class="cc-products-grid-configurator__scenario-options cc-products-grid-configurator__scenario-options--inputs">\n                <div class="cc-input cc-input--type-inline | cc-products-grid-configurator__section-option">\n                    <label for="cfg-pg-category" class="cc-input__label | cc-products-grid-configurator__section-option-label">').concat(g.default("Category ID"),':</label>\n                    <select class="cc-input__select tmp-select" style="width:25em">\n                        <option>').concat(g.default("Select..."),'</option>\n                    </select>\n                    <input type="hidden" name="cfg-pg-category-select" class="cc-input__input | cc-products-grid-configurator__form-input" id="cfg-pg-category" v-model="configuration.category_id" @change="onChange">\n                </div>\n                <div class="cc-input cc-input--type-inline | cc-products-grid-configurator__section-option">\n                    <label for="cfg-pg-filter" class="cc-input__label | cc-products-grid-configurator__section-option-label">').concat(g.default("Filter"),':</label>\n                    <select name="cfg-pg-filter" class="cc-input__select" id="cfg-pg-filter" v-model="configuration.filter" @change="onChange">\n                        <option value="">').concat(g.default("No filter"),'</option>\n                        <template v-for="filter in productCollectionsFilters">\n                            <option value="{{ filter.value }}" :selected="filter.value === configuration.filter">{{ filter.label }}</option>\n                        </template>\n                    </select>\n                </div>\n                <div class="cc-input | cc-products-grid-configurator__section-option">\n                    <label for="cfg-pg-skus" class="cc-input__label">').concat(g.default("SKUs"),':</label>\n                    <input type="text" name="cfg-pg-skus" class="cc-input__input" id="cfg-pg-skus" v-model="configuration.skus" @change="onChange">\n                    <div class="cc-input__hint">').concat(g.default("Multiple, comma-separated"),'</div>\n                </div>\n                <div class="cc-input cc-input--type-inline | cc-products-grid-configurator__section-option">\n                    <label for="cfg-pg-order-by" class="cc-input__label | cc-products-grid-configurator__section-option-label">').concat(g.default("Order by"),':</label>\n                    <select name="cfg-pg-order-by" class="cc-input__select" id="cfg-pg-order-by" v-model="configuration.order_by" @change="onChange">\n                        <option value="">').concat(g.default("Not specified"),'</option>\n                        <template v-for="sorter in productCollectionsSorters">\n                            <option value="{{ sorter.value }}" :selected="sorter.value === configuration.order_by">{{ sorter.label }}</option>\n                        </template>\n                    </select>\n                    <select name="cfg-pg-order-type" class="cc-input__select" v-model="configuration.order_type" @change="onChange">\n                        <option value="ASC">').concat(g.default("Ascending"),'</option>\n                        <option value="DESC">').concat(g.default("Descending"),'</option>\n                    </select>\n                </div>\n                <div class="cc-input | cc-products-grid-configurator__section-option">\n                    <label for="cfg-pg-dataprovider" class="cc-input__label">').concat(g.default("Custom Data Provider"),':</label>\n                    <input type="text" name="cfg-pg-dataprovider" class="cc-input__input" id="cfg-pg-dataprovider" v-model="configuration.class_overrides.dataProvider" @change="onChange">\n                </div>\n                <div class="cc-input__hint cc-input__hint--info-mark" v-if="configuration.skus.length">\n                    ').concat(g.default("Providing list of comma separated SKUs will disable any filtering and sorting configured for that component.  Category (if specified) will also not be taken into account. Only products with specified SKUs will be displayed in exactly the same order as they are provided in SKUs field."),'\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-products-grid-configurator__section">\n            <h3 class="cc-products-grid-configurator__subtitle">').concat(g.default("Mobile Layout"),':</h3>\n            <div class="cc-products-grid-configurator__scenario-options">\n                <ul class="cc-products-grid-configurator__scenario-options-list">\n                    <li\n                        :class="{\n                            \'cc-products-grid-configurator__option--selected\': isOptionSelected(\'rows_mobile\', optionId),\n                        }"\n                        class="cc-products-grid-configurator__option"\n                        v-for="(optionId, option) in scenarioOptions.rows_mobile"\n                        @click="setOption(\'rows_mobile\', optionId)">\n                        <div class="cc-products-grid-configurator__option-wrapper">\n                            <svg class="cc-products-grid-configurator__option-icon">\n                                <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                            </svg>\n                        </div>\n                        <p class="cc-products-grid-configurator__option-name">\n                            <input v-if="optionId === \'1000\'" type="text" name="cfg-ml-custom" class="cc-input__input cc-input__input--type-tiny" id="cfg-ml-custom" maxlength="3" v-model="tmpConfiguration.rows_mobile" @change="setOption(\'rows_mobile\', tmpConfiguration.rows_mobile)">\n                            {{ option.name }}\n                        </p>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <section class="cc-products-grid-configurator__section">\n            <h3 class="cc-products-grid-configurator__subtitle">').concat(g.default("Tablet Layout"),':</h3>\n            <div class="cc-products-grid-configurator__scenario-options">\n                <ul class="cc-products-grid-configurator__scenario-options-list">\n                    <li\n                        :class="{\n                            \'cc-products-grid-configurator__option--selected\': isOptionSelected(\'rows_tablet\', optionId),\n                        }"\n                        class="cc-products-grid-configurator__option"\n                        v-for="(optionId, option) in scenarioOptions.rows_tablet"\n                        @click="setOption(\'rows_tablet\', optionId)">\n                        <div class="cc-products-grid-configurator__option-wrapper">\n                            <svg class="cc-products-grid-configurator__option-icon">\n                                <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                            </svg>\n                        </div>\n                        <p class="cc-products-grid-configurator__option-name">\n                            <input v-if="optionId === \'1000\'" type="text" name="cfg-tl-custom" class="cc-input__input cc-input__input--type-tiny" id="cfg-tl-custom" maxlength="3" v-model="tmpConfiguration.rows_tablet" @change="setOption(\'rows_tablet\', tmpConfiguration.rows_tablet)">\n                            {{ option.name }}\n                        </p>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <section class="cc-products-grid-configurator__section">\n            <h3 class="cc-products-grid-configurator__subtitle">').concat(g.default("Desktop Layout"),':</h3>\n            <div class="cc-products-grid-configurator__scenario-options">\n                <ul class="cc-products-grid-configurator__scenario-options-list">\n                    <li\n                        :class="{\n                            \'cc-products-grid-configurator__option--selected\': isOptionSelected(\'rows_desktop\', optionId),\n                        }"\n                        class="cc-products-grid-configurator__option"\n                        v-for="(optionId, option) in scenarioOptions.rows_desktop"\n                        @click="setOption(\'rows_desktop\', optionId)">\n                        <div class="cc-products-grid-configurator__option-wrapper">\n                            <svg class="cc-products-grid-configurator__option-icon">\n                                <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                            </svg>\n                        </div>\n                        <p class="cc-products-grid-configurator__option-name">\n                            <input v-if="optionId === \'1000\'" type="text" name="cfg-dl-custom" class="cc-input__input cc-input__input--type-tiny" id="cfg-dl-custom" maxlength="3" v-model="tmpConfiguration.rows_desktop" @change="setOption(\'rows_desktop\', tmpConfiguration.rows_desktop)">\n                            {{ option.name }}\n                        </p>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <section class="cc-products-grid-configurator__section">\n            <h3 class="cc-products-grid-configurator__subtitle">').concat(g.default("Image Teaser"),':</h3>\n            <div class="cc-products-grid-configurator__scenario-options">\n                <ul class="cc-products-grid-configurator__scenario-options-list">\n                    <li\n                        :class="{\n                            \'cc-products-grid-configurator__option--selected\': configuration.useTeaser == optionId,\n                        }"\n                        class="cc-products-grid-configurator__option"\n                        v-for="(optionId, option) in scenarioOptions.useTeaser"\n                        @click="setOption(\'useTeaser\', optionId)">\n                        <div class="cc-products-grid-configurator__option-wrapper">\n                            <svg class="cc-products-grid-configurator__option-icon">\n                                <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                            </svg>\n                        </div>\n                        <p class="cc-products-grid-configurator__option-name">\n                            {{ option.name }}\n                        </p>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <teaser-configurator :configuration="configuration.items" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'products-grid\'" :products-per-page="productsPerPage" v-show="configuration.useTeaser" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(0) != -1"></teaser-configurator>\n\n    </div>'),props:{configuration:{type:Object,default:function(){return{customCssClass:"",category_id:"",filter:"",order_by:"creation_date",order_type:"ASC",rows_desktop:1,rows_tablet:1,rows_mobile:1,skus:"",limit:"",class_overrides:{dataProvider:""},useTeaser:"",scenario:{contentPlacement:{id:"over"}},items:[JSON.parse(JSON.stringify(at))]}}},uploaderBaseUrl:{type:String,default:""},imageEndpoint:{type:String,default:""},categoriesDataUrl:{type:String,default:""},adminPrefix:{type:String,default:"admin"},productCollectionsSorters:{type:[String,Array],default:""},productCollectionsFilters:{type:[String,Array],default:""},xmlConfigEntry:{type:String,default:"products_grid"}},data:function(){return{invalidVideoPlaceholderTeaserIndexes:[],configuration:this.getInitialConfiguration(),categoryPicker:void 0,tmpConfiguration:{rows_mobile:this.getRowsSetup("rows_mobile"),rows_tablet:this.getRowsSetup("rows_tablet"),rows_desktop:this.getRowsSetup("rows_desktop")},scenarioOptions:{rows_mobile:{1:{name:g.default("1 row of products"),iconId:"pr_1"},2:{name:g.default("2 rows of products"),iconId:"pr_2"},3:{name:g.default("3 rows of products"),iconId:"pr_3"},4:{name:g.default("4 rows of products"),iconId:"pr_4"},1e3:{name:g.default(" rows of products"),iconId:"pr_custom"}},rows_tablet:{1:{name:g.default("1 row of products"),iconId:"pr_1"},2:{name:g.default("2 rows of products"),iconId:"pr_2"},3:{name:g.default("3 rows of products"),iconId:"pr_3"},4:{name:g.default("4 rows of products"),iconId:"pr_4"},1e3:{name:g.default(" rows of products"),iconId:"pr_custom"}},rows_desktop:{1:{name:g.default("1 row of products"),iconId:"pr_1"},2:{name:g.default("2 rows of products"),iconId:"pr_2"},3:{name:g.default("3 rows of products"),iconId:"pr_3"},4:{name:g.default("4 rows of products"),iconId:"pr_4"},1e3:{name:g.default(" rows of products"),iconId:"pr_custom"}},useTeaser:{"":{name:g.default("No image teaser"),iconId:"no_teaser"},true:{name:g.default("With image teaser"),iconId:"teaser_left"}}}}},events:{"component-configurator__save":function(){this.configuration.class_overrides&&""===this.configuration.class_overrides.dataProvider&&delete this.configuration.class_overrides,this.configuration.isError=!1,this._validateVideoPlaceholders(),this.setProductsLimit(),this._collectTeasersCssClasses(),this.onSave()}},methods:{getInitialConfiguration:function(){var t=this;return this.configuration.hero&&(this.$set("configuration.scenario.contentPlacement.id","over"),this.$set("configuration.useTeaser","true"),this.$set("configuration.items",[JSON.parse(JSON.stringify(at))]),Object.entries(this.configuration.hero).map((function(e){if("colorScheme"===e[0]&&(t.configuration.items[0].optimizers.color_scheme=e[1]),"image"===e[0]&&(t.configuration.items[0].image.raw=e[1]),"decoded_image"===e[0]&&(t.configuration.items[0].image.decoded=e[1]),"button"===e[0]&&(t.configuration.items[0].cta.label=e[1].label),"href"===e[0]&&(t.configuration.items[0].cta.href=e[1]),"headline"===e[0]&&(t.configuration.items[0].slogan=e[1]),"subheadline"===e[0]&&(t.configuration.items[0].description=e[1]),"paragraph"===e[0]&&(t.configuration.items[0].description+="<br>"+e[1]),"displayVariant"===e[0])switch(e[1]){case"1":t.configuration.items[0].content_align.x=1,t.configuration.items[0].content_align.y=2;break;case"2":t.configuration.items[0].content_align.x=1,t.configuration.items[0].content_align.y=3;break;case"3":t.configuration.items[0].content_align.x=2,t.configuration.items[0].content_align.y=2;break;case"4":t.configuration.items[0].content_align.x=2,t.configuration.items[0].content_align.y=3;break;default:t.configuration.items[0].content_align.x=1,t.configuration.items[0].content_align.y=1}"position"===e[0]&&(t.configuration.items[0].position=e[1])})),delete this.configuration.hero),this.configuration},setOption:function(t,e,n){n?this.configuration[t][n]=e:this.configuration[t]="1000"===e?this.tmpConfiguration[t]:e,this.setProductsLimit()},isOptionSelected:function(t,e){return this.configuration[t]==e||"1000"===e&&this.configuration[t]>4},getMaxPossibleColumns:function(){var t=this.ccConfig.columns["one-column"];return Math.max.apply(Math,Object.keys(t).map((function(e){return t[e]})))},setProductsLimit:function(){var t=parseInt(this.configuration.items[0].size.x,10),e=parseInt(this.configuration.items[0].size.y,10),n=Math.max(this.configuration.rows_mobile,this.configuration.rows_tablet,this.configuration.rows_desktop),i=""!==this.configuration.useTeaser?t*e:0;i>=1&&n<e&&(i=t),this.configuration.limit=n*this.getMaxPossibleColumns()-i},getRowsSetup:function(t){return this.configuration[t]>5?this.configuration[t]:5},_collectTeasersCssClasses:function(){if(null!=this.configuration.items){var t=this._getCustomCssFields(this.ccConfig.teaser.tabs);this.configuration.items.forEach((function(e,n){var i=[];t.forEach((function(t){e[t]&&"string"==typeof e[t]&&i.push(e[t])})),e.cc_css_classes=i.join(" ")}))}},_validateVideoPlaceholders:function(){var t=this;this.invalidVideoPlaceholderTeaserIndexes=[],this.configuration.items.forEach((function(e,n){e.video&&e.video.url.length&&!e.image.raw&&(t.invalidVideoPlaceholderTeaserIndexes.push(n),t.configuration.isError=!0)}))}},ready:function(){var t=this;this.productCollectionsSorters=""!==this.productCollectionsSorters?JSON.parse(this.productCollectionsSorters):[],this.productCollectionsFilters=""!==this.productCollectionsFilters?JSON.parse(this.productCollectionsFilters):[],this.configuration.class_overrides||(this.configuration.class_overrides={dataProvider:""}),this.setProductsLimit(),d.default("body").trigger("showLoadingPopup"),this.$http.get(this.categoriesDataUrl).then((function(e){t.categoryPicker=new bt(d.default("#cfg-pg-category"),JSON.parse(e.body),{multiple:!1}),d.default("body").trigger("hideLoadingPopup"),d.default(".tmp-select").remove()}))}},zt={mixins:[tt],template:"#cc-static-block-template",props:{configuration:{type:Object,default:function(){return{identifier:"",title:"",resetstyles:!1}}}},events:{"component-configurator__save":function(){var t=this.$els.cmsBlocksSelect.options[this.$els.cmsBlocksSelect.selectedIndex];this.configuration.identifier===t.value&&""!==this.configuration.identifier&&(this.configuration.title=t.text,this.onSave())}}},jt={extends:rt,template:'<div class="cc-image-teaser-configurator cc-image-teaser-configurator--teaser-and-text {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Teaser Width</h3>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.teaserWidth.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.teaserWidth"\n                    @click="!option.disabled && toggleOption(\'teaserWidth\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Mobile Order</h3>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.mobileLayout.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.mobileLayout"\n                    @click="!option.disabled && toggleOption(\'mobileLayout\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-configurator__section cc-image-teaser-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.image_teaser != null && ccConfig.image_teaser.custom_sections != null" v-for="section in ccConfig.image_teaser.custom_sections">\n            <h3 class="cc-image-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                        :teaser-index="9999"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-configurator__section cc-image-teaser-configurator__section--2-columns">\n            <div class="cc-image-teaser-configurator__item cc-image-teaser-configurator__item--column" id="cc-image-teaser-item-0">\n                <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="0" :configuration="items[0]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'teaser-and-text\'" configurator-layout="column" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(0) != -1"></teaser-configurator>\n            </div>\n            <div class="cc-image-teaser-configurator__item cc-image-teaser-configurator__item--column" id="cc-image-teaser-item-1">\n                <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="1" :configuration="items[1]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'teaser-and-text\'" configurator-layout="column" :teaser-type="\'text-only\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(1) != -1"></teaser-configurator>\n            </div>\n        </section>\n    </div>',props:{configuration:{type:Object,default:function(){return{customCssClass:"",items:[JSON.parse(JSON.stringify(at)),JSON.parse(JSON.stringify(at))],ignoredItems:[],scenario:{teaserWidth:{},desktopLayout:{},contentPlacement:{},mobileLayout:{}}}}}},data:function(){return{invalidVideoPlaceholderTeaserIndexes:[]}},ready:function(){this.scenarioOptions={teaserWidth:{container:{name:"Content width",iconId:"tw_content-width",disabled:!1},window:{name:"Browser width",iconId:"tw_window-width",disabled:!1}},mobileLayout:{"image-text":{name:"Image (top) - text (bottom)",iconId:"mb_1",disabled:!1},"text-image":{name:"Text (top) - image (bottom)",iconId:"mb_2",disabled:!1}}},this.togglePossibleOptions=function(){return!0}},methods:{_validateOptionsSet:function(){}}},Mt={extends:rt,template:'<div class="cc-image-teaser-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-image-teaser-configurator__section cc-image-teaser-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.image_teaser != null && ccConfig.image_teaser.custom_sections != null" v-for="section in ccConfig.image_teaser.custom_sections">\n            <h3 class="cc-image-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                        :teaser-index="9999"\n                    ></component>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">{{\'Instagram images limit\' | translate}}:</h3>\n            <div class="cc-input cc-input--group cc-input cc-teaser-configurator__form-group">\n                <div class="cc-input cc-teaser-configurator__form-element">\n                    <label for="{{fieldId | randomizeElementId}}" class="cc-input__label">\n                        {{\'Instagram images limit\' | translate}}:\n                    </label>\n                    <select class="cc-input__select" v-model="configuration.scenario.numberOfSlides">\n                        <option v-for="(optionId, option) in scenarioOptions.numberOfSlides" :value="optionId">{{ option.name }}</option>\n                    </select>\n                </div>\n            </div>\n        </section>\n    </div>',props:{configuration:{type:Object,default:function(){return{customCssClass:"",scenario:{teaserWidth:{name:"Content width",disabled:!1,id:"container-slider"},desktopLayout:{disabled:",",id:"4",name:"4 in row",teasersNum:"4"},contentPlacement:{contentPlacement:"1",disabled:"",id:"over",name:"Text over image"},mobileLayout:{id:"mobile-slider",name:"Slider",disabled:!1},numberOfSlides:4}}}},adminPrefix:{type:String,default:"admin"}},ready:function(){this.scenarioOptions={numberOfSlides:{4:{name:"4 Instagram images",disabled:!1},8:{name:"8 Instagram images",disabled:!1},12:{name:"12 Instagram images",disabled:!1}}},this.availableScenarios=[["container","4","over",["mobile-slider"]]],this.configuration.numberOfSlides&&!this.configuration.numberOfSlides&&this.toggleOption("contentPlacement","4"),this.togglePossibleOptions=function(){return!0}}},Ut={extends:rt,template:'<div class="cc-image-teaser-configurator cc-image-teaser-configurator--mosaic {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Teaser Width</h3>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.teaserWidth.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.teaserWidth"\n                    @click="!option.disabled && toggleOption(\'teaserWidth\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class="cc-image-teaser-configurator__section">\n            <h3 class="cc-image-teaser-configurator__subtitle">Proportions</h3>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.proportions.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.proportions"\n                    @click="!option.disabled && toggleOption(\'proportions\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-configurator__section" v-show="!ccConfig.mosaic.support_breakpoint_dedicated_images">\n            <h3 class="cc-image-teaser-configurator__subtitle">Text Positioning</h3>\n            <div class="cc-image-teaser-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-image-teaser-configurator__option--selected\': configuration.scenario.contentPlacement.id == optionId,\n                        \'cc-image-teaser-configurator__option--disabled\': option.disabled,\n                    }"\n                    class="cc-image-teaser-configurator__option"\n                    v-for="(optionId, option) in scenarioOptions.contentPlacement"\n                    @click="!option.disabled && toggleOption(\'contentPlacement\', optionId)">\n                    <div class="cc-image-teaser-configurator__option-wrapper">\n                        <svg class="cc-image-teaser-configurator__option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-image-teaser-configurator__option-name">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n\n        <section class="cc-image-teaser-configurator__section cc-image-teaser-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.image_teaser != null && ccConfig.image_teaser.custom_sections != null" v-for="section in ccConfig.image_teaser.custom_sections">\n            <h3 class="cc-image-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                        :teaser-index="9999"\n                    ></component>\n                </div>\n            </div>\n        </section>\n\n        <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="0" :configuration="items[0]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'mosaic\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(0) != -1"></teaser-configurator>\n\n        <teaser-configurator :class="cc-teaser-configurator--image-teaser" :teaser-index="1" :configuration="items[1]" :parent-configuration="configuration" :uploader-base-url="uploaderBaseUrl" :image-endpoint="imageEndpoint" :admin-prefix="adminPrefix" :cc-config="ccConfig" :caller-component-type="\'mosaic\'" :video-teaser-placeholder-error="invalidVideoPlaceholderTeaserIndexes.indexOf(1) != -1"></teaser-configurator>\n\n    </div>',props:{configuration:{type:Object,default:function(){return{customCssClass:"",items:[JSON.parse(JSON.stringify(at)),JSON.parse(JSON.stringify(at))],ignoredItems:[],scenario:{teaserWidth:{id:"container"},proportions:{id:"1"},contentPlacement:{id:"over"},desktopLayout:{id:"2"},mobileLayout:{id:"mobile-in-columns"}}}}}},ready:function(){this.scenarioOptions={teaserWidth:{container:{name:"Content width",iconId:"tw_content-width",disabled:!1},window:{name:"Browser width",iconId:"tw_window-width",disabled:!1}},proportions:{1:{name:"",iconId:"proportion_1",disabled:!1},2:{name:"",iconId:"proportion_2",disabled:!1}},contentPlacement:{over:{name:"Text over image",iconId:"tl_over",disabled:!1,contentPlacement:!0},under:{name:"Text below image",iconId:"tl_under",disabled:!1,contentPlacement:!1}}},this.togglePossibleOptions=function(){return!0}},events:{teaser__deleteItem:function(t){this.deleteTeaserItem(t)}},methods:{deleteTeaserItem:function(t){var e=this;h.default({content:d.default.mage.__("Are you sure you want to delete this item?"),actions:{confirm:function(){e.$set("configuration.items[".concat(t,"]"),JSON.parse(JSON.stringify(at)))}}})}}},Vt={mixins:[tt],components:{"action-button":y,"component-adder":x,"component-actions":w},template:'<div :class="componentCssClasses">\n        <div class="cc-accordion-configurator__section cc-accordion-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.accordion != null && ccConfig.accordion.custom_sections != null" v-for="section in ccConfig.accordion.custom_sections">\n            <h3 class="cc-accordion-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-custom-fields">\n                <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                    <component\n                        :is="\'custom-element-\' + field.type"\n                        :configuration="configuration"\n                        :field-configuration="field"\n                    ></component>\n                </div>\n            </div>\n        </div>\n        <div class="cc-accordion-configurator__section">\n            <h3 class="cc-accordion-configurator__subtitle">'.concat(g.default("Accordion width"),'</h3>\n            <div class="cc-accordion-configurator__scenario-options">\n                <div\n                    :class="{\n                        \'cc-accordion-configurator__scenario-option--selected\': configuration.scenarios.reading.id == optionId,\n                    }"\n                    class="cc-accordion-configurator__scenario-option"\n                    v-for="(optionId, option) in scenarioOptions.reading"\n                    @click="toggleOption(\'reading\', optionId)">\n                    <div class="cc-accordion-configurator__scenario-option-wrapper">\n                        <svg class="cc-accordion-configurator__scenario-option-icon">\n                            <use v-bind="{ \'xlink:href\': \'#\' + option.iconId }"></use>\n                        </svg>\n                    </div>\n                    <p class="cc-accordion-configurator__scenario-option-name">\n                        ').concat(g.default("{{ option.name }}"),'\n                    </p>\n                </div>\n            </div>\n        </div>\n        <div class="cc-accordion-configurator__section">\n            <h3 class="cc-accordion-configurator__subtitle">Global options</h3>\n            <div class="cc-accordion-configurator__option">\n                <div class="admin__actions-switch" data-role="switcher">\n                    <input\n                        type="checkbox"\n                        class="admin__actions-switch-checkbox"\n                        id="multiple-collapsible-switcher"\n                        v-model="configuration.multiple_collapsible"\n                    >\n                    <label for="multiple-collapsible-switcher" class="admin__actions-switch-label">\n                        <span class="admin__actions-switch-text">{{ \'Allow multiple sections to be opened at the same time\' | translate }}</span>\n                    </label>\n                </div>\n            </div>\n            <div class="cc-accordion-configurator__option">\n                <div class="admin__actions-switch" data-role="switcher">\n                    <input\n                        type="checkbox"\n                        class="admin__actions-switch-checkbox"\n                        id="expand-first-switcher"\n                        v-model="configuration.expand_first"\n                    >\n                    <label for="expand-first-switcher" class="admin__actions-switch-label">\n                        <span class="admin__actions-switch-text" v-if="!supportGroups">{{ \'Unfold first entry on page loaded\' | translate }}</span>\n                        <span class="admin__actions-switch-text" v-if="supportGroups">{{ \'Unfold first entry of each group on page loaded\' | translate }}</span>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n        <div class="cc-accordion-configurator__section cc-accordion-configurator__group" v-for="(groupIndex, group) in configuration.groups" id="cc-accordion-group-{{ groupIndex }}">\n            <component-adder class="cc-component-adder cc-component-adder--first" v-if="supportGroups">\n                <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-accordion-configurator__item-action-button" @click="createGroup(groupIndex)">\n                    <svg class="cc-action-button__icon cc-action-button__icon--size_300"><use xlink:href="#icon_plus"></use></svg>\n                </button>\n            </component-adder>\n\n            <div class="cc-accordion-configurator__group-content">\n                <div class="cc-accordion-configurator__group-headline" v-if="supportGroups">\n                    <div class="cc-input cc-input cc-accordion-configurator__group-headline-input-wrapper">\n                        <input type="text" v-model="group.headline" class="cc-input__input cc-accordion-configurator__group-headline-input" placeholder="{{ \'Group title\' | translate }}">\n                    </div>\n                    <div class="cc-accordion-configurator__group-tools">\n                        <component-actions>\n                            <template slot="cc-component-actions__buttons">\n                                <button\n                                    class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--up cc-accordion-configurator__group-action-button"\n                                    :class="{\'cc-action-button--look_disabled\': isFirstItem(groupIndex)}"\n                                    @click="moveGroupUp(groupIndex)"\n                                    :disabled="isFirstItem(groupIndex)"\n                                >\n                                    <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                        <use xlink:href="#icon_arrow-up"></use>\n                                    </svg>\n                                </button>\n                                <button\n                                    class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--delete cc-accordion-configurator__group-action-button"\n                                    :class="{\'cc-action-button--look_disabled\': configuration.groups.length < 2}"\n                                    @click="deleteGroup(groupIndex)"\n                                    :disabled="configuration.groups.length < 2"\n                                >\n                                    <svg class="cc-action-button__icon">\n                                        <use xlink:href="#icon_trash-can"></use>\n                                    </svg>\n                                </button>\n                                <button\n                                    class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--down cc-accordion-configurator__group-action-button"\n                                    :class="{\'cc-action-button--look_disabled\': isLastGroup(groupIndex)}"\n                                    :disabled="isLastGroup(groupIndex)"\n                                    @click="moveGroupDown(groupIndex)"\n                                >\n                                    <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                        <use xlink:href="#icon_arrow-down"></use>\n                                    </svg>\n                                </button>\n                            </template>\n                        </component-actions>\n                    </div>\n                </div>\n                <div class="cc-accordion-configurator__items">\n                    <div class="cc-accordion-configurator__item" id="cc-accordion-item-{{ groupIndex }}-{{ $index }}" v-for="item in group.items">\n                        <div class="cc-input cc-accordion-configurator__item-headline">\n                            <div class="cc-accordion-configurator__item-headline-input-wrapper">\n                                <input type="text" v-model="item.headline" class="cc-input__input cc-accordion-configurator__input cc-accordion-configurator__item-headline-input" placeholder="{{ \'Headline\' | translate }}">\n                            </div>\n                            <div class="cc-accordion-configurator__item-tools">\n                                <component-actions>\n                                    <template slot="cc-component-actions__buttons">\n                                        <button\n                                            class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--up cc-accordion-configurator__action-button"\n                                            :class="{\'cc-action-button--look_disabled\': isFirstItem($index)}"\n                                            @click="moveItemUp(groupIndex, $index)"\n                                            :disabled="isFirstItem($index)"\n                                        >\n                                            <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                <use xlink:href="#icon_arrow-up"></use>\n                                            </svg>\n                                        </button>\n                                        <button\n                                            class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--delete cc-accordion-configurator__action-button"\n                                            :class="{\'cc-action-button--look_disabled\': group.items.length < 2}"\n                                            @click="deleteItem(groupIndex, $index)"\n                                            :disabled="group.items.length < 2"\n                                        >\n                                            <svg class="cc-action-button__icon">\n                                                <use xlink:href="#icon_trash-can"></use>\n                                            </svg>\n                                        </button>\n                                        <button\n                                            class="cc-action-button cc-action-button--look_default cc-action-button--type_icon-only cc-component-actions__button cc-component-actions__button--down cc-accordion-configurator__action-button"\n                                            :class="{\'cc-action-button--look_disabled\': isLastItem(groupIndex, $index)}"\n                                            :disabled="isLastItem(groupIndex, $index)"\n                                            @click="moveItemDown(groupIndex, $index)"\n                                        >\n                                            <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                                                <use xlink:href="#icon_arrow-down"></use>\n                                            </svg>\n                                        </button>\n                                    </template>\n                                </component-actions>\n                            </div>\n                        </div>\n                        <div class="cc-input cc-accordion-configurator__item-content">\n                            <div class="cc-accordion-configurator__item-editor">\n                                <div class="buttons-set | cc-accordion-configurator__wysiwyg-buttons">\n                                    <button\n                                        type="button"\n                                        class="scalable action-show-hide"\n                                        @click="toggleEditor(item.editorId, groupIndex, $index)"\n                                    >\n                                        {{ item.isEditorOpened ? \'Hide Editor\' : \'Show Editor\' | translate }}\n                                    </button>\n                                    <button\n                                        type="button"\n                                        class="scalable action-add-widget plugin"\n                                        @click="openWidgetModal(item.editorId)"\n                                        v-show="!item.isEditorOpened"\n                                    >\n                                        {{ \'Insert Widget\' | translate }}...\n                                    </button>\n                                    <button\n                                        type="button"\n                                        class="scalable action-add-image plugin"\n                                        @click="openMediaModal(item.editorId)"\n                                        v-show="!item.isEditorOpened"\n                                    >\n                                        {{ \'Insert Image\' | translate }}...\n                                    </button>\n                                    <button\n                                        type="button"\n                                        class="scalable add-variable plugin"\n                                        @click="openMagentoVariablesModal(item.editorId)"\n                                        v-show="!item.isEditorOpened"\n                                    >\n                                        {{ \'Insert Variable\' | translate }}...\n                                    </button>\n                                </div>\n                                <textarea v-model="item.content" class="cc-input__textarea cc-accordion-configurator__textarea cc-accordion-configurator__item-content-textarea" placeholder="{{ \'Content (including HTML)\' | translate }}" data-item-index="{{ groupIndex }}-{{ $index }}" id="{{ item.editorId }}"></textarea>\n                            </div>\n                        </div>\n                    </div>\n\n                    <button class="cc-action-button cc-action-button--look_default cc-action-button--type_icon cc-component-actions__button cc-component-actions__button--add cc-accordion-configurator__add-item-button" @click="createItem(groupIndex)">\n                        <svg class="cc-action-button__icon cc-action-button__icon--size_100">\n                            <use xlink:href="#icon_plus"></use>\n                        </svg>\n                        {{ \'Add\' | translate }}\n                    </button>\n                </div>\n            </div>\n\n            <component-adder class="cc-component-adder cc-component-adder--last" v-if="supportGroups && configuration.groups.length">\n                <button is="action-button" class="cc-action-button cc-action-button--look_important cc-action-button--type_icon-only | cc-accordion-configurator__item-action-button" @click="createGroup(groupIndex + 1)">\n                    <svg class="cc-action-button__icon cc-action-button__icon--size_300"><use xlink:href="#icon_plus"></use></svg>\n                </button>\n            </component-adder>\n        </div>\n    </div>'),props:{configuration:{type:Object,default:function(){return{customCssClass:"",multiple_collapsible:!0,expand_first:!0,groups:[JSON.parse(JSON.stringify({headline:"",items:[{headline:"",content:"",isEditorOpened:!0,editorId:"editor_".concat(9999e4*Math.random()<<0)}]}))],scenarios:{reading:{}}}}},xmlConfigEntry:{type:String,default:"accordion"},wysiwygConfig:{type:String,default:""},uploaderBaseUrl:{type:String,default:""},adminPrefix:{type:String,default:""}},computed:{supportGroups:function(){return null!=this.ccConfig.accordion&&this.ccConfig.accordion.support_groups}},data:function(){return{componentCssClasses:{"cc-accordion-configurator":!0,"cc-accordion-configurator--with-groups":this.supportGroups},editorInstances:{},scenarioOptions:{reading:{full:{name:"Container width",iconId:"tw_content-width-text"},optimal:{name:"Optimal reading width",iconId:"tw_optimal-reading"}}}}},events:{"component-configurator__save":function(){var t=this;Object.keys(this.configuration.groups).forEach((function(e){Object.keys(t.configuration.groups[e].items).forEach((function(n){t.$set("configuration.groups[".concat(e,"].items[").concat(n,"].content"),t.fixMarkup(t.configuration.groups[e].items[n].content)),delete t.configuration.groups[e].items[n].editorInitialized}))})),this.onSave()}},filters:{translate:function(t){return d.default.mage.__(t)}},methods:{createGroup:function(t){this.configuration.groups.splice(t,0,JSON.parse(JSON.stringify({headline:"",items:[{headline:"",content:"",isEditorOpened:!0,editorId:"editor_".concat(9999e4*Math.random()<<0)}]}))),this.initWysiwyg(t,0),this.onChange()},deleteGroup:function(t){var e=this;h.default({content:d.default.mage.__("Are you sure you want to delete this group?"),actions:{confirm:function(){Object.keys(e.configuration.groups[t].items).forEach((function(n){delete e.editorInstances["editor_".concat(t,"_").concat(n)]})),e.configuration.groups.splice(t,1)}}})},moveGroupUp:function(t){var e=this;if(t>0){var n=d.default("#cc-accordion-group-".concat(t)),i=d.default("#cc-accordion-group-".concat(t-1));n.addClass("cc-accordion-configurator__group--animating").css("transform","translateY(".concat(-Math.abs(i.outerHeight(!0)),"px)")),i.addClass("cc-accordion-configurator__group--animating").css("transform","translateY(".concat(n.outerHeight(!0),"px )")),setTimeout((function(){var o=e.configuration.groups[t].items,c=e.configuration.groups[t-1].items;Object.keys(o).forEach((function(t){o[t].isEditorOpened&&e.editorInstances[o[t].editorId].toggle()})),Object.keys(c).forEach((function(t){c[t].isEditorOpened&&e.editorInstances[c[t].editorId].toggle()})),e.configuration.groups.splice(t-1,0,e.configuration.groups.splice(t,1)[0]),n.removeClass("cc-accordion-configurator__group--animating").css("transform",""),i.removeClass("cc-accordion-configurator__group--animating").css("transform",""),Object.keys(o).forEach((function(t){o[t].isEditorOpened&&e.editorInstances[o[t].editorId].toggle()})),Object.keys(c).forEach((function(t){c[t].isEditorOpened&&e.editorInstances[c[t].editorId].toggle()})),e.onChange()}),400)}},moveGroupDown:function(t){var e=this;if(t<this.configuration.groups.length-1){var n=d.default("#cc-accordion-group-".concat(t)),i=d.default("#cc-accordion-group-".concat(t+1));n.addClass("cc-accordion-configurator__group--animating").css("transform","translateY(".concat(i.outerHeight(!0),"px)")),i.addClass("cc-accordion-configurator__group--animating").css("transform","translateY(".concat(-Math.abs(n.outerHeight(!0)),"px)")),setTimeout((function(){var o=e.configuration.groups[t].items,c=e.configuration.groups[t+1].items;Object.keys(o).forEach((function(t){o[t].isEditorOpened&&e.editorInstances[o[t].editorId].toggle()})),Object.keys(c).forEach((function(t){c[t].isEditorOpened&&e.editorInstances[c[t].editorId].toggle()})),e.configuration.groups.splice(t+1,0,e.configuration.groups.splice(t,1)[0]),n.removeClass("cc-accordion-configurator__group--animating").css("transform",""),i.removeClass("cc-accordion-configurator__group--animating").css("transform",""),Object.keys(o).forEach((function(t){o[t].isEditorOpened&&e.editorInstances[o[t].editorId].toggle()})),Object.keys(c).forEach((function(t){c[t].isEditorOpened&&e.editorInstances[c[t].editorId].toggle()})),e.onChange()}),400)}},isLastGroup:function(t){return t===this.configuration.groups.length-1},createItem:function(t){var e={headline:"",content:"",isEditorOpened:!0,editorId:"editor_".concat(9999e4*Math.random()<<0)};this.configuration.groups[t].items.splice(this.configuration.groups[t].items.length,0,JSON.parse(JSON.stringify(e))),this.initWysiwyg(t,this.configuration.groups[t].items.length-1),this.onChange()},deleteItem:function(t,e){var n=this;h.default({content:d.default.mage.__("Are you sure you want to delete this item?"),actions:{confirm:function(){n.configuration.groups[t].items.splice(e,1),delete n.editorInstances["editor_".concat(t,"_").concat(e)]}}})},moveItemUp:function(t,e){var n=this;if(e>0){var i=d.default("#cc-accordion-item-".concat(t,"-").concat(e)),o=d.default("#cc-accordion-item-".concat(t,"-").concat(e-1));i.addClass("cc-accordion-configurator__item--animating").css("transform","translateY(".concat(-Math.abs(o.outerHeight(!0)),"px)")),o.addClass("cc-accordion-configurator__item--animating").css("transform","translateY(".concat(i.outerHeight(!0),"px )")),setTimeout((function(){var c=n.configuration.groups[t].items[e],a=n.configuration.groups[t].items[e-1];c.isEditorOpened&&n.editorInstances[c.editorId].toggle(),a.isEditorOpened&&n.editorInstances[a.editorId].toggle(),n.configuration.groups[t].items.splice(e-1,0,n.configuration.groups[t].items.splice(e,1)[0]),i.removeClass("cc-accordion-configurator__item--animating").css("transform",""),o.removeClass("cc-accordion-configurator__item--animating").css("transform",""),c.isEditorOpened&&n.editorInstances[c.editorId].toggle(),a.isEditorOpened&&n.editorInstances[a.editorId].toggle(),n.onChange()}),400)}},moveItemDown:function(t,e){var n=this;if(e<this.configuration.groups[t].items.length-1){var i=d.default("#cc-accordion-item-".concat(t,"-").concat(e)),o=d.default("#cc-accordion-item-".concat(t,"-").concat(e+1));i.addClass("cc-accordion-configurator__item--animating").css("transform","translateY(".concat(o.outerHeight(!0),"px)")),o.addClass("cc-accordion-configurator__item--animating").css("transform","translateY(".concat(-Math.abs(i.outerHeight(!0)),"px)")),setTimeout((function(){var c=n.configuration.groups[t].items[e],a=n.configuration.groups[t].items[e+1];c.isEditorOpened&&n.editorInstances[c.editorId].toggle(),a.isEditorOpened&&n.editorInstances[a.editorId].toggle(),n.configuration.groups[t].items.splice(e+1,0,n.configuration.groups[t].items.splice(e,1)[0]),i.removeClass("cc-accordion-configurator__item--animating").css("transform",""),o.removeClass("cc-accordion-configurator__item--animating").css("transform",""),c.isEditorOpened&&n.editorInstances[c.editorId].toggle(),a.isEditorOpened&&n.editorInstances[a.editorId].toggle(),n.onChange()}),400)}},isFirstItem:function(t){return 0===t},isLastItem:function(t,e){return e===this.configuration.groups[t].items.length-1},initAllWysiwygEditors:function(){var t=this;Object.keys(this.configuration.groups).forEach((function(e){Object.keys(t.configuration.groups[e].items).forEach((function(n){t.initWysiwyg(Number(e),Number(n))}))}))},openWidgetModal:function(t){widgetTools.openDialog("".concat(this.wysiwygCfg.plugins[1].options.window_url,"widget_target_id/").concat(t,"/"))},openMediaModal:function(t){MediabrowserUtility.openDialog("".concat(this.uploaderBaseUrl,"target_element_id/").concat(t,"/"),"auto","auto",d.default.mage.__("Insert File..."),{closed:!0})},openMagentoVariablesModal:function(t){MagentovariablePlugin.loadChooser(this.wysiwygCfg.plugins[2].options.url,t)},initWysiwyg:function(t,e){var n=this,i=this.configuration.groups[t].items[e];require(["mage/adminhtml/wysiwyg/tiny_mce/setup"],(function(){n.$set("editorInstances.".concat(i.editorId),new wysiwygSetup(i.editorId,n.wysiwygCfg)),i.isEditorOpened&&(n.editorInstances[i.editorId].setup("exact"),n.$set("configuration.groups[".concat(t,"].items[").concat(e,"].editorInitialized"),!0))}))},toggleEditor:function(t,e,n){this.configuration.groups[e].items[n].hasOwnProperty("editorInitialized")?this.editorInstances[t].toggle():(this.editorInstances[t].setup("exact"),this.$set("configuration.groups[".concat(e,"].items[").concat(n,"].editorInitialized"),!0)),this.$set("configuration.groups[".concat(e,"].items[").concat(n,"].isEditorOpened"),!this.configuration.groups[e].items[n].isEditorOpened)},fixMarkup:function(t){return t.replace(/\/>/g,">").replace(/&quot;/g,"'")},toggleOption:function(t,e){this.configuration.scenarios[t]=this.scenarioOptions[t][e],this.configuration.scenarios[t].id=e},updateConfigurationProp:function(){var t=this.$options.props.configuration.default();this.configuration=d.default.extend({},t,this.configuration,!0)}},ready:function(){""!==this.wysiwygConfig&&(this.wysiwygCfg=JSON.parse(this.wysiwygConfig),this.wysiwygCfg.height="130px"),this.initAllWysiwygEditors(),this.updateConfigurationProp()}},At={mixins:[tt],template:'\n    <form class="cc-product-teaser-configurator {{ classes }} | {{ mix }}" {{ attributes }}>\n        <section class="cc-product-teaser-configurator__section cc-product-teaser-configurator__section--{{section.label | sectionID}}" v-if="ccConfig.product_teaser != null && ccConfig.product_teaser.custom_sections != null" v-for="section in ccConfig.product_teaser.custom_sections">\n            <h3 class="cc-product-teaser-configurator__subtitle" v-if="section.label">{{section.label | translate}}</h3>\n            <div class="cc-product-teaser-configurator__custom-sections">\n                <div class="cc-custom-fields">\n                    <div class="cc-custom-fields__form-group" v-for="field in section.content.fields">\n                        <component\n                            :is="\'custom-element-\' + field.type"\n                            :configuration="configuration"\n                            :field-configuration="field"\n                        ></component>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <div class="cc-input cc-input--type-inline">\n            <label class="cc-input__label" for="cfg-pc-sku">'.concat(g.default("SKU"),':</label>\n            <input type="text" name="cfg-pc-sku" class="cc-input__input" id="cfg-pc-sku" v-model="configuration.sku" @change="onChange">\n        </div>\n        <div class="cc-product-teaser-configurator__input-hint">\n            <div class="cc-input__hint">').concat(g.default("Provide only one SKU per component instance."),'</div>\n        </div>\n        <div class="cc-product-teaser-configurator__error-wrapper" v-if="errorMessage.length">\n            <span class="cc-product-teaser-configurator__error">{{ errorMessage }}</span>\n        </div>\n    </form>\n    '),events:{"component-configurator__save":function(){this.$set("configuration.isError",!1),this.$set("configuration.showErrorAlert",!1),""!==this.configuration.sku?this.getProductData():(this.$set("configuration.isError",!0),this.$set("errorMessage",g.default("SKU is required.")),this.onSave())}},props:{configuration:{type:Object,default:function(){return{customCssClass:"",sku:""}}},productDataEndpoint:{type:String,default:""},xmlConfigEntry:{type:String,default:"product_teaser"}},data:function(){return{errorMessage:"",product:null}},methods:{setProductData:function(t){this.$set("configuration.product",{}),this.$set("configuration.product.name",t)},handleUpdate:function(t){if(t.ok&&t.body&&t.body.length){var e=JSON.parse(t.body);e.product&&e.product.name&&this.setProductData(e.product.name)}this.validate(),d.default("body").trigger("hideLoadingPopup")},getProductData:function(){var t=this;d.default("body").trigger("showLoadingPopup"),this.$http.get("".concat(this.productDataEndpoint,"?sku=").concat(this.configuration.sku)).then((function(e){return t.handleUpdate(e)}),(function(){t.validate(),d.default("body").trigger("hideLoadingPopup")}))},validate:function(){this.configuration.product&&""!==this.configuration.product.name||(this.$set("configuration.isError",!0),this.$set("errorMessage",g.default("Can't find product with given SKU. Please verify SKU and try again."))),this.onSave()}}};u.default.use(p.default),u.default.http.headers.custom.Accept="text/html";var Wt,Bt,Ft={type:"slide",responsive:!0,innerScroll:!0,autoOpen:!0,title:g.default("Please select type of component"),buttons:[{text:d.default.mage.__("Cancel"),class:"",click:function(){this.closeModal()}}]},Jt={type:"slide",responsive:!0,innerScroll:!0,autoOpen:!0,title:g.default("Configure your component"),buttons:[{text:d.default.mage.__("Cancel"),class:"",click:function(){this.closeModal()}},{text:d.default.mage.__("Save"),class:"action-primary"}]};return d.default(".admin__control-wysiwig").attr("v-pre",!0),{template:'<div class="content-constructor">\n        <layout-builder\n            v-ref:layout-builder\n            :assets-src="assetsSrc"\n            :cc-config="ccConfig"\n            :image-endpoint="imageEndpoint"\n            :cc-project-configuration="ccProjectConfiguration"\n            :page-type="pageType"\n            :add-component="getComponentPicker"\n            :edit-component="editComponent"\n            :components-configuration="configuration">\n        </layout-builder>\n        <div class="content-constructor__modal content-constructor__modal--picker" v-el:picker-modal></div>\n        <div class="content-constructor__modal content-constructor__modal--configurator" v-el:configurator-modal></div>\n    </div>',components:v({"layout-builder":ft,"component-picker":b,"button-configurator":mt,"category-links-configurator":yt,"custom-html-configurator":xt,"cms-pages-teaser-configurator":wt,"daily-deal-teaser-configurator":Ct,"headline-configurator":kt,"hero-carousel-configurator":It,"image-teaser-configurator":rt,"image-teaser-legacy-configurator":Tt,"magento-product-grid-teasers-configurator":Pt,"paragraph-configurator":$t,"product-carousel-configurator":Lt,"product-finder-configurator":Nt,"products-grid-configurator":Dt,"static-block-configurator":zt,"icon-configurator":St,"teaser-and-text-configurator":jt,"instagram-feed-configurator":Mt,"mosaic-configurator":Ut,"accordion-configurator":Vt,"product-teaser-configurator":At},gt),props:{configuration:{type:String,default:""},adminPrefix:{type:String,default:"admin"},assetsSrc:{type:String,default:""},configuratorEndpoint:{type:String,default:""},uploaderUrl:{type:String,default:""},restTokenEndpoint:{type:String,default:""},imageEndpoint:{type:String,default:""},categoryDataProviderEndpoint:{type:String,default:""},pageType:{type:String,default:"cms_page_form.cms_page_form"},productsPerPage:{type:String,default:"30"},ccProjectConfig:{type:String,default:""},sorters:{type:[String,Array],default:""},filters:{type:[String,Array],default:""},productDataEndpoint:{type:String,default:""}},data:function(){return{ccConfig:this.getCCconfig(),viewXml:JSON.parse(this.ccProjectConfig),initialComponentConfiguration:void 0,restToken:void 0}},ready:function(){var t=d.default(this.$el).closest(".entry-edit.form-inline").attr("data-bind").match(/scope: '([^']+)'/);t&&!t[1]&&(this.pageType=t[1]),this.disableDesignInheritance(),this.dumpConfiguration(),this._isPickerLoaded=!1,this._cleanupConfiguratorModal="",this._configuratorSaveCallback=function(){},this.setRestToken(),d.default("body").loadingPopup({timeout:!1}).trigger("hideLoadingPopup")},events:{"layout-builder__update":function(){this.dumpConfiguration()},"component-configurator__saved":function(t){!t.hasOwnProperty("isError")||t.hasOwnProperty("isError")&&!t.isError?(this._configuratorSavedCallback(t),Bt&&Bt.closeModal&&Bt.closeModal(),Wt&&Wt.closeModal&&Wt.closeModal()):t.hasOwnProperty("showErrorAlert")&&t.showErrorAlert&&m.default({title:g.default("Hey,"),content:d.default.mage.__("Something is wrong with configuration of your component. Please fix all errors before saving.")})},"layout-builder__cmsblock-delete-request":function(t){this.deleteStaticBlock(t)}},methods:{getCCconfig:function(){var t=this.ccProjectConfig?JSON.parse(this.ccProjectConfig):{};return d.default.isEmptyObject(t)?t:t.vars.MageSuite_ContentConstructor},getComponentPicker:function(t){var e=this,n="content-constructor-picker-".concat(this.pageType);this._addComponentInformation=t,Ft.opened=function(){e._isPickerLoaded||(d.default("body").trigger("showLoadingPopup"),e.$http.get("".concat(e.configuratorEndpoint,"picker")).then((function(t){e.$els.pickerModal.innerHTML=t.body,e.$compile(e.$els.pickerModal),e._isPickerLoaded=!0,d.default("body").trigger("hideLoadingPopup")}))),e.$broadcast("component-picker__opened")},Wt&&Wt.modal.attr("id")===n?Wt.openModal():(Wt=f.default(Ft,d.default(this.$els.pickerModal))).modal.attr("id",n)},getComponentConfigurator:function(t,e){var n=this,i="component"+Math.floor(65536*(1+Math.random())).toString(16).substring(1),o=this.ccConfig.sections.defaults[this.pageType]?this.ccConfig.sections.defaults[this.pageType]:this.ccConfig.sections[this.pageType][0];this._configuratorSavedCallback=function(c){n._addComponentInformation({type:t,name:e,id:i,section:o,data:c})},"brand-carousel"===t||"separator"===t?this.$emit("component-configurator__saved",{componentVisibility:{mobile:!0,desktop:!0}}):this.initConfiguratorModal({type:t,name:e,id:i,section:o,data:void 0})},editComponent:function(t,e){this._configuratorSavedCallback=function(n){e({name:t.name,type:t.type,id:t.id,section:t.section,data:n})},this.initConfiguratorModal(t)},initConfiguratorModal:function(t){var e=this,n=function(){};Jt.buttons[1].click=function(){e.$broadcast("component-configurator__save")},Jt.title="".concat(g.default("Configure your component"),'<span class="m2c-content-constructor__modal-subheadline">').concat(this.transformComponentTypeToText(t.type),"</span>"),Jt.opened=function(){d.default("body").trigger("showLoadingPopup"),e.$http.get(e.configuratorEndpoint+t.type).then((function(i){e.$els.configuratorModal.innerHTML=i.body,e.initialComponentConfiguration=t.data,n=e.$compile(e.$els.configuratorModal),d.default("body").trigger("hideLoadingPopup")}))},Jt.closed=function(){n(),e.$els.configuratorModal.innerHTML="",Bt.modal[0].parentNode.removeChild(Bt.modal[0]),e.initialComponentConfiguration=void 0},Bt=f.default(Jt,d.default(this.$els.configuratorModal))},disableDesignInheritance:function(){_.default.get(this.pageType).source.set("data.use_default.custom_layout_update",0)},dumpConfiguration:function(){_.default.get(this.pageType).source.set("data.components",JSON.stringify(this.$refs.layoutBuilder.getComponentInformation()))},setRestToken:function(){var t=this;this.$http.get(this.restTokenEndpoint).then((function(e){t.restToken="Bearer ".concat(e.body)}))},deleteStaticBlock:function(t){this.$http({headers:{Accept:"application/json",Authorization:this.restToken},method:"delete",url:"".concat(window.location.origin,"/rest/V1/cmsBlock/").concat(t)}).then((function(e){"true"!==e.body&&console.warn("Something went wrong, CMS block wasn't removed, please check if block with ID: ".concat(t," exists in database"))}))},transformComponentTypeToText:function(t){var e=t.replace(/\-+/g," ").replace(/[0-9]/g,"");return e.trim().charAt(0).toUpperCase()+e.slice(1)}}}}));
